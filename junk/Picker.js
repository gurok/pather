// https://www.random.org/integers/?num=1000&min=1&max=45&col=1&base=10&format=plain&rnd=new

window.LottoGen = class
{
	static BALL_MAXIMUM = 45;
	static BALL_MINIMUM = 1;

	constructor(data)
	{
		this.data = data;
		this.cursor = Math.round(Math.random(data.length - 1));
	}

	pick(configuration = {})
	{
		let raw = this.data[this.cursor++];
		let {maximum, minimum} =
		{
			minimum: LottoGen.BALL_MINIMUM,
			maximum: LottoGen.BALL_MAXIMUM,
			...configuration
		};
		if(this.cursor === this.data.length)
			this.cursor = 0;

		return(Math.round(((raw - LottoGen.BALL_MINIMUM) / (LottoGen.BALL_MAXIMUM - LottoGen.BALL_MINIMUM)) * (maximum - minimum)) + minimum);
	}

	pickGame(configuration = {})
	{
		let {clusterSize, clusterMinimum, clusterMaximum, sequenceOffset, pickCount} =
		{
			clusterSize: 2,
			clusterMinimum: 1,
			clusterMaximum: 15,
			sequenceOffset: 23,
			pickCount: 6,
			...configuration
		};
		let draw = [];
		let next;
		while(draw.length < clusterSize)
		{
			next = this.pick({minimum: clusterMinimum, maximum: clusterMaximum});
			if(draw.indexOf(next) === -1)
				draw.push(next);
		}
		next = Math.round(draw.reduce((previous, current) => previous + current, 0) / draw.length) + sequenceOffset;
		while(next < 44 && draw.length < pickCount)
		{
			next = this.pick({minimum: next + 1, maximum: Math.min(next + 3, LottoGen.BALL_MAXIMUM)});
			draw.push(next);
		}
		while(draw.length < pickCount)
		{
			next = this.pick();
			if(draw.indexOf(next) === -1)
				draw.push(next);
		}

		return(draw);
	}

	pickTicket()
	{
		let ticket = [];

		while(ticket.length < 50)
		{
			ticket.push(this.pickGame(), this.pickGame({clusterSize: 3}));
		}

		return(ticket.map(i => i.sort((a, b) => a < b ? -1 : (a === b ? 0 : 1)).map(j => j.toString().padStart(" ", 2)).join(", ")).join("\n"));
	}
};

let tatts = new LottoGen(
	[
		21, 42, 15, 34, 41, 5, 12, 16, 9, 35, 18, 18, 6, 37, 19, 22, 19, 21, 9,
		35, 12, 3, 37, 32, 31, 3, 13, 45, 20, 23, 23, 23, 44, 18, 2, 15, 22, 4,
		30, 43, 10, 19, 21, 37, 31, 19, 23, 18, 29, 22, 31, 34, 7, 42, 8, 25,
		45, 10, 44, 45, 18, 16, 43, 40, 15, 6, 21, 13, 31, 8, 3, 20, 40, 28, 36,
		6, 39, 36, 33, 7, 36, 7, 30, 31, 5, 8, 17, 6, 27, 12, 30, 11, 25, 3, 11,
		36, 1, 10, 32, 44, 31, 45, 25, 18, 16, 21, 31, 21, 23, 44, 16, 8, 26, 35,
		40, 34, 5, 5, 44, 10, 5, 11, 15, 12, 26, 34, 42, 9, 1, 36, 22, 24, 2, 37,
		45, 19, 45, 36, 12, 14, 43, 40, 8, 7, 42, 41, 32, 28, 33, 31, 24, 12, 8,
		17, 23, 17, 34, 4, 7, 35, 40, 18, 8, 19, 32, 35, 40, 37, 29, 7, 6, 12,
		35, 35, 25, 6, 13, 14, 15, 29, 8, 45, 34, 43, 23, 11, 5, 30, 15, 10, 15,
		9, 23, 6, 16, 34, 28, 42, 44, 22, 6, 39, 28, 21, 7, 28, 19, 24, 5, 6, 20,
		14, 15, 44, 26, 21, 13, 1, 34, 9, 27, 45, 26, 35, 44, 10, 15, 33, 34, 39,
		2, 12, 41, 32, 6, 7, 31, 39, 3, 30, 5, 19, 25, 32, 14, 43, 6, 7, 19, 1,
		45, 9, 14, 27, 27, 21, 38, 1, 38, 12, 35, 31, 5, 40, 43, 44, 3, 23, 38,
		42, 9, 45, 8, 5, 26, 3, 20, 18, 3, 39, 28, 26, 7, 20, 11, 31, 6, 17, 45,
		9, 37, 43, 26, 11, 13, 44, 40, 39, 19, 26, 37, 31, 39, 15, 35, 11, 5, 16,
		14, 17, 3, 43, 36, 12, 45, 4, 4, 4, 19, 7, 23, 20, 17, 4, 39, 38, 33, 1,
		30, 7, 45, 38, 39, 24, 15, 20, 10, 4, 13, 3, 30, 13, 43, 3, 19, 38, 36,
		26, 3, 21, 8, 26, 36, 12, 8, 17, 42, 39, 30, 14, 37, 1, 21, 35, 40, 11,
		12, 38, 40, 38, 29, 4, 4, 30, 8, 40, 27, 35, 7, 19, 5, 11, 7, 29, 45, 42, 
		6, 36, 37, 34, 8, 28, 3, 41, 18, 7, 35, 25, 27, 36, 43, 39, 37, 33, 31,
		10, 39, 4, 20, 43, 19, 20, 18, 22, 28, 20, 13, 15, 13, 8, 26, 35, 9, 18,
		11, 17, 20, 37, 21, 35, 23, 22, 35, 29, 13, 36, 39, 42, 10, 12, 19, 16,
		19, 44, 34, 30, 42, 8, 43, 38, 7, 29, 8, 17, 7, 38, 31, 15, 35, 36, 21,
		5, 25, 34, 32, 29, 21, 32, 26, 39, 36, 7, 28, 12, 12, 8, 32, 11, 42, 7,
		45, 4, 5, 30, 45, 12, 5, 33, 31, 18, 44, 10, 43, 10, 18, 25, 13, 32, 29,
		28, 11, 23, 6, 37, 25, 11, 5, 37, 6, 20, 4, 23, 43, 15, 2, 4, 33, 37, 18, 13, 9, 41, 32, 20, 11, 15, 41, 8, 14, 14, 2, 33, 45, 30, 25, 32, 35, 30, 43, 19, 9, 4, 37, 1, 7, 28, 19, 36, 42, 25, 12, 8, 1, 16, 19, 25, 45, 15, 14, 40, 19, 30, 19, 37, 12, 20, 17, 18, 24, 3, 29, 6, 24, 20, 2, 31, 20, 17, 21, 5, 8, 32, 32, 38, 8, 12, 5, 38, 22, 18, 33, 10, 38, 16, 20, 18, 10, 17, 36, 44, 11, 44, 6, 18, 3, 40, 27, 35, 29, 23, 31, 6, 26, 31, 8, 4, 4, 34, 31, 16, 1, 41, 44, 32, 41, 39, 24, 21, 42, 37, 1, 16, 2, 5, 29, 39, 12, 2, 26, 13, 44, 11, 15, 11, 17, 3, 10, 4, 18, 32, 5, 22, 9, 15, 38, 41, 18, 40, 36, 6, 34, 38, 38, 32, 8, 40, 45, 21, 35, 24, 17, 3, 34, 15, 6, 32, 33, 26, 24, 13, 17, 18, 27, 26, 3, 23, 21, 28, 34, 23, 43, 39, 16, 27, 12, 36, 32, 20, 17, 9, 25, 5, 15, 25, 30, 27, 14, 37, 34, 25, 39, 6, 26, 15, 41, 38, 10, 25, 39, 19, 34, 30, 43, 39, 37, 6, 7, 5, 20, 35, 8, 28, 22, 37, 22, 27, 8, 4, 13, 40, 31, 45, 27, 17, 14, 43, 36, 37, 3, 32, 5, 22, 41, 9, 29, 43, 1, 7, 17, 39, 28, 37, 26, 36, 22, 11, 13, 39, 2, 16, 27, 25, 30, 37, 44, 11, 28, 1, 24, 24, 31, 19, 41, 36, 35, 45, 39, 6, 23, 39, 19, 1, 40, 20, 18, 40, 9, 19, 18, 22, 18, 15, 16, 1, 7, 18, 17, 38, 26, 25, 40, 16, 43, 26, 20, 15, 1, 25, 28, 36, 13, 17, 19, 40, 23, 26, 11, 19, 26, 42, 45, 29, 12, 28, 14, 10, 4, 36, 17, 30, 5, 7, 14, 31, 17, 45, 7, 7, 30, 42, 18, 38, 20, 33, 32, 13, 26, 34, 44, 34, 41, 45, 43, 33, 19, 8, 18, 18, 42, 4, 17, 21, 27, 17, 37, 28, 45, 9, 10, 34, 39, 17, 26, 22, 40, 40, 22, 31, 18, 24, 39, 25, 17, 38, 32, 16, 9, 25, 30, 13, 44, 37, 37, 31, 37, 26, 22, 45, 19, 17, 31, 16, 38, 23, 14, 22, 9, 25, 38, 36, 17, 29, 29, 20, 5, 22, 7, 31, 8, 14, 22, 39, 28, 9, 39, 10, 29, 21, 14, 23, 20, 38, 40, 26, 22, 2, 28, 7, 21, 5, 37, 20, 21, 19, 13, 18, 16, 8, 32, 40, 41, 31, 1, 36, 13, 5, 28, 20, 38, 20, 9, 31, 12, 42, 42, 1, 4, 14, 8, 32, 42, 28, 42, 19, 18, 9, 21, 39, 38, 34, 31, 27, 39, 42, 15, 27, 30, 1, 33, 28]);