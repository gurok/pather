{"version":3,"file":"pather.min.js","sources":["../source/class/Token.js","../source/class/BigDecimal.js","../source/class/Value.js","../source/class/TokenStream.js","../source/class/Distortion.js","../source/class/PathParser.js","../source/class/ExpressionParser.js","../source/class/Transformer.js","../source/main.js"],"sourcesContent":["export default class Token\n{\n    static TYPE_NUMBER                    = 1;\n    static TYPE_COMMAND                   = 2;\n    static TYPE_DELIMITER                 = 3;\n    static TYPE_WHITESPACE                = 4;\n    static TYPE_IDENTIFIER                = 5;\n    static TYPE_BRACKET                   = 6;\n    static TYPE_END                       = 7;\n    static TYPE_OPERATOR_ADD              = 8;\n    static TYPE_OPERATOR_SUBTRACT         = 9;\n    static TYPE_OPERATOR_MULTIPLY         = 10;\n    static TYPE_OPERATOR_DIVIDE           = 11;\n    static TYPE_OPERATOR_ROTATE           = 12;\n    static TYPE_OPERATOR_SKEW_HORIZONTAL  = 13;\n    static TYPE_OPERATOR_SKEW_VERTICAL    = 14;\n    static TYPE_OPERATOR_FIX              = 15;\n    static TYPE_OPERATOR_MEASURE          = 16;\n    static TYPE_OPERATOR_ASSIGN           = 17;\n    static TYPE_OPERATOR_REPEAT           = 18;\n\n    constructor(type, name, value, position)\n    {\n        this.type = type;\n        this.name = name;\n        this.value = value;\n        this.position = position;\n    }\n\n    static nameOf(type)\n    {\n        return(Object.entries(Token).filter(([key, value]) => value === type)[0][0]);\n    }\n};\n","export default class BigDecimal\n{\n    static LIMIT_PRECISION         = 18;\n    static PI                      = new BigDecimal(\"3.141592653589793238\");\n    static #VALUE_SHIFT            = BigInt(\"1\" + \"0\".repeat(BigDecimal.LIMIT_PRECISION));\n    static #PATTERN_TRAILING_ZERO  = new RegExp(\"\\\\.?0+$\");\n\n    #value;\n\n    constructor(source = 0)\n\t{\n\t\tlet integerPart;\n\t\tlet decimalPart;\n\n\t\tif(source instanceof BigDecimal)\n            this.#value = source.#value;\n\t\telse\n            if(source instanceof BigInt)\n                this.#value = value * BigDecimal.VALUE_SHIFT;\n            else\n            {\n                [integerPart, decimalPart] = (source + \".\").split(\".\");\n                this.#value = BigInt(integerPart + decimalPart.substr(0, BigDecimal.LIMIT_PRECISION).padEnd(BigDecimal.LIMIT_PRECISION, \"0\"));\n                if(decimalPart.charCodeAt(BigDecimal.LIMIT_PRECISION) > 52)\n                    this.#value++;\n            }\n\n\t\treturn;\n    }\n\n    #fromBigInt(source)\n    {\n        let result;\n\n        result = new BigDecimal(this);\n        result.#value = source;\n\n        return(result);\n    }\n\n    #fromBigIntDivision(dividend, divisor)\n    {\n        return(this.#fromBigInt(dividend / divisor + dividend * 2n / divisor % 2n));\n    }\n\n    add(other)\n    {\n        return(this.#fromBigInt(this.#value + new BigDecimal(other).#value));\n    }\n\n    subtract(other)\n    {\n        return(this.#fromBigInt(this.#value - new BigDecimal(other).#value));\n    }\n\n    multiplyBy(other)\n    {\n        return(this.#fromBigIntDivision(this.#value * new BigDecimal(other).#value, BigDecimal.#VALUE_SHIFT));\n    }\n\n    divideBy(other)\n    {\n        return(this.#fromBigIntDivision(this.#value * BigDecimal.#VALUE_SHIFT, new BigDecimal(other).#value));\n    }\n\n    equals(other)\n    {\n        return(this.valueOf() == other);\n    }\n\n    valueOf()\n    {\n        return(this.#value);\n    }\n\n    toNumber()\n    {\n        return(+this.toString());\n    }\n\n    toString(precision = BigDecimal.LIMIT_PRECISION)\n    {\n        let text;\n\n        text = this.#fromBigIntDivision(this.#value, BigInt(\"1\" + \"0\".repeat(precision > -1 ? Math.max(BigDecimal.LIMIT_PRECISION - precision, 0) : BigDecimal.LIMIT_PRECISION))).#value.toString().padStart(precision + 1, \"0\");\n\n        return(text.substr(0, text.length - precision) + (\".\" + text.substr(-precision)).replace(BigDecimal.#PATTERN_TRAILING_ZERO, \"\"));\n    }\n}\n","import BigDecimal from \"./BigDecimal\";\n\nexport default class Value\n{\n\tstatic TYPE_X        = 1;\n\tstatic TYPE_Y        = 2;\n\tstatic TYPE_THETA    = 3;\n\tstatic TYPE_FLAG     = 4;\n\tstatic TYPE_UNIT     = 5;\n\n\tstatic getEmptyResult()\n\t{\n\t\treturn(\n\t\t{\n\t\t\tstack: [],\n\t\t\tsequence: [],\n\t\t\tarity: null,\n\t\t\tpending: 0,\n\t\t\tx: new BigDecimal(0),\n\t\t\ty: new BigDecimal(0),\n\t\t\tfixNext: false,\n\t\t\tlastAngle: null,\n\t\t\toriginX: new BigDecimal(0),\n\t\t\toriginY: new BigDecimal(0) \n\t\t});\n\t}\n};\n","import Token from \"./Token\";\nimport BigDecimal from \"./BigDecimal\";\nimport Value from \"./Value\";\n\nexport default class TokenStream\n{\n    static #PRIORITY =\n    [\n        {\n            type: Token.TYPE_NUMBER,\n            expression: new RegExp(\"^[0-9]*\\\\.?[0-9]+\", \"\"),\n            handler: value => new BigDecimal(value)\n        },\n        {\n            type: Token.TYPE_COMMAND,\n            expression: new RegExp(\"^[achlmqstvz](?![a-z_$])\", \"i\"),\n            handler: value => (\n            {\n                \"a\":\n                [\n                    Value.TYPE_X,\n                    Value.TYPE_Y,\n                    Value.TYPE_THETA,\n                    Value.TYPE_FLAG,\n                    Value.TYPE_FLAG,\n                    Value.TYPE_X,\n                    Value.TYPE_Y\n                ],\n                \"c\":\n                [\n                    Value.TYPE_X,\n                    Value.TYPE_Y,\n                    Value.TYPE_X,\n                    Value.TYPE_Y,\n                    Value.TYPE_X,\n                    Value.TYPE_Y\n                ],\n                \"h\":\n                [\n                    Value.TYPE_X\n                ],\n                \"l\":\n                [\n                    Value.TYPE_X,\n                    Value.TYPE_Y\n                ],\n                \"m\":\n                [\n                    Value.TYPE_X,\n                    Value.TYPE_Y\n                ],\n                \"q\":\n                [\n                    Value.TYPE_X,\n                    Value.TYPE_Y,\n                    Value.TYPE_X,\n                    Value.TYPE_Y\n                ],\n                \"s\":\n                [\n                    Value.TYPE_X,\n                    Value.TYPE_Y,\n                    Value.TYPE_X,\n                    Value.TYPE_Y\n                ],\n                \"t\":\n                [\n                    Value.TYPE_X,\n                    Value.TYPE_Y\n                ],\n                \"v\":\n                [\n                    Value.TYPE_Y\n                ],\n                \"z\":\n                [\n                ]\n            }[value.toLowerCase()])\n        },\n        {\n            type: Token.TYPE_DELIMITER,\n            expression: new RegExp(\"^,+\", \"\"),\n            handler: () => null\n        },\n        {\n            type: Token.TYPE_WHITESPACE,\n            expression: new RegExp(\"^\\\\s+\", \"\"),\n            handler: () => null\n        },\n        {\n            type: Token.TYPE_IDENTIFIER,\n            expression: new RegExp(\"^[a-z_$][a-z0-9_$]*\", \"i\"),\n            handler: value => value\n        },\n        {\n            type: Token.TYPE_BRACKET,\n            expression: new RegExp(\"^[()]\", \"\"),\n            handler: value => value === \"(\"\n        },\n        {\n            type: Token.TYPE_OPERATOR_ADD,\n            expression: new RegExp(\"^\\\\+\", \"\"),\n            handler: value => value\n        },\n        {\n            type: Token.TYPE_OPERATOR_MULTIPLY,\n            expression: new RegExp(\"^\\\\*\", \"\"),\n            handler: value => value\n        },\n        {\n            type: Token.TYPE_OPERATOR_SUBTRACT,\n            expression: new RegExp(\"^-\", \"\"),\n            handler: value => value\n        },\n        {\n            type: Token.TYPE_OPERATOR_DIVIDE,\n            expression: new RegExp(\"^/\", \"\"),\n            handler: value => value\n        },\n        {\n            type: Token.TYPE_OPERATOR_ROTATE,\n            expression: new RegExp(\"^%r\", \"\"),\n            handler: value => value\n        },\n        {\n            type: Token.TYPE_OPERATOR_SKEW_HORIZONTAL,\n            expression: new RegExp(\"^%h\", \"\"),\n            handler: value => value\n        },\n        {\n            type: Token.TYPE_OPERATOR_SKEW_VERTICAL,\n            expression: new RegExp(\"^%v\", \"\"),\n            handler: value => value\n        },\n        {\n            type: Token.TYPE_OPERATOR_FIX,\n            expression: new RegExp(\"^@\", \"\"),\n            handler: value => value\n        },\n        {\n            type: Token.TYPE_OPERATOR_MEASURE,\n            expression: new RegExp(\"^\\\\|\", \"\"),\n            handler: value => value\n        },\n        {\n            type: Token.TYPE_OPERATOR_ASSIGN,\n            expression: new RegExp(\"^=\", \"\"),\n            handler: value => value\n        },\n        {\n            type: Token.TYPE_OPERATOR_REPEAT,\n            expression: new RegExp(\"^#\", \"\"),\n            handler: value => value\n        }\n    ];\n\n    #data = null;\n    #cursor = 0;\n\n    constructor(text)\n    {\n        var chainIndex;\n        var streamIndex;\n        var match;\n        var item;\n\n        this.#data = [];\n        streamIndex = 0;\n        while(text.length)\n        {\n            for(chainIndex = 0; chainIndex < TokenStream.#PRIORITY.length; chainIndex++)\n            {\n                item = TokenStream.#PRIORITY[chainIndex];\n                match = item.expression.exec(text);\n                if(match)\n                {\n                    this.#data.push(new Token(item.type, match[0], item.handler(match[0]), streamIndex));\n                    streamIndex += match[0].length;\n                    text = text.substr(match[0].length);\n                    break;\n                }\n            }\n            if(chainIndex === TokenStream.#PRIORITY.length)\n\t\t\t\tthrow(new SyntaxError(`Unexpected symbol \"${text.substr(0, 1)}\" at column ${streamIndex}`));\n        }\n        this.#data.push(new Token(Token.TYPE_END, null, null, streamIndex));\n    }\n\n    getCurrent()\n    {\n        return(this.#data[this.#cursor] ?? null);\n    }\n\n    getNext()\n    {\n        this.#cursor++;\n\n        return(this.getCurrent());\n    }\n\n    peekNext()\n    {\n        return(this.#data[this.#cursor + 1] ?? null);\n    }\n\n    reset()\n    {\n        this.#cursor = 0;\n\n        return(this.getCurrent());\n    }\n};\n","import BigDecimal from \"./BigDecimal\";\r\n\r\nexport default class Distortion\r\n{\r\n\tstatic OPERATION_ROTATE = 1;\r\n\tstatic OPERATION_SKEW_HORIZONTAL = 2;\r\n\tstatic OPERATION_SKEW_VERTICAL = 3;\r\n\r\n\tconstructor(type, value)\r\n\t{\r\n\t\tthis.type = type;\r\n\t\tthis.value = value;\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\t#getName()\r\n\t{\r\n\t\treturn(\r\n\t\t({\r\n\t\t\t[Distortion.OPERATION_ROTATE]: \"Rotate\",\r\n\t\t\t[Distortion.OPERATION_SKEW_HORIZONTAL]: \"Vertical skew\",\r\n\t\t\t[Distortion.OPERATION_SKEW_VERTICAL]: \"Horizontal skew\",\r\n\t\t})[this.type] ?? \"Unknown\");\r\n\t}\r\n\r\n\ttoString()\r\n\t{\r\n\t\treturn(`${this.#getName()}: ${this.value}`);\r\n\t}\r\n\r\n\trun(x0, y0, x1, y1)\r\n\t{\r\n\t\tlet result;\r\n\t\tlet distortionValue;\r\n\r\n\t\tswitch(this.type)\r\n\t\t{\r\n\t\t\tcase Distortion.OPERATION_ROTATE:\r\n\t\t\t\tlet cosine;\r\n\t\t\t\tlet sine;\r\n\t\t\r\n\t\t\t\tx1 = x1.subtract(x0);\r\n\t\t\t\ty1 = y1.subtract(y0);\r\n\t\t\t\tdistortionValue = (this.value.toNumber() % 360) * Math.PI / 180;\r\n\t\t\t\tcosine = Math.cos(distortionValue);\r\n\t\t\t\tsine = Math.sin(distortionValue);\r\n\t\t\t\tif(Math.abs(cosine - sine) < Number.EPSILON * 2)\r\n\t\t\t\t\tsine = cosine;\r\n\t\t\t\telse\r\n\t\t\t\t\tif(Math.abs(cosine + sine) < Number.EPSILON * 2)\r\n\t\t\t\t\t\tcosine = sine;\r\n\t\t\t\tif(Math.abs(cosine) < Number.EPSILON)\r\n\t\t\t\t\tcosine = 0;\r\n\t\t\t\tif(Math.abs(sine) < Number.EPSILON)\r\n\t\t\t\t\tsine = 0;\r\n\t\t\t\r\n\t\t\t\tresult =\r\n\t\t\t\t{\r\n\t\t\t\t\tx: x0.add(x1.multiplyBy(cosine)).subtract(y1.multiplyBy(sine)),\r\n\t\t\t\t\ty: y0.add(y1.multiplyBy(cosine)).add(x1.multiplyBy(sine))\r\n\t\t\t\t};\r\n\t\t\t\tbreak;\r\n\t\t\tcase Distortion.OPERATION_SKEW_HORIZONTAL:\r\n\t\t\t\tresult =\r\n\t\t\t\t{\r\n\t\t\t\t\tx: x0.add(x1.subtract(x0).subtract(y1.multiplyBy(Math.tan((this.value.toNumber() % 360) * Math.PI / 180)))),\r\n\t\t\t\t\ty: y1\r\n\t\t\t\t};\r\n\t\t\t\tbreak;\r\n\t\t\tcase Distortion.OPERATION_SKEW_VERTICAL:\r\n\t\t\t\tresult =\r\n\t\t\t\t{\r\n\t\t\t\t\tx: x1,\r\n\t\t\t\t\ty: y0.add(y1.subtract(y0).subtract(x1.multiplyBy(Math.tan((distortionValue.toNumber() % 360) * Math.PI / 180))))\r\n\t\t\t\t};\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn(result);\r\n\t}\r\n\r\n\tstatic runStack(x0, y0, x1, y1, distortionStack)\r\n\t{\r\n\t\treturn(distortionStack.reduceRight((carry, item) => item.run(x0, y0, carry.x, carry.y), {x: x1, y: y1}));\r\n\t}\r\n\r\n\tstatic #fixPoint(point, relative, topX, topY, result)\r\n\t{\r\n\t\tif(topX.fixed)\r\n\t\t\tpoint.x = relative ? topX.value.subtract(result.x) : topX.value;\r\n\t\tif(topY.fixed)\r\n\t\t\tpoint.y = relative ? topY.value.subtract(result.y) : topY.value;\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\tstatic applyDistortion(context, top, result, distortionStack)\r\n\t{\r\n\t\tlet origin;\r\n\t\tlet point;\r\n\t\tlet command;\r\n\t\tlet relative;\r\n\t\tlet point1;\r\n\t\tlet point2;\r\n\t\tlet last;\r\n\t\tlet lastAngle;\r\n\r\n\t\tcommand = top[0].toLowerCase();\r\n\t\trelative = top[0].toLowerCase() === top[0];\r\n\t\torigin =\r\n\t\t{\r\n\t\t\tx: relative ? new BigDecimal(0) : result.x,\r\n\t\t\ty: relative ? new BigDecimal(0) : result.y\r\n\t\t}\r\n\t\tif(result.pending)\r\n\t\t\tthrow(new SyntaxError(`Too few arguments for command ${top[0]}`));\r\n\t\tif(result.fixNext)\r\n\t\t\tthrow(new SyntaxError(`Dangling fix operator after command ${top[0]}`));\r\n\t\t// TODO: Eventually, all values will need to be rounded just beyond this point\r\n\t\tswitch(command)\r\n\t\t{\r\n\t\t\tcase \"a\":\r\n\t\t\t\tpoint =\r\n\t\t\t\t{\r\n\t\t\t\t\tx: top[6].value,\r\n\t\t\t\t\ty: top[7].value\r\n\t\t\t\t};\r\n\t\t\t\tif(distortionStack.length)\r\n\t\t\t\t\tpoint = Distortion.runStack(origin.x, origin.y, point.x, point.y, distortionStack);\r\n\t\t\t\tDistortion.#fixPoint(point, relative, top[6], top[7], result);\r\n\t\t\t\ttop =\r\n\t\t\t\t[\r\n\t\t\t\t\ttop[0],\r\n\t\t\t\t\ttop[1].value,\r\n\t\t\t\t\ttop[2].value,\r\n\t\t\t\t\ttop[3].fixed ? top[3].value : distortionStack.reduceRight((carry, item) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn(item.type === Distortion.OPERATION_ROTATE ? carry.add(item.value) : carry);\r\n\t\t\t\t\t}, top[3].value),\r\n\t\t\t\t\ttop[4].value,\r\n\t\t\t\t\ttop[5].value,\r\n\t\t\t\t\tpoint.x,\r\n\t\t\t\t\tpoint.y\r\n\t\t\t\t];\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"c\":\r\n\t\t\t\tpoint1 =\r\n\t\t\t\t{\r\n\t\t\t\t\tx: top[1].value,\r\n\t\t\t\t\ty: top[2].value\r\n\t\t\t\t};\r\n\t\t\t\tpoint2 =\r\n\t\t\t\t{\r\n\t\t\t\t\tx: top[3].value,\r\n\t\t\t\t\ty: top[4].value\r\n\t\t\t\t};\r\n\t\t\t\tpoint =\r\n\t\t\t\t{\r\n\t\t\t\t\tx: top[5].value,\r\n\t\t\t\t\ty: top[6].value\r\n\t\t\t\t};\r\n\t\t\t\tif(distortionStack.length)\r\n\t\t\t\t{\r\n\t\t\t\t\tpoint1 = Distortion.runStack(origin.x, origin.y, point1.x, point1.y, distortionStack);\r\n\t\t\t\t\tpoint2 = Distortion.runStack(origin.x, origin.y, point2.x, point2.y, distortionStack);\r\n\t\t\t\t\tpoint = Distortion.runStack(origin.x, origin.y, point.x, point.y, distortionStack);\r\n\t\t\t\t}\r\n\t\t\t\tDistortion.#fixPoint(point, relative, top[5], top[6], result);\r\n\t\t\t\ttop =\r\n\t\t\t\t[\r\n\t\t\t\t\ttop[0],\r\n\t\t\t\t\ttop[1].fixed ? (relative ? top[1].value.subtract(result.x) : top[1].value) : point1.x,\r\n\t\t\t\t\ttop[2].fixed ? (relative ? top[2].value.subtract(result.y) : top[2].value) : point1.y,\r\n\t\t\t\t\ttop[3].fixed ? (relative ? top[3].value.subtract(result.x) : top[3].value) : point2.x,\r\n\t\t\t\t\ttop[4].fixed ? (relative ? top[4].value.subtract(result.y) : top[4].value) : point2.y,\r\n\t\t\t\t\tpoint.x,\r\n\t\t\t\t\tpoint.y\r\n\t\t\t\t];\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"s\":\r\n\t\t\tcase \"q\":\r\n\t\t\t\tpoint1 =\r\n\t\t\t\t{\r\n\t\t\t\t\tx: top[1].value,\r\n\t\t\t\t\ty: top[2].value\r\n\t\t\t\t};\r\n\t\t\t\tpoint =\r\n\t\t\t\t{\r\n\t\t\t\t\tx: top[3].value,\r\n\t\t\t\t\ty: top[4].value\r\n\t\t\t\t};\r\n\t\t\t\tif(distortionStack.length)\r\n\t\t\t\t{\r\n\t\t\t\t\tpoint1 = Distortion.runStack(origin.x, origin.y, point1.x, point1.y, distortionStack);\r\n\t\t\t\t\tpoint = Distortion.runStack(origin.x, origin.y, point.x, point.y, distortionStack);\r\n\t\t\t\t}\r\n\t\t\t\tDistortion.#fixPoint(point, relative, top[3], top[4], result);\r\n\t\t\t\ttop =\r\n\t\t\t\t[\r\n\t\t\t\t\ttop[0],\r\n\t\t\t\t\tpoint1.x,\r\n\t\t\t\t\tpoint1.y,\r\n\t\t\t\t\tpoint.x,\r\n\t\t\t\t\tpoint.y\r\n\t\t\t\t];\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"l\":\r\n\t\t\tcase \"h\":\r\n\t\t\tcase \"v\":\r\n\t\t\t\tlet topX = command === \"v\" ? {value: new BigDecimal(origin.x), fixed: top[1].fixed} : top[1];\r\n\t\t\t\tlet topY = command === \"h\" ? {value: new BigDecimal(origin.y), fixed: top[1].fixed} : (command === \"v\" ? top[1] : top[2]);\r\n\t\t\t\tpoint =\r\n\t\t\t\t{\r\n\t\t\t\t\tx: topX.value,\r\n\t\t\t\t\ty: topY.value\r\n\t\t\t\t};\r\n\t\t\t\tif(distortionStack.length)\r\n\t\t\t\t\tpoint = Distortion.runStack(origin.x, origin.y, point.x, point.y, distortionStack);\r\n\t\t\t\tlastAngle = Math.atan2(point.y.subtract(origin.y).toNumber(), point.x.subtract(origin.x).toNumber()) * 180 / Math.PI;\r\n\t\t\t\tDistortion.#fixPoint(point, relative, topX, topY, result);\r\n\t\t\t\ttop = point.x.equals(origin.x)\r\n\t\t\t\t\t?\r\n\t\t\t\t\t(\r\n\t\t\t\t\t\tpoint.y.equals(origin.y)\r\n\t\t\t\t\t\t?\r\n\t\t\t\t\t\t\tnull\r\n\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t[\"v\", point.y]\r\n\t\t\t\t\t)\r\n\t\t\t\t\t:\r\n\t\t\t\t\t(\r\n\t\t\t\t\t\tpoint.y.equals(origin.y)\r\n\t\t\t\t\t\t?\r\n\t\t\t\t\t\t\t[\"h\", point.x]\r\n\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t[\"l\", point.x, point.y]\r\n\t\t\t\t\t);\r\n\t\t\t\tif(top)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(context.optimisation.path.combineCommands && result.sequence.length > 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlast = result.sequence[result.sequence.length - 1];\r\n\t\t\t\t\t\tif(last[0].toLowerCase() === top[0].toLowerCase() && lastAngle === result.lastAngle)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(relative)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(last.length > 2)\r\n\t\t\t\t\t\t\t\t\tlast[2] = last[2].add(top[2]);\r\n\t\t\t\t\t\t\t\tlast[1] = last[1].add(top[1]);\r\n\t\t\t\t\t\t\t\ttop = null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tresult.sequnce.pop();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tresult.lastAngle = lastAngle;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"m\":\r\n\t\t\tcase \"t\":\r\n\t\t\t\tpoint =\r\n\t\t\t\t{\r\n\t\t\t\t\tx: top[1].value,\r\n\t\t\t\t\ty: top[2].value\r\n\t\t\t\t}\r\n\t\t\t\tif(distortionStack.length)\r\n\t\t\t\t\tpoint = Distortion.runStack(origin.x, origin.y, point.x, point.y, distortionStack);\r\n\t\t\t\tDistortion.#fixPoint(point, relative, top[1], top[2], result);\r\n\t\t\t\ttop = [top[0], point.x, point.y];\r\n\t\t\t\tif(context.optimisation.path.combineCommands && command === \"m\" && result.sequence.length > 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tlast = result.sequence[result.sequence.length - 1];\r\n\t\t\t\t\tif(last[0].toLowerCase() === \"m\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(relative)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlast[1] = last[1].add(top[1]);\r\n\t\t\t\t\t\t\tlast[2] = last[2].add(top[2]);\r\n\t\t\t\t\t\t\ttop = null;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tresult.sequnce.pop();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"z\":\r\n\t\t\t\ttop = [\"z\"];\r\n\t\t\t\tresult.x = new BigDecimal(result.originX);\r\n\t\t\t\tresult.y = new BigDecimal(result.originY);\r\n\t\t\t\tresult.lastAngle = null;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tif(command !== \"z\")\r\n\t\t{\r\n\t\t\tresult.x = relative ? result.x.add(point.x) : point.x;\r\n\t\t\tresult.y = relative ? result.y.add(point.y) : point.y;\r\n\t\t}\r\n\t\tif(command === \"m\")\r\n\t\t{\r\n\t\t\tresult.originX = new BigDecimal(result.x);\r\n\t\t\tresult.originY = new BigDecimal(result.y);\r\n\t\t}\r\n\t\tif(top)\r\n\t\t{\r\n\t\t\tif(!relative)\r\n\t\t\t\ttop[0] = top[0].toUpperCase();\r\n\t\t\t/* TODO: Primitive optimiser someday? */\r\n\t\t\tresult.sequence.push(top);\r\n\t\t}\r\n\r\n\t\treturn;\r\n\t}\r\n}\r\n","import ExpressionParser from \"./ExpressionParser\";\nimport Token from \"./Token\";\nimport TokenStream from \"./TokenStream\";\nimport BigDecimal from \"./BigDecimal\";\nimport Value from \"./Value\";\nimport Distortion from \"./Distortion\";\n\nexport default class PathParser\n{\n\tconstructor(stream)\n\t{\n\t\tthis.stream = stream;\n\n\t\treturn;\n\t}\n\n\tstatic resultToString(result, precision = BigDecimal.LIMIT_PRECISION)\n\t{\n\t\treturn(result.sequence.map(i => \"\" + i[0].toString() + (i.length > 1 ? \" \" + i.slice(1).join(\",\") : \"\")).join(\" \"));\n\t}\n\n\tstatic parseValueAttribute(context, text)\n\t{\n\t\tlet parser = new PathParser(new TokenStream(text));\n\t\tlet pathResult = parser.parseList(context);\n\n\t\treturn(PathParser.resultToString(pathResult, context.optimisation.path.precision));\n\t}\n\n\tparseList(context, result = Value.getEmptyResult(), limit = -1)\n\t{\n\t\tlet state;\n\t\tlet top;\n\n\t\tstate =\n\t\t{\n\t\t\tcurrent: this.stream.getCurrent(),\n\t\t\treading: true,\n\t\t\tindex: 0\n\t\t};\n\t\ttop = [];\n\n\t\twhile(state.reading && state.current && (state.index < limit || limit === -1))\n\t\t{\n\t\t\tswitch(state.current.type)\n\t\t\t{\n\t\t\t\tcase Token.TYPE_WHITESPACE:\n\t\t\t\tcase Token.TYPE_DELIMITER:\n\t\t\t\t\tbreak;\n\t\t\t\tcase Token.TYPE_END:\n\t\t\t\t\tstate.reading = false;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet expResult = new ExpressionParser(this.stream).parse(context, 0, [], false, {x: result.x, y: result.y}, Value.TYPE_UNIT);\n\t\t\t\t\tresult.sequence.push([expResult.accumulator]);\n\t\t\t\t\tresult.index++;\n\t\t\t\t\tstate.current = this.stream.getCurrent();\n\t\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tstate.current = this.stream.getNext();\n\t\t}\n\n\t\treturn(result);\n\t}\n\n\tparse(context, result = Value.getEmptyResult(), distortionStack = [], index = 1, argumentList)\n\t{\n\t\tlet state;\n\t\tlet top;\n\t\tlet invoked;\n\t\tlet next;\n\n\t\tstate =\n\t\t{\n\t\t\tcurrent: this.stream.getCurrent(),\n\t\t\treading: true\n\t\t};\n\n\t\twhile(state.reading && state.current)\n\t\t{\n\t\t\tswitch(state.current.type)\n\t\t\t{\n\t\t\t\tcase Token.TYPE_COMMAND:\n\t\t\t\t\tif(result.arity === null && state.current.name.toLowerCase() !== \"m\")\n\t\t\t\t\t\tthrow(new SyntaxError(\"Paths must begin with a Move To command\"));\n\t\t\t\t\tif(top)\n\t\t\t\t\t\tDistortion.applyDistortion(context, top, result, distortionStack);\n\t\t\t\t\tresult.arity = state.current.value;\n\t\t\t\t\tresult.pending = result.arity.length;\n\t\t\t\t\ttop = [state.current.name];\n\t\t\t\t\tbreak;\n\t\t\t\tcase Token.TYPE_OPERATOR_FIX:\n\t\t\t\t\tresult.fixNext = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase Token.TYPE_WHITESPACE:\n\t\t\t\tcase Token.TYPE_DELIMITER:\n\t\t\t\t\tbreak;\n\t\t\t\tcase Token.TYPE_END:\n\t\t\t\t\tif(top)\n\t\t\t\t\t\tDistortion.applyDistortion(context, top, result, distortionStack);\n\t\t\t\t\tstate.reading = false;\n\t\t\t\t\tbreak;\n\t\t\t\tcase Token.TYPE_IDENTIFIER:\n\t\t\t\tcase Token.TYPE_NUMBER:\n\t\t\t\t\tif(state.current.type === Token.TYPE_NUMBER)\n\t\t\t\t\t{\n\t\t\t\t\t\tnext = this.stream.peekNext();\n\t\t\t\t\t\tinvoked = next.type === Token.TYPE_IDENTIFIER && context.segment[next.name];\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tinvoked = context.segment[state.current.name];\n\t\t\t\t\tif(invoked)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(top)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tDistortion.applyDistortion(context, top, result, distortionStack);\n\t\t\t\t\t\t\ttop = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnew ExpressionParser(this.stream).parseInvocation(context, result, argumentList, distortionStack.concat());\n\t\t\t\t\t\tstate.current = this.stream.getCurrent();\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tif(!top)\n\t\t\t\t\t\tthrow(new Error(`Expected command, but found \"${state.current.name}\"`));\n\t\t\t\t\tif(!result.pending)\n\t\t\t\t\t{\n\t\t\t\t\t\tDistortion.applyDistortion(context, top, result, distortionStack);\n\t\t\t\t\t\tresult.pending = result.arity.length;\n\t\t\t\t\t\ttop = [top[0]];\n\t\t\t\t\t}\n\t\t\t\t\tif(!result.pending)\n\t\t\t\t\t\tthrow(new SyntaxError(`Too many parameters supplied to command \"${top[0]}\"`));\n\t\t\t\t\tif(top[0].toLowerCase() === \"a\" && (result.pending === 4 || result.pending === 3) && state.current.type === Token.TYPE_NUMBER && state.current.name.length > 1 && [\"0\", \"1\"].indexOf(state.current.name.substr(0, 1)) !== -1)\n\t\t\t\t\t{\n\t\t\t\t\t\ttop.push({fixed: result.fixNext, value: new BigDecimal(state.current.name.substr(0, 1))});\n\t\t\t\t\t\tstate.current.name = state.current.name.substr(1);\n\t\t\t\t\t\tstate.current.value = new BigDecimal(state.current.name);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif(state.current.type === Token.TYPE_NUMBER)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnext = this.stream.peekNext();\n\t\t\t\t\t\t\tinvoked = next.type === Token.TYPE_IDENTIFIER && context.segment[next.name];\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tinvoked = context.segment[state.current.name];\n\t\t\t\t\t\tif(!invoked)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlet expResult = new ExpressionParser(this.stream).parse(context, 0, argumentList, false, {x: result.x, y: result.y}, result.arity[result.arity.length - result.pending]);\n\t\t\t\t\t\t\ttop.push({fixed: result.fixNext, value: expResult.accumulator});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tresult.fixNext = false;\n\t\t\t\t\tresult.pending--;\n\t\t\t\t\tstate.current = this.stream.getCurrent();\n\t\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tstate.current = this.stream.getNext();\n\t\t}\n\n\t\treturn(result);\n\t}\n}\n","import TokenStream from \"./TokenStream\";\nimport Token from \"./Token\";\nimport BigDecimal from \"./BigDecimal\";\nimport Value from \"./Value\";\nimport PathParser from \"./PathParser\";\nimport Distortion from \"./Distortion\";\n\nexport default class ExpressionParser\n{\n    static #OPERATION_EVALUATE  = 1;\n    static #OPERATION_ADD       = 2;\n    static #OPERATION_SUBTRACT  = 3;\n    static #OPERATION_MULTIPLY  = 4;\n    static #OPERATION_DIVIDE    = 5;\n\n    constructor(stream)\n    {\n        this.stream = stream;\n\t\tthis.debug = false;\n    }\n\n    static #formatOperation(operation)\n    {\n\t\treturn(operation.value.toString() + \" \" + [\"\", \"=\", \"+\", \"-\", \"*\", \"/\"][operation.operation]);\n\t}\n\n    #unwind(result, limit)\n    {\n\t\tvar start;\n\t\tvar index;\n\t\tvar leftValue;\n\t\tvar leftOperation;\n\n\t\tstart = result.stack.length - 1;\n\t\twhile(start > -1 && result.stack[start].operation > limit)\n\t\t\tstart--;\n\t\tindex = start + 1;\n\t\tif(index < result.stack.length)\n\t\t{\n\t\t\tresult.stack.push({operation: ExpressionParser.#OPERATION_EVALUATE, value: result.accumulator});\n\t\t\tif(this.debug)\n\t\t\t\tconsole.log(\"<<\\n\" + result.stack.slice(index).map((i, j) => j + \": \" + ExpressionParser.#formatOperation(i)).join(\"\\n\"));\n\t\t\tleftValue = result.stack[index].value;\n\t\t\tfor(; index < result.stack.length - 1; index++)\n\t\t\t{\n\t\t\t\tleftOperation = result.stack[index].operation;\n\t\t\t\tswitch(leftOperation)\n\t\t\t\t{\n\t\t\t\t\tcase ExpressionParser.#OPERATION_MULTIPLY:\n\t\t\t\t\t\tleftValue = leftValue.multiplyBy(result.stack[index + 1].value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ExpressionParser.#OPERATION_DIVIDE:\n\t\t\t\t\t\tleftValue = leftValue.divideBy(result.stack[index + 1].value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ExpressionParser.#OPERATION_ADD:\n\t\t\t\t\t\tleftValue = leftValue.add(result.stack[index + 1].value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ExpressionParser.#OPERATION_SUBTRACT:\n\t\t\t\t\t\tleftValue = leftValue.subtract(result.stack[index + 1].value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult.accumulator = leftValue;\n\t\t\tresult.stack = result.stack.slice(0, start + 1);\n\t\t}\n\n\t\treturn;\n\t}\n\n    parse(context, depth = 0, argumentList = {}, insideArgumentList = false, position, type, additionalTerminatorList = [])\n    {\n\t\tvar result;\n\t\tvar state;\n\n\t\tresult =\n\t\t{\n\t\t\taccumulator: new BigDecimal(0),\n\t\t\tbase: 0,\n\t\t\tcounter: depth,\n\t\t\tdata: 0,\n\t\t\tstack: []\n\t\t};\n\t\tstate =\n\t\t{\n\t\t\tcurrent: this.stream.getCurrent(),\n\t\t\treading: true\n\t\t};\n\n\t\twhile(state.reading && state.current)\n\t\t{\n\t\t\tswitch(state.current.type)\n\t\t\t{\n\t\t\t\tcase Token.TYPE_NUMBER:\n\t\t\t\t\tif(result.data === Token.TYPE_WHITESPACE)\n\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected space-delimited value \"${state.current.name}\" at column ${state.current.position}`));\n\t\t\t\t\tif(result.data === Token.TYPE_NUMBER)\n\t\t\t\t\t\tif(result.counter)\n\t\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected token \"${state.current.name}\" at column ${state.current.position}`));\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstate.reading = false;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\tif(this.debug)\n\t\t\t\t\t\tconsole.log(\"Number\", state.current);\n\t\t\t\t\tresult.accumulator = state.current.value;\n\t\t\t\t\tresult.data = Token.TYPE_NUMBER;\n\t\t\t\t\tbreak;\n\t\t\t\tcase Token.TYPE_OPERATOR_DIVIDE:\n\t\t\t\t\tif(result.data !== Token.TYPE_NUMBER && result.data !== Token.TYPE_WHITESPACE)\n\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected token \"${state.current.name}\" at column ${state.current.position}`));\n\t\t\t\t\tif(this.debug)\n\t\t\t\t\t\tconsole.log(\"/\", state.current);\n\t\t\t\t\tresult.stack.push({operation: ExpressionParser.#OPERATION_DIVIDE, value: result.accumulator});\n\t\t\t\t\tresult.data = Token.TYPE_OPERATOR_DIVIDE;\n\t\t\t\t\tbreak;\n\t\t\t\tcase Token.TYPE_OPERATOR_MULTIPLY:\n\t\t\t\t\tif(result.data !== Token.TYPE_NUMBER && result.data !== Token.TYPE_WHITESPACE)\n\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected token \"${state.current.name}\" at column ${state.current.position}`));\n\t\t\t\t\tif(this.debug)\n\t\t\t\t\t\tconsole.log(\"*\", state.current);\n\t\t\t\t\tresult.stack.push({operation: ExpressionParser.#OPERATION_MULTIPLY, value: result.accumulator});\n\t\t\t\t\tresult.data = Token.TYPE_OPERATOR_MULTIPLY;\n\t\t\t\t\tbreak;\n\t\t\t\tcase Token.TYPE_OPERATOR_SUBTRACT:\n\t\t\t\t\tif(result.data === Token.TYPE_NUMBER && result.counter === 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tstate.reading = false;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif(result.data !== Token.TYPE_NUMBER && result.data !== 0 && result.data !== Token.TYPE_BRACKET && result.data !== Token.TYPE_WHITESPACE)\n\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected token \"${state.current.name}\" at column ${state.current.position}`));\n\t\t\t\t\tif(this.debug)\n\t\t\t\t\t\tconsole.log(\"-\", state.current);\n\t\t\t\t\tthis.#unwind(result, ExpressionParser.#OPERATION_SUBTRACT);\n\t\t\t\t\tresult.stack.push({operation: ExpressionParser.#OPERATION_SUBTRACT, value: result.accumulator});\n\t\t\t\t\tresult.data = Token.TYPE_OPERATOR_SUBTRACT;\n\t\t\t\t\tbreak;\n\t\t\t\tcase Token.TYPE_OPERATOR_ADD:\n\t\t\t\t\tif(result.data !== Token.TYPE_NUMBER && result.data !== Token.TYPE_WHITESPACE)\n\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected token \"${state.current.name}\" at column ${state.current.position}`));\n\t\t\t\t\tif(this.debug)\n\t\t\t\t\t\tconsole.log(\"+\", state.current);\n\t\t\t\t\tthis.#unwind(result, ExpressionParser.#OPERATION_SUBTRACT);\n\t\t\t\t\tresult.stack.push({operation: ExpressionParser.#OPERATION_ADD, value: result.accumulator});\n\t\t\t\t\tresult.data = Token.TYPE_OPERATOR_ADD;\n\t\t\t\t\tbreak;\n\t\t\t\tcase Token.TYPE_OPERATOR_MEASURE:\n\t\t\t\t\tif(result.data === Token.TYPE_WHITESPACE)\n\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected space before measure operator (\"${state.current.name}\") at column ${state.current.position}`));\n\t\t\t\t\tif(result.data === Token.TYPE_NUMBER)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(this.debug)\n\t\t\t\t\t\t\tconsole.log(\"*\", state.current);\n\t\t\t\t\t\tresult.stack.push({operation: ExpressionParser.#OPERATION_MULTIPLY, value: result.accumulator});\n\t\t\t\t\t}\n\t\t\t\t\tif(type === Value.TYPE_UNIT)\n\t\t\t\t\t\tthrow(new SyntaxError(`The unit type is incompatible with the return value of a segment measurement`));\n\t\t\t\t\tif(type === Value.TYPE_FLAG)\n\t\t\t\t\t\tthrow(new SyntaxError(`The flag type is incompatible with the return value of a segment measurement`));\n\t\t\t\t\tthis.stream.getNext();\n\t\t\t\t\tif(this.stream.getCurrent().type === Token.TYPE_WHITESPACE)\n\t\t\t\t\t\tthis.stream.getNext();\n\t\t\t\t\tif(this.stream.getCurrent().type !== Token.TYPE_IDENTIFIER)\n\t\t\t\t\t\tthrow(new SyntaxError(`Expected identifier at ${this.stream.getCurrent().position}, found \"${this.stream.getCurrent().name}\"`))\n\t\t\t\t\tlet expResult = Value.getEmptyResult();\n\t\t\t\t\texpResult.x = position.x;\n\t\t\t\t\texpResult.y = position.y;\n\t\t\t\t\texpResult.arity = [];\n\t\t\t\t\tnew ExpressionParser(this.stream).parseInvocation(context, expResult, argumentList, []);\n\t\t\t\t\tresult.data = Token.TYPE_NUMBER;\n\t\t\t\t\tswitch(type)\n\t\t\t\t\t{\n\t\t\t\t\t\tcase Value.TYPE_X:\n\t\t\t\t\t\t\tresult.accumulator = expResult.x.subtract(position.x);\n\t\t\t\t\t\t\tconsole.log(\"RETURNING X\", result.accumulator.toString());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase Value.TYPE_Y:\n\t\t\t\t\t\t\tresult.accumulator = expResult.y.subtract(position.y);\n\t\t\t\t\t\t\tconsole.log(\"RETURNING Y\", result.accumulator.toString());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase Value.TYPE_THETA:\n\t\t\t\t\t\t\tresult.accumulator = (new BigDecimal(Math.atan2(expResult.x.subtract(position.x).toNumber(), expResult.y.subtract(position.y).toNumber()))).multiplyBy(180).divideBy(BigDecimal.PI);\n\t\t\t\t\t\t\tconsole.log(\"RETURNING THETA\", result.accumulator.toString());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif(this.stream.getCurrent().type === Token.TYPE_WHITESPACE)\n\t\t\t\t\t\tthis.stream.getNext();\n\t\t\t\t\tstate.current = this.stream.getCurrent();\n\t\t\t\t\tif(state.current.type !== Token.TYPE_OPERATOR_MEASURE)\n\t\t\t\t\t\tthrow(new SyntaxError(`Expected measurement operator, found \"${state.current.name}`));\n\t\t\t\t\tbreak;\n\t\t\t\tcase Token.TYPE_BRACKET:\n\t\t\t\t\tif(this.debug)\n\t\t\t\t\t\tconsole.log(state.current.value ? \"(\" : \")\", state.current, result.counter, context.depth);\n\t\t\t\t\tif(state.current.value)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(result.data === Token.TYPE_WHITESPACE)\n\t\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected token \"${state.current.name}\" at column ${state.current.position}`));\n\t\t\t\t\t\tresult.counter++;\n\t\t\t\t\t\tif(result.data === Token.TYPE_NUMBER)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(this.debug)\n\t\t\t\t\t\t\t\tconsole.log(\"*\", state.current);\n\t\t\t\t\t\t\tresult.stack.push({operation: ExpressionParser.#OPERATION_MULTIPLY, value: result.accumulator});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresult.accumulator = new BigDecimal(0);\n\t\t\t\t\t\tresult.stack.push({operation: ExpressionParser.#OPERATION_EVALUATE});\n\t\t\t\t\t\tresult.data = Token.TYPE_BRACKET;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif(!insideArgumentList && result.counter === context.depth)\n\t\t\t\t\t\t\tthrow(new SyntaxError(`Mismatched bracket at column ${state.current.position}`));\n\t\t\t\t\t\tif(result.data !== Token.TYPE_NUMBER)\n\t\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected bracket at column ${state.current.position}`));\n\t\t\t\t\t\tthis.#unwind(result, ExpressionParser.#OPERATION_SUBTRACT);\n\t\t\t\t\t\tthis.#unwind(result, ExpressionParser.#OPERATION_EVALUATE);\n\t\t\t\t\t\tresult.stack.pop();\n\t\t\t\t\t\tresult.data = Token.TYPE_NUMBER;\n\t\t\t\t\t\tif(insideArgumentList)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstate.reading = false;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tresult.counter--;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase Token.TYPE_IDENTIFIER:\n\t\t\t\t\tif(result.data === Token.TYPE_WHITESPACE)\n\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected space-delimited value \"${state.current.name}\" at column ${state.current.position}`));\n\t\t\t\t\tif(state.current.name in argumentList || state.current.name in context.unit)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(result.data === Token.TYPE_NUMBER)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(this.debug)\n\t\t\t\t\t\t\t\tconsole.log(\"*\", state.current);\n\t\t\t\t\t\t\tresult.stack.push({operation: ExpressionParser.#OPERATION_MULTIPLY, value: result.accumulator});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(this.debug)\n\t\t\t\t\t\t\tconsole.log(\"Unit\", state.current);\n\t\t\t\t\t\tresult.accumulator = argumentList[state.current.name] ?? context.unit[state.current.name];\n\t\t\t\t\t\tresult.data = Token.TYPE_NUMBER;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tthrow(new ReferenceError(`Reference to undefined unit \"${state.current.name}\" at column ${state.current.position}.`));\n\t\t\t\t\tbreak;\n\t\t\t\tcase Token.TYPE_DELIMITER:\n\t\t\t\t\tif(result.counter)\n\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected delimiter \"${state.current.name}\" in expression at column ${state.current.position}.`));\n\t\t\t\tcase Token.TYPE_WHITESPACE:\n\t\t\t\t\tif(result.counter || result.data === 0) // TODO\n\t\t\t\t\t{\n\t\t\t\t\t\tif(result.data === Token.TYPE_NUMBER)\n\t\t\t\t\t\t\tresult.data = Token.TYPE_WHITESPACE;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase Token.TYPE_END:\n\t\t\t\t\tif(result.counter > context.depth)\n\t\t\t\t\t\tthrow(new SyntaxError(`Missing closing bracket(s) at end of segment (nesting depth = ${result.counter - context.depth})`));\n\t\t\t\t\tstate.reading = false;\n\t\t\t\t\tcontinue;\n\t\t\t\tdefault:\n\t\t\t\t\tif(additionalTerminatorList.includes(state.current.type))\n\t\t\t\t\t{\n\t\t\t\t\t\tstate.reading = false;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tthrow(new SyntaxError(`Unexpected token \"${state.current.name}\" at column ${state.current.position}`));\n\t\t\t}\n\t\t\tstate.current = this.stream.getNext();\n\t\t}\n\t\tthis.#unwind(result, ExpressionParser.#OPERATION_SUBTRACT);\n\t\tthis.#unwind(result, 0);\n\n\t\treturn(result);\n\t}\n\n\tparseInvocation(context, result, argumentList, distortionStack)\n\t{\n\t\tlet state;\n\t\tlet segment;\n\t\tlet inner;\n\t\tlet name;\n\t\tlet index;\n\t\tlet expResult;\n\t\tlet type;\n\t\n\t\tstate =\n\t\t{\n\t\t\tcurrent: this.stream.getCurrent(),\n\t\t\treading: true,\n\t\t\thasCount: false,\n\t\t\thasArgumentList: false,\n\t\t\tdistortionStack: distortionStack,\n\t\t\tcount: false,\n\t\t\targumentList: {},\n\t\t\tdelimited: false\n\t\t};\n\t\n\t\tif(state.current.type === Token.TYPE_NUMBER)\n\t\t{\n\t\t\tstate.count = state.current.value.toNumber();\n\t\t\tstate.hasCount = true;\n\t\t\tstate.current = this.stream.getNext();\n\t\t}\n\t\telse\n\t\t\tstate.count = 1;\n\t\tname = state.current.name;\n\t\tif(result.stack.indexOf(name) === -1)\n\t\t{\n\t\t\tif(!(name in context.segment))\n\t\t\t\tthrow(new ReferenceError(`Reference to undefined section \"${name}\" at ${state.current.position}`));\n\t\t\tsegment = context.segment[name];\n\t\t\tstate.current = this.stream.getNext();\n\t\t\twhile(state.reading === true && state.current)\n\t\t\t{\n\t\t\t\tswitch(state.current.type)\n\t\t\t\t{\n\t\t\t\t\tcase Token.TYPE_OPERATOR_ROTATE:\n\t\t\t\t\tcase Token.TYPE_OPERATOR_SKEW_HORIZONTAL:\n\t\t\t\t\tcase Token.TYPE_OPERATOR_SKEW_VERTICAL:\n\t\t\t\t\t\tthis.stream.getNext();\n\t\t\t\t\t\texpResult = new ExpressionParser(this.stream).parse(context, 0, argumentList, false, {x: result.x, y: result.y}, Value.TYPE_THETA, [Token.TYPE_OPERATOR_ROTATE, Token.TYPE_OPERATOR_SKEW_HORIZONTAL, Token.TYPE_OPERATOR_SKEW_VERTICAL]);\n\t\t\t\t\t\tstate.distortionStack.push(new Distortion(\n\t\t\t\t\t\t({\n\t\t\t\t\t\t\t[Token.TYPE_OPERATOR_ROTATE]: Distortion.OPERATION_ROTATE,\n\t\t\t\t\t\t\t[Token.TYPE_OPERATOR_SKEW_HORIZONTAL]: Distortion.OPERATION_SKEW_HORIZONTAL,\n\t\t\t\t\t\t\t[Token.TYPE_OPERATOR_SKEW_VERTICAL]: Distortion.OPERATION_SKEW_VERTICAL\n\t\t\t\t\t\t})[state.current.type], expResult.accumulator));\n\t\t\t\t\t\tstate.current = this.stream.getCurrent();\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tcase Token.TYPE_BRACKET:\n\t\t\t\t\t\tif(!state.hasArgumentList)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(state.current.value)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.current = this.stream.getNext();\n\t\t\t\t\t\t\t\twhile(!state.hasArgumentList)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tswitch(state.current.type)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_BRACKET:\n\t\t\t\t\t\t\t\t\t\t\tif(state.current.value)\n\t\t\t\t\t\t\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected token \"${state.current.name}\" at column ${state.current.position}`));\n\t\t\t\t\t\t\t\t\t\t\tstate.hasArgumentList = true;\n\t\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_IDENTIFIER:\n\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_OPERATOR_ROTATE:\n\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_OPERATOR_REPEAT:\n\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_OPERATOR_SKEW_HORIZONTAL:\n\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_OPERATOR_SKEW_VERTICAL:\n\t\t\t\t\t\t\t\t\t\t\tstate.delimited = false;\n\t\t\t\t\t\t\t\t\t\t\tname = state.current.name;\n\t\t\t\t\t\t\t\t\t\t\ttype = state.current.type;\n\t\t\t\t\t\t\t\t\t\t\tswitch(type)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_IDENTIFIER:\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(context.segment[name])\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthrow(new ReferenceError(`Argument \"${name}\" is already defined as a segment`));\n\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_OPERATOR_REPEAT:\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(state.hasCount)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthrow(new ReferenceError(`Execution count is already defined for this invocation`));\n\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tif(this.stream.peekNext().type === Token.TYPE_WHITESPACE)\n\t\t\t\t\t\t\t\t\t\t\t\tstate.current = this.stream.getNext();\n\t\t\t\t\t\t\t\t\t\t\tstate.current = this.stream.getNext();\n\t\t\t\t\t\t\t\t\t\t\tif(state.current.type === Token.TYPE_END)\n\t\t\t\t\t\t\t\t\t\t\t\tthrow(new Error(`Unexpected end of segment at ${state.current.position}`));\n\t\t\t\t\t\t\t\t\t\t\tif(state.current.type !== Token.TYPE_OPERATOR_ASSIGN)\n\t\t\t\t\t\t\t\t\t\t\t\tthrow(new SyntaxError(`Expected assignment operator after argument name, but found \"${state.current.name}\"`));\n\t\t\t\t\t\t\t\t\t\t\tstate.current = this.stream.getNext();\n\t\t\t\t\t\t\t\t\t\t\texpResult = new ExpressionParser(this.stream).parse(context, 0, argumentList, true, {x: result.x, y: result.y},\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t[Token.TYPE_IDENTIFIER]: Value.TYPE_UNIT,\n\t\t\t\t\t\t\t\t\t\t\t\t[Token.TYPE_OPERATOR_ROTATE]: Value.TYPE_THETA,\n\t\t\t\t\t\t\t\t\t\t\t\t[Token.TYPE_OPERATOR_SKEW_HORIZONTAL]: Value.TYPE_THETA,\n\t\t\t\t\t\t\t\t\t\t\t\t[Token.TYPE_OPERATOR_SKEW_VERTICAL]: Value.TYPE_THETA,\n\t\t\t\t\t\t\t\t\t\t\t\t[Token.TYPE_OPERATOR_REPEAT]: Value.TYPE_UNIT,\n\t\t\t\t\t\t\t\t\t\t\t}[type]);\n\t\t\t\t\t\t\t\t\t\t\tswitch(type)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_IDENTIFIER:\n\t\t\t\t\t\t\t\t\t\t\t\t\tstate.argumentList[name] = expResult.accumulator;\n\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_OPERATOR_ROTATE:\n\t\t\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_OPERATOR_SKEW_HORIZONTAL:\n\t\t\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_OPERATOR_SKEW_VERTICAL:\n\t\t\t\t\t\t\t\t\t\t\t\t\tstate.distortionStack.push(new Distortion(\n\t\t\t\t\t\t\t\t\t\t\t\t\t({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[Token.TYPE_OPERATOR_ROTATE]: Distortion.OPERATION_ROTATE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[Token.TYPE_OPERATOR_SKEW_HORIZONTAL]: Distortion.OPERATION_SKEW_HORIZONTAL,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[Token.TYPE_OPERATOR_SKEW_VERTICAL]: Distortion.OPERATION_SKEW_VERTICAL\n\t\t\t\t\t\t\t\t\t\t\t\t\t})[type], expResult.accumulator));\n\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_OPERATOR_REPEAT:\n\t\t\t\t\t\t\t\t\t\t\t\t\tstate.count = expResult.accumulator.toNumber();\n\t\t\t\t\t\t\t\t\t\t\t\t\tstate.hasCount = true;\n\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tstate.current = this.stream.getCurrent();\n\t\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_DELIMITER:\n\t\t\t\t\t\t\t\t\t\t\tif(state.delimited)\n\t\t\t\t\t\t\t\t\t\t\t\tthrow(new Error(`Unexpected delimiter at column ${state.current.position}`));\n\t\t\t\t\t\t\t\t\t\t\tstate.delimited = true;\n\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_WHITESPACE:\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_END:\n\t\t\t\t\t\t\t\t\t\t\tthrow(new Error(`Unexpected end of segment at ${state.current.position}`));\n\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected token \"${state.current.name}\" at column ${state.current.position}`));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tstate.current = this.stream.getNext();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected token \"${state.current.name}\" at column ${state.current.position}`));\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstate.reading = false;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase Token.TYPE_WHITESPACE:\n\t\t\t\t\t\tif([Token.TYPE_OPERATOR_ROTATE, Token.TYPE_OPERATOR_SKEW_HORIZONTAL, Token.TYPE_OPERATOR_SKEW_VERTICAL].includes(this.stream.peekNext().type))\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tstate.reading = false;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tstate.current = this.stream.getNext();\n\t\t\t}\n\t\t\tif(state.count !== parseInt(state.count))\n\t\t\t\tthrow(new Error(`The execution count (${state.count}) for segment \"${name}\" must be an integer.`));\n\t\t\tif(state.count < 1)\n\t\t\t\tthrow(new Error(`The execution count (${state.count}) for segment \"${name}\" can't be less than 1.`));\n\t\t\tfor(index = 1; index <= state.count; index++)\n\t\t\t{\n\t\t\t\tinner = new PathParser(new TokenStream(segment));\n\t\t\t\tinner.parse(context, result, state.distortionStack.concat(), index, state.argumentList);\n\t\t\t\tresult.stack.pop();\n\t\t\t}\n\t\t\tstate.reading = false;\n\t\t}\n\t\telse\n\t\t\tthrow(new ReferenceError(`Segment ${state.current.name} cannot call itself`));\n\t\n\t\treturn;\n\t}\n}\n","import ExpressionParser from \"./ExpressionParser\";\nimport TokenStream from \"./TokenStream\";\nimport PathParser from \"./PathParser\";\nimport BigDecimal from \"./BigDecimal\";\nimport Value from \"./Value\";\n\nexport default class Transformer\n{\n\tconstructor(text)\n\t{\n\t\tthis.document = Transformer.#parseXML(text);\n\t}\n\n\tstatic #parseXML(text)\n\t{\n\t\treturn((new (typeof(DOMParser) === \"undefined\" ? require('xmldom').DOMParser : DOMParser)()).parseFromString(text, \"text/xml\"));\n\t}\n\n\tstatic #parseUnitList(context, list)\n\t{\n\t\tlet stack = [];\n\t\tlet item;\n\n\t\twhile(stack.length || list.length)\n\t\t{\n\t\t\tif(stack.length)\n\t\t\t\titem = stack.pop();\n\t\t\telse\n\t\t\t{\n\t\t\t\titem = list.shift();\n\t\t\t\tif(!item.previousSibling.tagName && item.previousSibling.nodeValue.trim() === \"\")\n\t\t\t\t\titem.parentNode.removeChild(item.previousSibling);\n\t\t\t\titem.parentNode.removeChild(item);\n\t\t\t}\n\t\t\tlet parser = new ExpressionParser(new TokenStream(item.getAttribute(\"value\")));\n\t\t\ttry\n\t\t\t{\n\t\t\t\tlet result = parser.parse(context, 1, {}, false, null, Value.TYPE_UNIT);\n\t\t\t\tlet id = item.getAttribute(\"id\");\n\t\t\t\tif(id in context.unit)\n\t\t\t\t\tthrow(new Error(`Duplicate unit ID: \"${id}\"`));\n\t\t\t\tcontext.unit[id] = result.accumulator;\n\t\t\t}\n\t\t\tcatch(except)\n\t\t\t{\n\t\t\t\tif(except instanceof ReferenceError)\n\t\t\t\t{\n\t\t\t\t\tif(stack.filter(i => i.getAttribute(\"id\") === parser.stream.getCurrent().name).length === 1)\n\t\t\t\t\t\tthrow(new ReferenceError(`Circular reference to \"${parser.stream.getCurrent().name}\"`));\n\t\t\t\t\tstack.push(item);\n\t\t\t\t\tlet next = list.filter(i => i.getAttribute(\"id\") === parser.stream.getCurrent().name);\n\t\t\t\t\tif(next.length > 1)\n\t\t\t\t\t\tthrow(new ReferenceError(`Unable to resolve expression \"${item.getAttribute(\"value\")}\". Duplicate ID \"${parser.stream.getCurrent().name}\".`));\n\t\t\t\t\tif(next.length === 0)\n\t\t\t\t\t\tthrow(new ReferenceError(`Unable to resolve expression \"${item.getAttribute(\"value\")}\". \"${parser.stream.getCurrent().name}\" is undefined.`));\n\t\t\t\t\tstack.push(next[0]);\n\t\t\t\t\tnext[0].parentNode.removeChild(next[0]);\n\t\t\t\t\tlist = list.slice(0, list.indexOf(next[0])).concat(list.slice(list.indexOf(next[0]) + 1));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tthrow(new Error(\"Couldn't parse item, \" + except.message, {cause: except}));\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic #parseSegmentList(context, list)\n\t{\n\t\tlist.forEach(i =>\n\t\t{\n\t\t\tif(!i.previousSibling.tagName && i.previousSibling.nodeValue.trim() === \"\")\n\t\t\t\ti.parentNode.removeChild(i.previousSibling);\n\t\t\ti.parentNode.removeChild(i)\n\n\t\t\treturn;\n\t\t});\n\t\tcontext.segment = list.reduce((previous, current) =>\n\t\t{\n\t\t\tlet id = current.getAttribute(\"id\");\n\t\t\tif(id in previous)\n\t\t\t\tthrow(new Error(`Duplicate segment ID: \"${id}\"`));\n\t\t\tif(id in context.unit)\n\t\t\t\tthrow(new Error(`Segment ID: \"${id}\" already defined as a unit`));\n\t\t\tprevious[current.getAttribute(\"id\")] = current.getAttribute(\"d\");\n\n\t\t\treturn(previous);\n\t\t}, {});\n\t}\n\n\t#parseIncludeList(configuration)\n\t{\n\t\tlet list;\n\t\tlet seen = [];\n\n\t\tdo\n\t\t{\n\t\t\tlist = Array.from(this.document.getElementsByTagName(\"include\"));\n\t\t\tlist.forEach(item =>\n\t\t\t{\n\t\t\t\tlet href = item.getAttribute(\"href\");\n\t\t\t\tif(seen.indexOf(href) !== -1)\n\t\t\t\t\tthrow(new Error(`Circular include reference: ${href}`));\n\t\t\t\tseen.push(href);\n\t\t\t\thref = href.split(\"#\");\n\t\t\t\tlet filename = href[0];\n\t\t\t\tlet id = href.length > 1 ? href.slice(1).join(\"#\") : null;\n\t\t\t\tconst fs = require('fs');\n\t\t\t\tconst data = fs.readFileSync(configuration.base + filename, {encoding: \"utf-8\", flag: \"r\"});\n\t\t\t\tlet inner = Transformer.#parseXML(data);\n\t\t\t\tlet target;\n\t\t\t\tif(id !== null)\n\t\t\t\t{\n\t\t\t\t\ttarget = inner.getElementById(id);\n\t\t\t\t\tif(!target)\n\t\t\t\t\t\tthrow(new Error(`Failed to include file: ${filename}, ID: ${id}`));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttarget = inner.documentElement;\n\t\t\t\t\tif(!target)\n\t\t\t\t\t\tthrow(new Error(`Failed to include file: ${filename}`));\n\t\t\t\t}\n\t\t\t\tif(target.nodeName.toLowerCase() === \"svg\")\n\t\t\t\t{\n\t\t\t\t\tlet child = target.firstChild;\n\t\t\t\t\twhile(child)\n\t\t\t\t\t{\n\t\t\t\t\t\tlet add = child;\n\t\t\t\t\t\tchild = child.nextSibling;\n\t\t\t\t\t\titem.parentNode.insertBefore(add, item);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlet child = target;\n\t\t\t\t\twhile(child)\n\t\t\t\t\t{\n\t\t\t\t\t\tlet add = child;\n\t\t\t\t\t\tchild = child.nextSibling;\n\t\t\t\t\t\titem.parentNode.insertBefore(add, item);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\titem.parentNode.removeChild(item);\n\t\t\t});\n\t\t} while(list.length);\n\t}\n\n\tstatic #insertTemplateContent(template, replacement)\n\t{\n\t\tconst copy = template.cloneNode(true);\n\t\tconst list = Array.from(copy.getElementsByTagName(\"*\"));\n\t\tlist.forEach(element =>\n\t\t\tArray.from(element.attributes).forEach(attribute =>\n\t\t\t\tObject.entries(replacement).forEach(([replaceKey, replaceValue]) =>\n\t\t\t\t\tattribute.value = attribute.value.replaceAll(replaceKey, replaceValue)\n\t\t\t\t)\n\t\t\t)\n\t\t);\n\t\tif(copy.firstChild && !copy.firstChild.tagName && copy.firstChild.nodeValue.trim() === \"\")\n\t\t\t\tcopy.removeChild(copy.firstChild);\n\t\twhile(copy.firstChild)\n\t\t\ttemplate.parentNode.insertBefore(copy.firstChild, template);\n\n\t\treturn;\n\t}\n\n\tstatic #formatTemplateValue(value, format)\n\t{\n\t\treturn(\n\t\t\tformat.length && format === \"f\".repeat(format.length)\n\t\t\t?\n\t\t\t\tvalue.toString(16).padStart(format.length, \"0\")\n\t\t\t:\n\t\t\t\tformat === \"0\".repeat(format.length)\n\t\t\t\t?\n\t\t\t\t\tvalue.toString().padStart(format.length, \"0\")\n\t\t\t\t:\n\t\t\t\t\tvalue.toString()\n\t\t);\n\t}\n\n\tstatic #applyTemplate(context, document)\n\t{\n\t\tlet template = document.getElementsByTagName(\"template\")[0];\n\t\twhile(template)\n\t\t{\n\t\t\tswitch(template.getAttribute(\"type\"))\n\t\t\t{\n\t\t\t\tcase \"repeat\":\n\t\t\t\t\tlet start = parseInt(PathParser.parseValueAttribute(context, template.getAttribute(\"start\"))) || 0;\n\t\t\t\t\tlet stop = parseInt(PathParser.parseValueAttribute(context, template.getAttribute(\"stop\"))) || 0;\n\t\t\t\t\tlet step = parseInt(PathParser.parseValueAttribute(context, template.getAttribute(\"step\"))) || 1;\n\t\t\t\t\tlet columnCount = parseInt(PathParser.parseValueAttribute(context, template.getAttribute(\"column-count\"))) || 0;\n\t\t\t\t\tlet minimum = start < stop ? start : stop;\n\t\t\t\t\tlet maximum = start > stop ? start : stop;\n\t\t\t\t\tlet vMap = template.getAttribute(\"v-map\").split(new RegExp(\"\\\\s*,\\\\s*\", \"g\")).filter(item => item !== \"\").map(item =>\n\t\t\t\t\t{\n\t\t\t\t\t\tlet [range, value] = item.split(new RegExp(\"\\\\s*:\\\\s*\", \"g\"));\n\t\t\t\t\t\trange = range.split(\"-\");\n\t\t\t\t\t\tif(range.length < 2)\n\t\t\t\t\t\t\trange[1] = range[0];\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tif(range.length > 2)\n\t\t\t\t\t\t\t\trange = range.slice(0, 2);\n\t\t\t\t\t\trange = range.map((i, j) => i === \"*\" || i === \"\" ? (j === 0 ? minimum : maximum) : parseInt(i) || 0)\n\n\t\t\t\t\t\treturn({start: range[0], stop: range[1], value: value ?? \"\"});\n\t\t\t\t\t});\n\t\t\t\t\tlet iFormat = template.getAttribute(\"i-format\") ?? \"\";\n\t\t\t\t\tlet vFormat = template.getAttribute(\"v-format\") ?? \"\";\n\t\t\t\t\tlet xFormat = template.getAttribute(\"x-format\") ?? \"\";\n\t\t\t\t\tlet yFormat = template.getAttribute(\"y-format\") ?? \"\";\n\t\t\t\t\tlet y = Math.floor(start / columnCount);\n\t\t\t\t\tlet x = start - (y * columnCount);\n\t\t\t\t\tfor(let index = start; index <= stop; index += step)\n\t\t\t\t\t{\n\t\t\t\t\t\tlet v = vMap.find(item => index >= item.start && index <= item.stop)?.value ?? index;\n\t\t\t\t\t\tTransformer.#insertTemplateContent(template,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"?x?\": Transformer.#formatTemplateValue(x, xFormat),\n\t\t\t\t\t\t\t\"?y?\": Transformer.#formatTemplateValue(y, yFormat),\n\t\t\t\t\t\t\t\"?i?\": Transformer.#formatTemplateValue(index, iFormat),\n\t\t\t\t\t\t\t\"?v?\": Transformer.#formatTemplateValue(v, vFormat)\n\t\t\t\t\t\t});\n\t\t\t\t\t\tx++;\n\t\t\t\t\t\tif(x === columnCount)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tx = 0;\n\t\t\t\t\t\t\ty++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t[\"start\", \"stop\", \"column-count\"].forEach(item =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttemplate.setAttribute(\"d\", );\n\t\t\t\t\t\t})\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttemplate.parentNode.removeChild(template);\n\t\t\ttemplate = document.getElementsByTagName(\"template\")[0];\n\t\t}\n\n\t\treturn;\n\t}\n\n\t#extractIsolated(documentElement, base, list)\n\t{\n\t\tconst path = require('path');\n\n\t\treturn(list.filter(i => i.hasAttribute(\"id\")).map(i =>\n\t\t{\n\t\t\tlet container = documentElement.cloneNode(true);\n\t\t\tlet cursor = container.firstChild;\n\t\t\tlet target = null;\n\t\t\tlet visited = [];\n\t\t\twhile(cursor)\n\t\t\t{\n\t\t\t\tif(cursor.firstChild && !visited.includes(cursor.firstChild))\n\t\t\t\t{\n\t\t\t\t\tcursor = cursor.firstChild;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlet nextNode = cursor.nextSibling ?? cursor.parentNode;\n\t\t\t\t\tif(cursor.tagName && cursor.hasAttribute(\"id\"))\n\t\t\t\t\t{\n\t\t\t\t\t\tlet ancestor = cursor;\n\t\t\t\t\t\twhile(ancestor && ancestor.tagName !== \"defs\")\n\t\t\t\t\t\t\tancestor = ancestor.parentNode;\n\t\t\t\t\t\tif(!ancestor)\n\t\t\t\t\t\t\tif(cursor.getAttribute(\"id\") !== i.getAttribute(\"id\") || target !== null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlet parent = cursor.parentNode;\n\t\t\t\t\t\t\t\tif(cursor.previousSibling && !cursor.previousSibling.tagName && cursor.previousSibling.nodeValue.trim() === \"\")\n\t\t\t\t\t\t\t\t\tparent.removeChild(cursor.previousSibling);\n\t\t\t\t\t\t\t\tparent.removeChild(cursor);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(target === null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttarget = cursor;\n\t\t\t\t\t\t\t\t\ttarget.removeAttribute(\"id\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tvisited.push(cursor);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tvisited.push(cursor);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tvisited.push(cursor);\n\t\t\t\t\tcursor = nextNode;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst chain = [];\n\t\t\tif(target)\n\t\t\t{\n\t\t\t\twhile(target && !target.hasAttribute(\"dir\"))\n\t\t\t\t{\n\t\t\t\t\tchain.push(target);\n\t\t\t\t\ttarget = target.parentNode;\n\t\t\t\t}\n\t\t\t\tif(target)\n\t\t\t\t\tif(target.attributes.length === 1 && target.parentNode)\n\t\t\t\t\t{\n\t\t\t\t\t\tconst parent = target.parentNode;\n\t\t\t\t\t\tparent.insertBefore(chain[chain.length - 1], target);\n\t\t\t\t\t\tparent.removeChild(target);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\ttarget.removeAttribute(\"dir\");\n\t\t\t}\n\t\t\telse\n\t\t\t\tcontainer = null;\n\n\t\t\treturn([base + (target ? target.getAttribute(\"dir\") + path.sep : \"\") + i.getAttribute(\"id\") + \".svg\", container]);\n\t\t})).filter(([, node]) => node !== null);\n\t}\n\n\ttransform(configuration)\n\t{\n\t\tlet context =\n\t\t{\n\t\t\tunit: {},\n\t\t\tdepth: 1,\n\t\t\toptimisation:\n\t\t\t{\n\t\t\t\tpath:\n\t\t\t\t{\n\t\t\t\t\tprecision: configuration.precision,\n\t\t\t\t\tcombineCommands: configuration.combinePathCommands /* Don't output h 20 h 20 */\n\t\t\t\t},\n\t\t\t\txml:\n\t\t\t\t{\n\t\t\t\t\tstripWhitespace: configuration.stripWhitespace === \"xml\" || configuration.stripWhitespace === \"all\",\n\t\t\t\t\tstripComments: configuration.stripComments\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tthis.#parseIncludeList(configuration);\n\t\tTransformer.#parseUnitList(context, Array.from(this.document.getElementsByTagName(\"unit\")));\n\t\tfor(let item in configuration.unit)\n\t\t\tcontext.unit[item] = configuration.unit[item];\n\t\tTransformer.#parseSegmentList(context, Array.from(this.document.getElementsByTagName(\"segment\")));\n\t\tTransformer.#applyTemplate(context, this.document);\n\t\tlet list = Array.from(this.document.getElementsByTagName(\"path\"));\n\t\tcontext.depth = 0;\n\t\twhile(list.length)\n\t\t{\n\t\t\tlet item = list.shift();\n\t\t\tlet parser = new PathParser(new TokenStream(item.getAttribute(\"d\")));\n\t\t\tlet pathResult = parser.parse(context);\n\t\t\titem.setAttribute(\"d\", PathParser.resultToString(pathResult, context.optimisation.path.precision))\n\t\t}\n\t\tconst scan =\n\t\t[\n\t\t\t{tagName: \"svg\", attribute: [{name: \"viewBox\", limit: 4}, \"width\", \"height\"]},\n\t\t\t{tagName: \"rect\", attribute: [\"x\", \"y\", \"width\", \"height\", \"rx\", \"ry\"]},\n\t\t\t{tagName: \"circle\", attribute: [\"r\", \"cx\", \"cy\"]},\n\t\t\t{tagName: \"ellipse\", attribute: [\"rx\", \"ry\", \"cx\", \"cy\"]},\n\t\t\t{tagName: \"line\", attribute: [\"x1\", \"y1\", \"x2\", \"y2\"]},\n\t\t\t{tagName: \"image\", attribute: [\"x\", \"y\", \"width\", \"height\"]},\n\t\t\t{tagName: \"pattern\", attribute: [\"width\", \"height\"]},\n\t\t\t{tagName: \"polygon\", attribute: [{name: \"points\", limit: -1}]},\n\t\t\t{tagName: \"polyline\", attribute: [{name: \"points\", limit: -1}]},\n\t\t\t{tagName: \"line\", attribute: [\"x1\", \"y1\", \"x2\", \"y2\"]},\n\t\t\t{tagName: \"textPath\", attribute: [\"startOffset\"]},\n\t\t\t{tagName: \"path\", attribute: [\"stroke-width\"]},\n\t\t\t{tagName: \"image\", attribute: [\"x\", \"y\", \"width\", \"height\"]},\n\t\t\t{tagName: \"marker\", attribute: [\"markerWidth\", \"markerHeight\", \"refX\", \"refY\"]},\n\t\t];\n\t\tscan.forEach(target =>\n\t\t{\n\t\t\tlist = Array.from(this.document.getElementsByTagName(target.tagName));\n\t\t\tcontext.depth = 0;\n\t\t\twhile(list.length)\n\t\t\t{\n\t\t\t\tlet item = list.shift();\n\t\t\t\ttarget.attribute.forEach(attribute =>\n\t\t\t\t{\n\t\t\t\t\tlet attributeName;\n\t\t\t\t\tlet attributeLimit;\n\n\t\t\t\t\tif(typeof(attribute) === \"string\")\n\t\t\t\t\t{\n\t\t\t\t\t\tattributeName = attribute;\n\t\t\t\t\t\tattributeLimit = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tattributeName = attribute.name;\n\t\t\t\t\t\tattributeLimit = attribute.limit;\n\t\t\t\t\t}\n\t\t\t\t\tif(item.hasAttribute(attributeName))\n\t\t\t\t\t\titem.setAttribute(attributeName, PathParser.parseValueAttribute(context, item.getAttribute(attributeName)));\n\n\t\t\t\t\treturn;\n\t\t\t\t})\n\t\t\t}\n\n\t\t\treturn;\n\t\t});\n\t\tlet stack = [];\n\t\tlet cursor = this.document.documentElement.firstChild;\n\t\tlet Node = {COMMENT_NODE: 8, TEXT_NODE: 3};\n\t\twhile(stack.length || cursor)\n\t\t{\n\t\t\tif(cursor.firstChild)\n\t\t\t\tstack.push(cursor.firstChild);\n\t\t\tlet target = cursor;\n\t\t\tif(cursor.nextSibling)\n\t\t\t\tcursor = cursor.nextSibling;\n\t\t\telse\n\t\t\t\tcursor = stack.pop();\n\t\t\tif(context.optimisation.xml.stripWhitespace && target.nodeType === Node.TEXT_NODE && target.nodeValue.replace(new RegExp(\"\\\\s+\", \"g\"), \"\").length === 0)\n\t\t\t\ttarget.parentNode.removeChild(target);\n\t\t\tif(context.optimisation.xml.stripComments && target.nodeType === Node.COMMENT_NODE)\n\t\t\t\ttarget.parentNode.removeChild(target);\n\t\t}\n\t\tif(configuration.extract)\n\t\t{\n\t\t\tconst path = require('path');\n\t\t\tlet base = configuration.destination + path.sep;\n\t\t\tlist = this.#extractIsolated(this.document.documentElement, base, Array.from(this.document.getElementsByTagName(\"*\")));\n\t\t}\n\t\telse\n\t\t\tlist = [[configuration.destination, this.document.documentElement]];\n\n\t\treturn(list.map(([i, j]) => [i, (new (typeof(XMLSerializer) === \"undefined\" ? require(\"xmldom\").XMLSerializer : XMLSerializer)()).serializeToString(j)]));\n\t}\n};\n","import Transformer from \"./class/Transformer\";\nimport PathParser from \"./class/PathParser\";\nimport BigDecimal from \"./class/BigDecimal\";\nimport * as fs from 'fs';\n\n/*\nexport function transform(text, configuration, require)\n{\n\tconsole.log(\"Transforming\"); \n\twindow.PathParser = PathParser;\n\twindow.BigDecimal = BigDecimal;\n\tvar tt = `\n\t<svg>\n\t\t<unit id=\"pp\" value=\"3n\" />\n\t\t<unit id=\"n\" value=\"2\" />\n\t\t<unit id=\"q\" value=\"3n + 4pp((3))\" />\n\t\t<segment id=\"kSegment\" d=\"l 20 0 \" />\n\t\t<segment id=\"kSegment2\" d=\"L 200,100\" />\n\t\t<segment id=\"kSegment3\" d=\"c 20,50 80,-50 100,0\" />\n\t\t<segment id=\"kSegment4\" d=\"a 50,60 30 1 0 100,0\" />\n\t\t<segment id=\"kSegment5\" d=\"l 100,20 l 100,-20 l @400,@400\" />\n\t\t<segment id=\"purple\" d=\"h 5j v 5j h 3n\" />\n\t\t<apath d=\"m 50,50n kSegment kSegment % 90 l -3.2.5 l-20-20 40 40 l 50 0 l 50 50\" />\n\t\t<apath d=\"M 100,100 kSegment2 L 100,100 kSegment2%45 L 300,100\" />\n\t\t<apath d=\"M 100,100 kSegment2%90 M 200,200 kSegment2%90\" />\n\t\t<apath d=\"M 100,100 kSegment3\" />\n\t\t<apath d=\"M 100,300 kSegment3%90\" />\n\t\t<apath d=\"M 100,100 kSegment4\" />\n\t\t<apath d=\"M 100,300 kSegment4%90\" />\n\t\t<apath d=\"M 100,100 kSegment5\" />\n\t\t<apath d=\"M 100,100 kSegment5%30\" />\n\t\t<apath d=\"M 100,100 m 30,30 3kSegment2()%45 3kSegment z\" />\n\t\t<apath d=\"M 100,100 purple(j=5 n=5 #=2)m(49) 50\" />\n\t\t<segment id=\"green\" d=\"h 50 v 50\" />\n\t\t<apath d=\"M 100,100 green%|green|\" />\n\t\t<path d=\"m 50,50 h 30 h 30 h 30\" />\n\t\t<include href=\"somefile.svg#element\" />\n\t</svg>`;\n\ttt = `<svg viewBox=\"0 0 300 300\">\n\t\t<path d=\"m 50,50 Q 50,100 100,100 Q 150,100 150,50 Q 150,0 100,0\" stroke=\"red\" strokewidth=\"3\" />\n\t\t<path d=\"m 50,75 Q 50,125 100,125 T 150,75 T 100,25\" fill=\"transparent\" stroke=\"red\" strokewidth=\"3\" />\n\t</svg>`;\n\treturn((new Transformer(tt)).transform());\n};\n*/\n\n(function() {\n\tlet timeStart = Date.now();\n\tlet parameter = process.argv.slice(2);\n\tlet valid = true;\n\tlet reading = true;\n\tlet whitespaceTypeList = [\"path\", \"xml\", \"all\"];\n\tlet configuration =\n\t{\n\t\tstripWhitespace: null,\n\t\tstripComments: false,\n\t\tcombinePathCommands: false,\n\t\tprecision: 3\n\t};\n\n\twhile(reading && valid && parameter[0] && parameter[0].startsWith(\"--\"))\n\t\tswitch(parameter[0])\n\t\t{\n\t\t\tcase \"--precision\":\n\t\t\t\tconfiguration.precision = parseInt(parameter[1]);\n\t\t\t\tif(configuration.precision.toString() !== parameter[1] || isNaN(configuration.precision))\n\t\t\t\t{\n\t\t\t\t\tconsole.log(\"Invalid syntax for --precision switch\");\n\t\t\t\t\tvalid = false;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tparameter = parameter.slice(2);\n\t\t\t\tbreak;\n\t\t\tcase \"--stripWhitespace\":\n\t\t\t\tconfiguration.stripWhitespace = parameter[1];\n\t\t\t\tif(whitespaceTypeList.indexOf(configuration.stripWhitespace) === -1)\n\t\t\t\t{\n\t\t\t\t\tconsole.log(\"Invalid syntax for --stripWhitespace switch\");\n\t\t\t\t\tvalid = false;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tparameter = parameter.slice(2);\n\t\t\t\tbreak;\n\t\t\tcase \"--stripComments\":\n\t\t\t\tconfiguration.stripComments = true;\n\t\t\t\tparameter.shift();\n\t\t\t\tbreak;\n\t\t\tcase \"--combinePathCommands\":\n\t\t\t\tconfiguration.combinePathCommands = true;\n\t\t\t\tparameter.shift();\n\t\t\t\tbreak;\n\t\t\tcase \"--extract\":\n\t\t\t\tconfiguration.extract = true;\n\t\t\t\tparameter.shift();\n\t\t\t\tbreak;\n\t\t\tcase \"--report\":\n\t\t\t\tconfiguration.report = true;\n\t\t\t\tparameter.shift();\n\t\t\t\tbreak;\n\t\t\tcase \"--\":\n\t\t\t\tparameter.shift();\n\t\t\tdefault:\n\t\t\t\treading = false;\n\t\t\tbreak;\n\t\t}\n\tif(!valid || parameter.length < 2)\n\t{\n\t\tconsole.log(\n`\nUsage: npm start -- [options] <source> <destination> [units...]\n\nsource       An unprocessed SVG file containing Pather commands\ndestination  Desired filename of the processed output\noptions      One or more of the following switches:\n  --precision <n>                   Write numbers to the output with N decimal places. Default is 3\n  --stripWhitespace <path|xml|all>  Strip whitespace from within path data, between XML tags or both (all)\n  --stripComments                   Strip XML comments from the output document\n  --combinePathCommands             Combine repeated commands in path data, e.g. h 30 h 30 becomes h 60\n  --extract                         Extract all elements with an ID to individual files (destination is a directory)\n  --report                          Report information before and after processing a file\nunits        Variable values to be passed to the Pather environment\n             Name/value pairs separated by \"=\", e.g. myUnit=3 myOtherUnit=4.2\n`\n\t\t\t);\n\t}\n\telse\n\t{\n\t\tlet source = parameter.shift();\n\t\tconfiguration.destination = parameter.shift();\n\t\tif(configuration.report)\n\t\t\tconsole.log(`Processing \"${source}\"...`);\n\t\tconfiguration.unit = {};\n\t\treading = true;\n\t\twhile(reading && parameter.length) {\n\t\t\tlet unit = parameter.shift().split(\"=\");\n\t\t\tlet reason;\n\t\t\tswitch(true)\n\t\t\t{\n\t\t\t\tcase unit.length !== 2:\n\t\t\t\t\treason = `Invalid unit format \"${unit.join(\"=\")}\".`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase new RegExp(\"^[bdefgijknopruwxy]|[a-z_$][a-z0-9_$]+$\", \"i\").exec(unit[0]) === null:\n\t\t\t\t\treason = `Invalid unit name \"${unit[0]}\".`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase parseFloat(unit[1]).toString() !== unit[1].substr(0, parseFloat(unit[1]).toString().length) || isNaN(parseFloat(unit[1])) || parseFloat(unit[1]) === Infinity || parseFloat(unit[1]) === -Infinity:\n\t\t\t\t\treason = `Invalid unit value \"${unit[1]}\".`;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(reason)\n\t\t\t{\n\t\t\t\tconsole.log(`${reason} Expected valid identifier followed by a number, e.g. myUnit=3`); \n\t\t\t\treading = false;\n\t\t\t}\n\t\t\telse\n\t\t\t\tconfiguration.unit[unit[0]] = parseFloat(unit[1]);\n\t\t}\n\t\tif(reading)\n\t\t{\n\t\t\t// console.log(configuration);\n\t\t\tconst fs = require('fs');\n\t\t\tconst path = require('path');\n\t\t\tconfiguration.base = path.dirname(source) + path.sep;\n\t\t\tconst data = fs.readFileSync(source, {encoding: \"utf-8\", flag: \"r\"});\n\t\t\tlet t = new Transformer(data);\n\t\t\tlet output = t.transform(configuration);\n\t\t\toutput.forEach(([i, j]) =>\n\t\t\t{\n\t\t\t\tif(!fs.existsSync(path.dirname(i)))\n\t\t\t\t\tfs.mkdirSync(path.dirname(i), { recursive: true });\n\t\t\t\tfs.writeFileSync(i, j, {encoding: \"utf-8\"})\n\n\t\t\t\treturn;\n\t\t\t});\n\t\t\tif(configuration.report)\n\t\t\t\tconsole.log(`Completed successfully in ${Date.now() - timeStart} ms\\n`);\n\t\t}\n\t}\n\n\treturn;\n})();\n"],"names":["Token","static","constructor","type","name","value","position","this","nameOf","Object","entries","filter","key","BigDecimal","BigInt","repeat","LIMIT_PRECISION","RegExp","source","integerPart","decimalPart","VALUE_SHIFT","split","substr","padEnd","charCodeAt","fromBigInt","result","fromBigIntDivision","dividend","divisor","add","other","subtract","multiplyBy","divideBy","equals","valueOf","toNumber","toString","precision","text","Math","max","padStart","length","replace","PATTERN_TRAILING_ZERO","Value","getEmptyResult","stack","sequence","arity","pending","x","y","fixNext","lastAngle","originX","originY","TokenStream","TYPE_NUMBER","expression","handler","TYPE_COMMAND","a","TYPE_X","TYPE_Y","TYPE_THETA","TYPE_FLAG","c","h","l","m","q","s","t","v","z","toLowerCase","TYPE_DELIMITER","TYPE_WHITESPACE","TYPE_IDENTIFIER","TYPE_BRACKET","TYPE_OPERATOR_ADD","TYPE_OPERATOR_MULTIPLY","TYPE_OPERATOR_SUBTRACT","TYPE_OPERATOR_DIVIDE","TYPE_OPERATOR_ROTATE","TYPE_OPERATOR_SKEW_HORIZONTAL","TYPE_OPERATOR_SKEW_VERTICAL","TYPE_OPERATOR_FIX","TYPE_OPERATOR_MEASURE","TYPE_OPERATOR_ASSIGN","TYPE_OPERATOR_REPEAT","data","cursor","chainIndex","streamIndex","match","item","PRIORITY","exec","push","SyntaxError","TYPE_END","getCurrent","getNext","peekNext","reset","Distortion","getName","OPERATION_ROTATE","OPERATION_SKEW_HORIZONTAL","OPERATION_SKEW_VERTICAL","run","x0","y0","x1","y1","distortionValue","cosine","sine","PI","cos","sin","abs","Number","EPSILON","tan","runStack","distortionStack","reduceRight","carry","fixPoint","point","relative","topX","topY","fixed","applyDistortion","context","top","origin","command","point1","point2","last","atan2","optimisation","path","combineCommands","sequnce","pop","toUpperCase","PathParser","stream","resultToString","map","i","slice","join","parseValueAttribute","pathResult","parseList","limit","state","current","reading","index","expResult","ExpressionParser","parse","TYPE_UNIT","accumulator","argumentList","invoked","next","segment","parseInvocation","concat","Error","indexOf","debug","formatOperation","operation","unwind","start","leftValue","OPERATION_EVALUATE","console","log","j","OPERATION_MULTIPLY","OPERATION_DIVIDE","OPERATION_ADD","OPERATION_SUBTRACT","depth","insideArgumentList","additionalTerminatorList","base","counter","unit","ReferenceError","includes","inner","hasCount","hasArgumentList","count","delimited","parseInt","Transformer","document","parseXML","require","DOMParser","parseFromString","parseUnitList","list","shift","previousSibling","tagName","nodeValue","trim","parentNode","removeChild","parser","getAttribute","id","except","message","cause","parseSegmentList","forEach","reduce","previous","parseIncludeList","configuration","seen","Array","from","getElementsByTagName","href","filename","readFileSync","encoding","flag","target","getElementById","documentElement","nodeName","child","firstChild","nextSibling","insertBefore","insertTemplateContent","template","replacement","copy","cloneNode","element","attributes","attribute","replaceKey","replaceValue","replaceAll","formatTemplateValue","format","applyTemplate","stop","step","columnCount","minimum","maximum","vMap","range","iFormat","vFormat","xFormat","yFormat","floor","find","Ye","Le","Ce","ze","setAttribute","extractIsolated","hasAttribute","container","visited","nextNode","ancestor","parent","removeAttribute","chain","sep","node","transform","combinePathCommands","xml","stripWhitespace","stripComments","attributeName","Node","nodeType","extract","destination","XMLSerializer","serializeToString","timeStart","Date","now","parameter","process","argv","valid","whitespaceTypeList","startsWith","isNaN","report","reason","parseFloat","Infinity","fs","dirname","existsSync","mkdirSync","recursive","writeFileSync"],"mappings":"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"}