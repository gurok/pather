{"version":3,"file":"pather.min.js","sources":["../source/class/Token.js","../source/class/BigDecimal.js","../source/class/Value.js","../source/class/TokenStream.js","../source/class/ExpressionParser.js","../source/class/PathParser.js","../source/class/Transformer.js","../source/main.js"],"sourcesContent":["export default class Token\r\n{\r\n    static TYPE_NUMBER             = 1;\r\n    static TYPE_COMMAND            = 2;\r\n    static TYPE_DELIMITER          = 3;\r\n    static TYPE_WHITESPACE         = 4;\r\n    static TYPE_IDENTIFIER         = 5;\r\n    static TYPE_BRACKET            = 6;\r\n    static TYPE_END                = 7;\r\n    static TYPE_OPERATOR_ADD       = 8;\r\n    static TYPE_OPERATOR_SUBTRACT  = 9;\r\n    static TYPE_OPERATOR_MULTIPLY  = 10;\r\n    static TYPE_OPERATOR_DIVIDE    = 11;\r\n    static TYPE_OPERATOR_ROTATE    = 12;\r\n    static TYPE_OPERATOR_FIX       = 13;\r\n    static TYPE_OPERATOR_MEASURE   = 14;\r\n    static TYPE_OPERATOR_ASSIGN    = 15;\r\n    static TYPE_OPERATOR_REPEAT    = 16;\r\n\r\n    constructor(type, name, value, position)\r\n    {\r\n        this.type = type;\r\n        this.name = name;\r\n        this.value = value;\r\n        this.position = position;\r\n    }\r\n};\r\n","export default class BigDecimal\r\n{\r\n    static LIMIT_PRECISION         = 18;\r\n    static PI                      = new BigDecimal(\"3.141592653589793238\");\r\n    static #VALUE_SHIFT            = BigInt(\"1\" + \"0\".repeat(BigDecimal.LIMIT_PRECISION));\r\n    static #PATTERN_TRAILING_ZERO  = new RegExp(\"\\\\.?0+$\");\r\n\r\n    #value;\r\n\r\n    constructor(source = 0)\r\n\t{\r\n\t\tlet integerPart;\r\n\t\tlet decimalPart;\r\n\r\n\t\tif(source instanceof BigDecimal)\r\n            this.#value = source.#value;\r\n\t\telse\r\n            if(source instanceof BigInt)\r\n                this.#value = value * BigDecimal.VALUE_SHIFT;\r\n            else\r\n            {\r\n                [integerPart, decimalPart] = (source + \".\").split(\".\");\r\n                this.#value = BigInt(integerPart + decimalPart.substr(0, BigDecimal.LIMIT_PRECISION).padEnd(BigDecimal.LIMIT_PRECISION, \"0\"));\r\n                if(decimalPart.charCodeAt(BigDecimal.LIMIT_PRECISION) > 52)\r\n                    this.#value++;\r\n            }\r\n\r\n\t\treturn;\r\n    }\r\n\r\n    #fromBigInt(source)\r\n    {\r\n        let result;\r\n\r\n        result = new BigDecimal(this);\r\n        result.#value = source;\r\n\r\n        return(result);\r\n    }\r\n\r\n    #fromBigIntDivision(dividend, divisor)\r\n    {\r\n        return(this.#fromBigInt(dividend / divisor + dividend * 2n / divisor % 2n));\r\n    }\r\n\r\n    add(other)\r\n    {\r\n        return(this.#fromBigInt(this.#value + new BigDecimal(other).#value));\r\n    }\r\n\r\n    subtract(other)\r\n    {\r\n        return(this.#fromBigInt(this.#value - new BigDecimal(other).#value));\r\n    }\r\n\r\n    multiplyBy(other)\r\n    {\r\n        return(this.#fromBigIntDivision(this.#value * new BigDecimal(other).#value, BigDecimal.#VALUE_SHIFT));\r\n    }\r\n\r\n    divideBy(other)\r\n    {\r\n        return(this.#fromBigIntDivision(this.#value * BigDecimal.#VALUE_SHIFT, new BigDecimal(other).#value));\r\n    }\r\n\r\n    equals(other)\r\n    {\r\n        return(this.valueOf() == other);\r\n    }\r\n\r\n    valueOf()\r\n    {\r\n        return(this.#value);\r\n    }\r\n\r\n    toNumber()\r\n    {\r\n        return(+this.toString());\r\n    }\r\n\r\n    toString(precision = BigDecimal.LIMIT_PRECISION)\r\n    {\r\n        let text;\r\n\r\n        text = this.#fromBigIntDivision(this.#value, BigInt(\"1\" + \"0\".repeat(precision > -1 ? Math.max(BigDecimal.LIMIT_PRECISION - precision, 0) : BigDecimal.LIMIT_PRECISION))).#value.toString().padStart(precision + 1, \"0\");\r\n\r\n        return(text.substr(0, text.length - precision) + (\".\" + text.substr(-precision)).replace(BigDecimal.#PATTERN_TRAILING_ZERO, \"\"));\r\n    }\r\n}\r\n","import BigDecimal from \"./BigDecimal\";\r\n\r\nexport default class Value\r\n{\r\n\tstatic TYPE_X        = 1;\r\n\tstatic TYPE_Y        = 2;\r\n\tstatic TYPE_THETA    = 3;\r\n\tstatic TYPE_FLAG     = 4;\r\n\tstatic TYPE_UNIT     = 5;\r\n\r\n\tstatic getEmptyResult()\r\n\t{\r\n\t\treturn(\r\n\t\t{\r\n\t\t\tstack: [],\r\n\t\t\tsequence: [],\r\n\t\t\tarity: null,\r\n\t\t\tpending: 0,\r\n\t\t\tx: new BigDecimal(0),\r\n\t\t\ty: new BigDecimal(0),\r\n\t\t\tfixNext: false,\r\n\t\t\tlastAngle: null,\r\n\t\t\toriginX: new BigDecimal(0),\r\n\t\t\toriginY: new BigDecimal(0) \r\n\t\t});\r\n\t}\r\n};\r\n","import Token from \"./Token\";\r\nimport BigDecimal from \"./BigDecimal\";\r\nimport Value from \"./Value\";\r\n\r\nexport default class TokenStream\r\n{\r\n    static #PRIORITY =\r\n    [\r\n        {\r\n            type: Token.TYPE_NUMBER,\r\n            expression: new RegExp(\"^[0-9]*\\\\.?[0-9]+\", \"\"),\r\n            handler: value => new BigDecimal(value)\r\n        },\r\n        {\r\n            type: Token.TYPE_COMMAND,\r\n            expression: new RegExp(\"^[achlmqstvz](?![a-z_$])\", \"i\"),\r\n            handler: value => (\r\n            {\r\n                \"a\":\r\n                [\r\n                    Value.TYPE_X,\r\n                    Value.TYPE_Y,\r\n                    Value.TYPE_THETA,\r\n                    Value.TYPE_FLAG,\r\n                    Value.TYPE_FLAG,\r\n                    Value.TYPE_X,\r\n                    Value.TYPE_Y\r\n                ],\r\n                \"c\":\r\n                [\r\n                    Value.TYPE_X,\r\n                    Value.TYPE_Y,\r\n                    Value.TYPE_X,\r\n                    Value.TYPE_Y,\r\n                    Value.TYPE_X,\r\n                    Value.TYPE_Y\r\n                ],\r\n                \"h\":\r\n                [\r\n                    Value.TYPE_X\r\n                ],\r\n                \"l\":\r\n                [\r\n                    Value.TYPE_X,\r\n                    Value.TYPE_Y\r\n                ],\r\n                \"m\":\r\n                [\r\n                    Value.TYPE_X,\r\n                    Value.TYPE_Y\r\n                ],\r\n                \"q\":\r\n                [\r\n                    Value.TYPE_X,\r\n                    Value.TYPE_Y,\r\n                    Value.TYPE_X,\r\n                    Value.TYPE_Y\r\n                ],\r\n                \"s\":\r\n                [\r\n                    Value.TYPE_X,\r\n                    Value.TYPE_Y,\r\n                    Value.TYPE_X,\r\n                    Value.TYPE_Y\r\n                ],\r\n                \"t\":\r\n                [\r\n                    Value.TYPE_X,\r\n                    Value.TYPE_Y\r\n                ],\r\n                \"v\":\r\n                [\r\n                    Value.TYPE_Y\r\n                ],\r\n                \"z\":\r\n                [\r\n                ]\r\n            }[value.toLowerCase()])\r\n        },\r\n        {\r\n            type: Token.TYPE_DELIMITER,\r\n            expression: new RegExp(\"^,+\", \"\"),\r\n            handler: () => null\r\n        },\r\n        {\r\n            type: Token.TYPE_WHITESPACE,\r\n            expression: new RegExp(\"^\\\\s+\", \"\"),\r\n            handler: () => null\r\n        },\r\n        {\r\n            type: Token.TYPE_IDENTIFIER,\r\n            expression: new RegExp(\"^[a-z_$][a-z0-9_$]*\", \"i\"),\r\n            handler: value => value\r\n        },\r\n        {\r\n            type: Token.TYPE_BRACKET,\r\n            expression: new RegExp(\"^[()]\", \"\"),\r\n            handler: value => value === \"(\"\r\n        },\r\n        {\r\n            type: Token.TYPE_OPERATOR_ADD,\r\n            expression: new RegExp(\"^\\\\+\", \"\"),\r\n            handler: value => value\r\n        },\r\n        {\r\n            type: Token.TYPE_OPERATOR_MULTIPLY,\r\n            expression: new RegExp(\"^\\\\*\", \"\"),\r\n            handler: value => value\r\n        },\r\n        {\r\n            type: Token.TYPE_OPERATOR_SUBTRACT,\r\n            expression: new RegExp(\"^-\", \"\"),\r\n            handler: value => value\r\n        },\r\n        {\r\n            type: Token.TYPE_OPERATOR_DIVIDE,\r\n            expression: new RegExp(\"^/\", \"\"),\r\n            handler: value => value\r\n        },\r\n        {\r\n            type: Token.TYPE_OPERATOR_ROTATE,\r\n            expression: new RegExp(\"^%\", \"\"),\r\n            handler: value => value\r\n        },\r\n        {\r\n            type: Token.TYPE_OPERATOR_FIX,\r\n            expression: new RegExp(\"^@\", \"\"),\r\n            handler: value => value\r\n        },\r\n        {\r\n            type: Token.TYPE_OPERATOR_MEASURE,\r\n            expression: new RegExp(\"^\\\\|\", \"\"),\r\n            handler: value => value\r\n        },\r\n        {\r\n            type: Token.TYPE_OPERATOR_ASSIGN,\r\n            expression: new RegExp(\"^=\", \"\"),\r\n            handler: value => value\r\n        },\r\n        {\r\n            type: Token.TYPE_OPERATOR_REPEAT,\r\n            expression: new RegExp(\"^#\", \"\"),\r\n            handler: value => value\r\n        }\r\n    ];\r\n\r\n    #data = null;\r\n    #cursor = 0;\r\n\r\n    constructor(text)\r\n    {\r\n        var chainIndex;\r\n        var streamIndex;\r\n        var match;\r\n        var item;\r\n\r\n        this.#data = [];\r\n        streamIndex = 0;\r\n        while(text.length)\r\n        {\r\n            for(chainIndex = 0; chainIndex < TokenStream.#PRIORITY.length; chainIndex++)\r\n            {\r\n                item = TokenStream.#PRIORITY[chainIndex];\r\n                match = item.expression.exec(text);\r\n                if(match)\r\n                {\r\n                    this.#data.push(new Token(item.type, match[0], item.handler(match[0]), streamIndex));\r\n                    streamIndex += match[0].length;\r\n                    text = text.substr(match[0].length);\r\n                    break;\r\n                }\r\n            }\r\n            if(chainIndex === TokenStream.#PRIORITY.length)\r\n\t\t\t\tthrow(new SyntaxError(`Unexpected symbol \"${text.substr(0, 1)}\" at column ${streamIndex}`));\r\n        }\r\n        this.#data.push(new Token(Token.TYPE_END, null, null, streamIndex));\r\n    }\r\n\r\n    getCurrent()\r\n    {\r\n        return(this.#data[this.#cursor] ?? null);\r\n    }\r\n\r\n    getNext()\r\n    {\r\n        this.#cursor++;\r\n\r\n        return(this.getCurrent());\r\n    }\r\n\r\n    peekNext()\r\n    {\r\n        return(this.#data[this.#cursor + 1] ?? null);\r\n    }\r\n\r\n    reset()\r\n    {\r\n        this.#cursor = 0;\r\n\r\n        return(this.getCurrent());\r\n    }\r\n};\r\n","import TokenStream from \"./TokenStream\";\r\nimport Token from \"./Token\";\r\nimport BigDecimal from \"./BigDecimal\";\r\nimport Value from \"./Value\";\r\n\r\nexport default class ExpressionParser\r\n{\r\n    static #OPERATION_EVALUATE  = 1;\r\n    static #OPERATION_ADD       = 2;\r\n    static #OPERATION_SUBTRACT  = 3;\r\n    static #OPERATION_MULTIPLY  = 4;\r\n    static #OPERATION_DIVIDE    = 5;\r\n\r\n    constructor(stream)\r\n    {\r\n        this.stream = stream;\r\n\t\tthis.debug = false;\r\n    }\r\n\r\n    static #formatOperation(operation)\r\n    {\r\n\t\treturn(operation.value + \" \" + [\"\", \"=\", \"+\", \"-\", \"*\", \"/\"][operation.operation]);\r\n\t}\r\n\r\n    static #unwind(result, limit)\r\n    {\r\n\t\tvar start;\r\n\t\tvar index;\r\n\t\tvar leftValue;\r\n\t\tvar leftOperation;\r\n\r\n\t\tstart = result.stack.length - 1;\r\n\t\twhile(start > -1 && result.stack[start].operation > limit)\r\n\t\t\tstart--;\r\n\t\tindex = start + 1;\r\n\t\tif(index < result.stack.length)\r\n\t\t{\r\n\t\t\tresult.stack.push({operation: ExpressionParser.#OPERATION_EVALUATE, value: result.accumulator});\r\n\t\t\tif(this.debug)\r\n\t\t\t\tconsole.log(\"<<\\n\" + result.stack.slice(index).map((i, j) => j + \": \" + ExpressionParser.#formatOperation(i)).join(\"\\n\"));\r\n\t\t\tleftValue = result.stack[index].value;\r\n\t\t\tfor(; index < result.stack.length - 1; index++)\r\n\t\t\t{\r\n\t\t\t\tleftOperation = result.stack[index].operation;\r\n\t\t\t\tswitch(leftOperation)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase ExpressionParser.#OPERATION_MULTIPLY:\r\n\t\t\t\t\t\tleftValue = leftValue.multiplyBy(result.stack[index + 1].value);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase ExpressionParser.#OPERATION_DIVIDE:\r\n\t\t\t\t\t\tleftValue = leftValue.divideBy(result.stack[index + 1].value);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase ExpressionParser.#OPERATION_ADD:\r\n\t\t\t\t\t\tleftValue = leftValue.add(result.stack[index + 1].value);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase ExpressionParser.#OPERATION_SUBTRACT:\r\n\t\t\t\t\t\tleftValue = leftValue.subtract(result.stack[index + 1].value);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tresult.accumulator = leftValue;\r\n\t\t\tresult.stack = result.stack.slice(0, start + 1);\r\n\t\t}\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n    parse(context, depth = 0, argumentList = {}, insideArgumentList = false, position, type)\r\n    {\r\n\t\tvar result;\r\n\t\tvar state;\r\n\r\n\t\tresult =\r\n\t\t{\r\n\t\t\taccumulator: new BigDecimal(0),\r\n\t\t\tbase: 0,\r\n\t\t\tcounter: depth,\r\n\t\t\tdata: 0,\r\n\t\t\tstack: []\r\n\t\t};\r\n\t\tstate =\r\n\t\t{\r\n\t\t\tcurrent: this.stream.getCurrent(),\r\n\t\t\treading: true\r\n\t\t};\r\n\r\n\t\twhile(state.reading && state.current)\r\n\t\t{\r\n\t\t\tswitch(state.current.type)\r\n\t\t\t{\r\n\t\t\t\tcase Token.TYPE_NUMBER:\r\n\t\t\t\t\tif(result.data === Token.TYPE_WHITESPACE)\r\n\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected space-delimited value \"${state.current.name}\" at column ${state.current.position}`));\r\n\t\t\t\t\tif(result.data === Token.TYPE_NUMBER)\r\n\t\t\t\t\t\tif(result.counter)\r\n\t\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected token \"${state.current.name}\" at column ${state.current.position}`));\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tstate.reading = false;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tif(this.debug)\r\n\t\t\t\t\t\tconsole.log(\"Number\", state.current);\r\n\t\t\t\t\tresult.accumulator = state.current.value;\r\n\t\t\t\t\tresult.data = Token.TYPE_NUMBER;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase Token.TYPE_OPERATOR_DIVIDE:\r\n\t\t\t\t\tif(result.data !== Token.TYPE_NUMBER && result.data !== Token.TYPE_WHITESPACE)\r\n\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected token \"${state.current.name}\" at column ${state.current.position}`));\r\n\t\t\t\t\tif(this.debug)\r\n\t\t\t\t\t\tconsole.log(\"/\", state.current);\r\n\t\t\t\t\tresult.stack.push({operation: ExpressionParser.#OPERATION_DIVIDE, value: result.accumulator});\r\n\t\t\t\t\tresult.data = Token.TYPE_OPERATOR_DIVIDE;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase Token.TYPE_OPERATOR_MULTIPLY:\r\n\t\t\t\t\tif(result.data !== Token.TYPE_NUMBER && result.data !== Token.TYPE_WHITESPACE)\r\n\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected token \"${state.current.name}\" at column ${state.current.position}`));\r\n\t\t\t\t\tif(this.debug)\r\n\t\t\t\t\t\tconsole.log(\"*\", state.current);\r\n\t\t\t\t\tresult.stack.push({operation: ExpressionParser.#OPERATION_MULTIPLY, value: result.accumulator});\r\n\t\t\t\t\tresult.data = Token.TYPE_OPERATOR_MULTIPLY;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase Token.TYPE_OPERATOR_SUBTRACT:\r\n\t\t\t\t\tif(result.data === Token.TYPE_NUMBER && result.counter === 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tstate.reading = false;\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(result.data !== Token.TYPE_NUMBER && result.data !== 0 && result.data !== Token.TYPE_BRACKET && result.data !== Token.TYPE_WHITESPACE)\r\n\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected token \"${state.current.name}\" at column ${state.current.position}`));\r\n\t\t\t\t\tif(this.debug)\r\n\t\t\t\t\t\tconsole.log(\"-\", state.current);\r\n\t\t\t\t\tExpressionParser.#unwind(result, ExpressionParser.#OPERATION_SUBTRACT);\r\n\t\t\t\t\tresult.stack.push({operation: ExpressionParser.#OPERATION_SUBTRACT, value: result.accumulator});\r\n\t\t\t\t\tresult.data = Token.TYPE_OPERATOR_SUBTRACT;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase Token.TYPE_OPERATOR_ADD:\r\n\t\t\t\t\tif(result.data !== Token.TYPE_NUMBER && result.data !== Token.TYPE_WHITESPACE)\r\n\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected token \"${state.current.name}\" at column ${state.current.position}`));\r\n\t\t\t\t\tif(this.debug)\r\n\t\t\t\t\t\tconsole.log(\"+\", state.current);\r\n\t\t\t\t\tExpressionParser.#unwind(result, ExpressionParser.#OPERATION_SUBTRACT);\r\n\t\t\t\t\tresult.stack.push({operation: ExpressionParser.#OPERATION_ADD, value: result.accumulator});\r\n\t\t\t\t\tresult.data = Token.TYPE_OPERATOR_ADD;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase Token.TYPE_OPERATOR_MEASURE:\r\n\t\t\t\t\tif(result.data === Token.TYPE_WHITESPACE)\r\n\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected space before measure operator (\"${state.current.name}\") at column ${state.current.position}`));\r\n\t\t\t\t\tif(result.data === Token.TYPE_NUMBER)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(this.debug)\r\n\t\t\t\t\t\t\tconsole.log(\"*\", state.current);\r\n\t\t\t\t\t\tresult.stack.push({operation: ExpressionParser.#OPERATION_MULTIPLY, value: result.accumulator});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(type === Value.TYPE_UNIT)\r\n\t\t\t\t\t\tthrow(new SyntaxError(`The unit type is incompatible with the return value of a segment measurement`));\r\n\t\t\t\t\tif(type === Value.TYPE_FLAG)\r\n\t\t\t\t\t\tthrow(new SyntaxError(`The flag type is incompatible with the return value of a segment measurement`));\r\n\t\t\t\t\tthis.stream.getNext();\r\n\t\t\t\t\tif(this.stream.getCurrent().type === Token.TYPE_WHITESPACE)\r\n\t\t\t\t\t\tthis.stream.getNext();\r\n\t\t\t\t\tif(this.stream.getCurrent().type !== Token.TYPE_IDENTIFIER)\r\n\t\t\t\t\t\tthrow(new SyntaxError(`Expected identifier at ${this.stream.getCurrent().position}, found \"${this.stream.getCurrent().name}\"`))\r\n\t\t\t\t\tlet expResult = Value.getEmptyResult();\r\n\t\t\t\t\texpResult.x = position.x;\r\n\t\t\t\t\texpResult.y = position.y;\r\n\t\t\t\t\texpResult.arity = [];\r\n\t\t\t\t\tnew ExpressionParser(this.stream).parseInvocation(context, expResult, argumentList);\r\n\t\t\t\t\tresult.data = Token.TYPE_NUMBER;\r\n\t\t\t\t\tswitch(type)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase Value.TYPE_X:\r\n\t\t\t\t\t\t\tresult.accumulator = expResult.x.subtract(position.x);\r\n\t\t\t\t\t\t\tconsole.log(\"RETURNING X\", result.accumulator.toString());\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase Value.TYPE_Y:\r\n\t\t\t\t\t\t\tresult.accumulator = expResult.y.subtract(position.y);\r\n\t\t\t\t\t\t\tconsole.log(\"RETURNING Y\", result.accumulator.toString());\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase Value.TYPE_THETA:\r\n\t\t\t\t\t\t\tresult.accumulator = (new BigDecimal(Math.atan2(expResult.x.subtract(position.x).toNumber(), expResult.y.subtract(position.y).toNumber()))).multiplyBy(180).divideBy(BigDecimal.PI);\r\n\t\t\t\t\t\t\tconsole.log(\"RETURNING THETA\", result.accumulator.toString());\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(this.stream.getCurrent().type === Token.TYPE_WHITESPACE)\r\n\t\t\t\t\t\tthis.stream.getNext();\r\n\t\t\t\t\tstate.current = this.stream.getCurrent();\r\n\t\t\t\t\tif(state.current.type !== Token.TYPE_OPERATOR_MEASURE)\r\n\t\t\t\t\t\tthrow(new SyntaxError(`Expected measurement operator, found \"${state.current.name}`));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase Token.TYPE_BRACKET:\r\n\t\t\t\t\tif(this.debug)\r\n\t\t\t\t\t\tconsole.log(state.current.value ? \"(\" : \")\", state.current, result.counter, context.depth);\r\n\t\t\t\t\tif(state.current.value)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(result.data === Token.TYPE_WHITESPACE)\r\n\t\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected token \"${state.current.name}\" at column ${state.current.position}`));\r\n\t\t\t\t\t\tresult.counter++;\r\n\t\t\t\t\t\tif(result.data === Token.TYPE_NUMBER)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(this.debug)\r\n\t\t\t\t\t\t\t\tconsole.log(\"*\", state.current);\r\n\t\t\t\t\t\t\tresult.stack.push({operation: ExpressionParser.#OPERATION_MULTIPLY, value: result.accumulator});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tresult.accumulator = new BigDecimal(0);\r\n\t\t\t\t\t\tresult.stack.push({operation: ExpressionParser.#OPERATION_EVALUATE});\r\n\t\t\t\t\t\tresult.data = Token.TYPE_BRACKET;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(!insideArgumentList && result.counter === context.depth)\r\n\t\t\t\t\t\t\tthrow(new SyntaxError(`Mismatched bracket at column ${state.current.position}`));\r\n\t\t\t\t\t\tif(result.data !== Token.TYPE_NUMBER)\r\n\t\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected bracket at column ${state.current.position}`));\r\n\t\t\t\t\t\tExpressionParser.#unwind(result, ExpressionParser.#OPERATION_EVALUATE);\r\n\t\t\t\t\t\tresult.stack.pop();\r\n\t\t\t\t\t\tresult.data = Token.TYPE_NUMBER;\r\n\t\t\t\t\t\tif(insideArgumentList)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tstate.reading = false;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tresult.counter--;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase Token.TYPE_IDENTIFIER:\r\n\t\t\t\t\tif(result.data === Token.TYPE_WHITESPACE)\r\n\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected space-delimited value \"${state.current.name}\" at column ${state.current.position}`));\r\n\t\t\t\t\tif(state.current.name in argumentList || state.current.name in context.unit)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(result.data === Token.TYPE_NUMBER)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(this.debug)\r\n\t\t\t\t\t\t\t\tconsole.log(\"*\", state.current);\r\n\t\t\t\t\t\t\tresult.stack.push({operation: ExpressionParser.#OPERATION_MULTIPLY, value: result.accumulator});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(this.debug)\r\n\t\t\t\t\t\t\tconsole.log(\"Unit\", state.current);\r\n\t\t\t\t\t\tresult.accumulator = argumentList[state.current.name] ?? context.unit[state.current.name];\r\n\t\t\t\t\t\tresult.data = Token.TYPE_NUMBER;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tthrow(new ReferenceError(`Reference to undefined unit \"${state.current.name}\" at column ${state.current.position}.`));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase Token.TYPE_DELIMITER:\r\n\t\t\t\t\tif(result.counter)\r\n\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected delimiter \"${state.current.name}\" in expression at column ${state.current.position}.`));\r\n\t\t\t\tcase Token.TYPE_WHITESPACE:\r\n\t\t\t\t\tif(result.counter || result.data === 0) // TODO\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(result.data === Token.TYPE_NUMBER)\r\n\t\t\t\t\t\t\tresult.data = Token.TYPE_WHITESPACE;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\tcase Token.TYPE_END:\r\n\t\t\t\t\tif(result.counter > context.depth)\r\n\t\t\t\t\t\tthrow(new SyntaxError(`Missing closing bracket(s) at end of segment (nesting depth = ${result.counter - context.depth})`));\r\n\t\t\t\t\tstate.reading = false;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow(new SyntaxError(`Unexpected token \"${state.current.name}\" at column ${state.current.position}`));\r\n\t\t\t}\r\n\t\t\tstate.current = this.stream.getNext();\r\n\t\t}\r\n\t\tExpressionParser.#unwind(result, ExpressionParser.#OPERATION_SUBTRACT);\r\n\t\tExpressionParser.#unwind(result, 0);\r\n\r\n\t\treturn(result);\r\n\t}\r\n\r\n\tparseInvocation(context, result, argumentList)\r\n\t{\r\n\t\tlet state;\r\n\t\tlet segment;\r\n\t\tlet inner;\r\n\t\tlet name;\r\n\t\tlet index;\r\n\t\tlet expResult;\r\n\t\tlet type;\r\n\t\r\n\t\tstate =\r\n\t\t{\r\n\t\t\tcurrent: this.stream.getCurrent(),\r\n\t\t\treading: true,\r\n\t\t\thasRotate: false,\r\n\t\t\thasCount: false,\r\n\t\t\thasArgumentList: false,\r\n\t\t\trotate: false,\r\n\t\t\tcount: false,\r\n\t\t\targumentList: {},\r\n\t\t\tdelimited: false\r\n\t\t};\r\n\t\r\n\t\tif(state.current.type === Token.TYPE_NUMBER)\r\n\t\t{\r\n\t\t\tstate.count = state.current.value.toNumber();\r\n\t\t\tstate.hasCount = true;\r\n\t\t\tstate.current = this.stream.getNext();\r\n\t\t}\r\n\t\telse\r\n\t\t\tstate.count = 1;\r\n\t\tstate.rotate = new BigDecimal(0);\r\n\t\tname = state.current.name;\r\n\t\tif(result.stack.indexOf(name) === -1)\r\n\t\t{\r\n\t\t\tif(!(name in context.segment))\r\n\t\t\t\tthrow(new ReferenceError(`Reference to undefined section \"${name}\" at ${state.current.position}`));\r\n\t\t\tsegment = context.segment[name];\r\n\t\t\tstate.current = this.stream.getNext();\r\n\t\t\twhile(state.reading === true && state.current)\r\n\t\t\t{\r\n\t\t\t\tswitch(state.current.type)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase Token.TYPE_OPERATOR_ROTATE:\r\n\t\t\t\t\t\tif(state.hasRotate)\r\n\t\t\t\t\t\t\tthrow(new Error(`Encountered rotation operator, but segment \"${name}\" rotation is already specified (${state.rotate} degrees)`));\r\n\t\t\t\t\t\tthis.stream.getNext();\r\n\t\t\t\t\t\texpResult = new ExpressionParser(this.stream).parse(context, 0, argumentList, false, {x: result.x, y: result.y}, Value.TYPE_THETA);\r\n\t\t\t\t\t\tstate.rotate = expResult.accumulator;\r\n\t\t\t\t\t\tstate.current = this.stream.getCurrent();\r\n\t\t\t\t\t\tstate.hasRotate = true;\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\tcase Token.TYPE_BRACKET:\r\n\t\t\t\t\t\tif(!state.hasArgumentList)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(state.current.value)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tstate.current = this.stream.getNext();\r\n\t\t\t\t\t\t\t\twhile(!state.hasArgumentList)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tswitch(state.current.type)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_BRACKET:\r\n\t\t\t\t\t\t\t\t\t\t\tif(state.current.value)\r\n\t\t\t\t\t\t\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected token \"${state.current.name}\" at column ${state.current.position}`));\r\n\t\t\t\t\t\t\t\t\t\t\tstate.hasArgumentList = true;\r\n\t\t\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_IDENTIFIER:\r\n\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_OPERATOR_ROTATE:\r\n\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_OPERATOR_REPEAT:\r\n\t\t\t\t\t\t\t\t\t\t\tstate.delimited = false;\r\n\t\t\t\t\t\t\t\t\t\t\tname = state.current.name;\r\n\t\t\t\t\t\t\t\t\t\t\ttype = state.current.type;\r\n\t\t\t\t\t\t\t\t\t\t\tswitch(type)\r\n\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_IDENTIFIER:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(context.segment[name])\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthrow(new ReferenceError(`Argument \"${name}\" is already defined as a segment`));\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_OPERATOR_ROTATE:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_OPERATOR_REPEAT:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(state.hasCount)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthrow(new ReferenceError(`Execution count is already defined for this invocation`));\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tif(this.stream.peekNext().type === Token.TYPE_WHITESPACE)\r\n\t\t\t\t\t\t\t\t\t\t\t\tstate.current = this.stream.getNext();\r\n\t\t\t\t\t\t\t\t\t\t\tstate.current = this.stream.getNext();\r\n\t\t\t\t\t\t\t\t\t\t\tif(state.current.type === Token.TYPE_END)\r\n\t\t\t\t\t\t\t\t\t\t\t\tthrow(new Error(`Unexpected end of segment at ${state.current.position}`));\r\n\t\t\t\t\t\t\t\t\t\t\tif(state.current.type !== Token.TYPE_OPERATOR_ASSIGN)\r\n\t\t\t\t\t\t\t\t\t\t\t\tthrow(new SyntaxError(`Expected assignment operator after argument name, but found \"${state.current.name}\"`));\r\n\t\t\t\t\t\t\t\t\t\t\tstate.current = this.stream.getNext();\r\n\t\t\t\t\t\t\t\t\t\t\texpResult = new ExpressionParser(this.stream).parse(context, 0, argumentList, true, {x: result.x, y: result.y},\r\n\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t[Token.TYPE_IDENTIFIER]: Value.TYPE_UNIT,\r\n\t\t\t\t\t\t\t\t\t\t\t\t[Token.TYPE_OPERATOR_ROTATE]: Value.TYPE_THETA,\r\n\t\t\t\t\t\t\t\t\t\t\t\t[Token.TYPE_OPERATOR_REPEAT]: Value.TYPE_UNIT,\r\n\t\t\t\t\t\t\t\t\t\t\t}[type]);\r\n\t\t\t\t\t\t\t\t\t\t\tswitch(type)\r\n\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_IDENTIFIER:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tstate.argumentList[name] = expResult.accumulator;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_OPERATOR_ROTATE:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tstate.rotate = expResult.accumulator;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tstate.hasRotate = true;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_OPERATOR_REPEAT:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tstate.count = expResult.accumulator.toNumber();\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tstate.hasCount = true;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tstate.current = this.stream.getCurrent();\r\n\t\t\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_DELIMITER:\r\n\t\t\t\t\t\t\t\t\t\t\tif(state.delimited)\r\n\t\t\t\t\t\t\t\t\t\t\t\tthrow(new Error(`Unexpected delimiter at column ${state.current.position}`));\r\n\t\t\t\t\t\t\t\t\t\t\tstate.delimited = true;\r\n\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_WHITESPACE:\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_END:\r\n\t\t\t\t\t\t\t\t\t\t\tthrow(new Error(`Unexpected end of segment at ${state.current.position}`));\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected token \"${state.current.name}\" at column ${state.current.position}`));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tstate.current = this.stream.getNext();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected token \"${state.current.name}\" at column ${state.current.position}`));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tstate.reading = false;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase Token.TYPE_WHITESPACE:\r\n\t\t\t\t\t\tif(this.stream.peekNext().type === Token.TYPE_OPERATOR_ROTATE)\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tstate.reading = false;\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tstate.current = this.stream.getNext();\r\n\t\t\t}\r\n\t\t\tif(state.count !== parseInt(state.count))\r\n\t\t\t\tthrow(new Error(`The execution count (${state.count}) for segment \"${name}\" must be an integer.`));\r\n\t\t\tif(state.count < 1)\r\n\t\t\t\tthrow(new Error(`The execution count (${state.count}) for segment \"${name}\" can't be less than 1.`));\r\n\t\t\tfor(index = 1; index <= state.count; index++)\r\n\t\t\t{\r\n\t\t\t\tinner = new PathParser(new TokenStream(segment));\r\n\t\t\t\tinner.parse(context, result, state.rotate, index, state.argumentList);\r\n\t\t\t\tresult.stack.pop();\r\n\t\t\t}\r\n\t\t\tstate.reading = false;\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow(new ReferenceError(`Segment ${state.current.name} cannot call itself`));\r\n\t\r\n\t\treturn;\r\n\t}\r\n}\r\n","import ExpressionParser from \"./ExpressionParser\";\r\nimport Token from \"./Token\";\r\nimport TokenStream from \"./TokenStream\";\r\nimport BigDecimal from \"./BigDecimal\";\r\nimport Value from \"./Value\";\r\n\r\nexport default class PathParser\r\n{\r\n\tconstructor(stream)\r\n\t{\r\n\t\tthis.stream = stream;\r\n\t}\r\n\r\n\tstatic resultToString(result, precision = BigDecimal.LIMIT_PRECISION)\r\n\t{\r\n\t\treturn(result.sequence.map(i => \"\" + i[0].toString() + (i.length > 1 ? \" \" + i.slice(1).join(\",\") : \"\")).join(\" \"));\r\n\t}\r\n\r\n\tstatic #rotate(x0, y0, x1, y1, angle)\r\n\t{\r\n\t\tvar cosine;\r\n\t\tvar sine;\r\n\r\n\t\tx1 = x1.subtract(x0);\r\n\t\ty1 = y1.subtract(y0);\r\n\t\tangle = (angle.toNumber() % 360) * Math.PI / 180;\r\n\t\tcosine = Math.cos(angle);\r\n\t\tsine = Math.sin(angle);\r\n\t\tif(Math.abs(cosine - sine) < Number.EPSILON * 2)\r\n\t\t\tsine = cosine;\r\n\t\telse\r\n\t\t\tif(Math.abs(cosine + sine) < Number.EPSILON * 2)\r\n\t\t\t\tcosine = sine;\r\n\t\tif(Math.abs(cosine) < Number.EPSILON)\r\n\t\t\tcosine = 0;\r\n\t\tif(Math.abs(sine) < Number.EPSILON)\r\n\t\t\tsine = 0;\r\n\t\r\n\t\treturn(\r\n\t\t{\r\n\t\t\tx: x0.add(x1.multiplyBy(cosine)).subtract(y1.multiplyBy(sine)),\r\n\t\t\ty: y0.add(y1.multiplyBy(cosine)).add(x1.multiplyBy(sine))\r\n\t\t});\r\n\t};\r\n\r\n\tstatic #applyRotation(context, top, result, angle)\r\n\t{\r\n\t\tlet origin;\r\n\t\tlet point;\r\n\t\tlet command;\r\n\t\tlet relative;\r\n\t\tlet point1;\r\n\t\tlet point2;\r\n\t\tlet last;\r\n\t\tlet lastAngle;\r\n\r\n\t\tcommand = top[0].toLowerCase();\r\n\t\trelative = top[0].toLowerCase() === top[0];\r\n\t\torigin =\r\n\t\t{\r\n\t\t\tx: relative ? new BigDecimal(0) : result.x,\r\n\t\t\ty: relative ? new BigDecimal(0) : result.y\r\n\t\t}\r\n\t\tif(result.pending)\r\n\t\t\tthrow(new SyntaxError(`Too few arguments for command ${top[0]}`));\r\n\t\tif(result.fixNext)\r\n\t\t\tthrow(new SyntaxError(`Dangling fix operator after command ${top[0]}`));\r\n\t\t// TODO: Eventually, all values will need to be rounded just beyond this point\r\n\t\tswitch(command)\r\n\t\t{\r\n\t\t\tcase \"a\":\r\n\t\t\t\tpoint =\r\n\t\t\t\t{\r\n\t\t\t\t\tx: top[6].value,\r\n\t\t\t\t\ty: top[7].value\r\n\t\t\t\t};\r\n\t\t\t\tif(angle)\r\n\t\t\t\t\tpoint = PathParser.#rotate(origin.x, origin.y, point.x, point.y, angle);\r\n\t\t\t\tif(top[6].fixed)\r\n\t\t\t\t\tpoint.x = relative ? top[6].value.subtract(result.x) : top[6].value;\r\n\t\t\t\tif(top[7].fixed)\r\n\t\t\t\t\tpoint.y = relative ? top[7].value.subtract(result.y) : top[7].value;\r\n\t\t\t\ttop =\r\n\t\t\t\t[\r\n\t\t\t\t\ttop[0],\r\n\t\t\t\t\ttop[1].value,\r\n\t\t\t\t\ttop[2].value,\r\n\t\t\t\t\ttop[3].fixed ? top[3].value : top[3].value.add(angle),\r\n\t\t\t\t\ttop[4].value,\r\n\t\t\t\t\ttop[5].value,\r\n\t\t\t\t\tpoint.x,\r\n\t\t\t\t\tpoint.y\r\n\t\t\t\t];\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"c\":\r\n\t\t\t\tpoint1 =\r\n\t\t\t\t{\r\n\t\t\t\t\tx: top[1].value,\r\n\t\t\t\t\ty: top[2].value\r\n\t\t\t\t};\r\n\t\t\t\tpoint2 =\r\n\t\t\t\t{\r\n\t\t\t\t\tx: top[3].value,\r\n\t\t\t\t\ty: top[4].value\r\n\t\t\t\t};\r\n\t\t\t\tpoint =\r\n\t\t\t\t{\r\n\t\t\t\t\tx: top[5].value,\r\n\t\t\t\t\ty: top[6].value\r\n\t\t\t\t};\r\n\t\t\t\tif(angle)\r\n\t\t\t\t{\r\n\t\t\t\t\tpoint1 = PathParser.#rotate(origin.x, origin.y, point1.x, point1.y, angle);\r\n\t\t\t\t\tpoint2 = PathParser.#rotate(origin.x, origin.y, point2.x, point2.y, angle);\r\n\t\t\t\t\tpoint = PathParser.#rotate(origin.x, origin.y, point.x, point.y, angle);\r\n\t\t\t\t}\r\n\t\t\t\tif(top[5].fixed)\r\n\t\t\t\t\tpoint.x = relative ? top[5].value.subtract(result.x) : top[5].value;\r\n\t\t\t\tif(top[6].fixed)\r\n\t\t\t\t\tpoint.y = relative ? top[6].value.subtract(result.y) : top[6].value;\r\n\t\t\t\ttop =\r\n\t\t\t\t[\r\n\t\t\t\t\ttop[0],\r\n\t\t\t\t\ttop[1].fixed ? (relative ? top[1].value.subtract(result.x) : top[1].value) : point1.x,\r\n\t\t\t\t\ttop[2].fixed ? (relative ? top[2].value.subtract(result.y) : top[2].value) : point1.y,\r\n\t\t\t\t\ttop[3].fixed ? (relative ? top[3].value.subtract(result.x) : top[3].value) : point2.x,\r\n\t\t\t\t\ttop[4].fixed ? (relative ? top[4].value.subtract(result.y) : top[4].value) : point2.y,\r\n\t\t\t\t\tpoint.x,\r\n\t\t\t\t\tpoint.y\r\n\t\t\t\t];\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"s\":\r\n\t\t\tcase \"q\":\r\n\t\t\t\tpoint1 =\r\n\t\t\t\t{\r\n\t\t\t\t\tx: top[1].value,\r\n\t\t\t\t\ty: top[2].value\r\n\t\t\t\t};\r\n\t\t\t\tpoint =\r\n\t\t\t\t{\r\n\t\t\t\t\tx: top[3].value,\r\n\t\t\t\t\ty: top[4].value\r\n\t\t\t\t};\r\n\t\t\t\tif(angle)\r\n\t\t\t\t{\r\n\t\t\t\t\tpoint1 = PathParser.#rotate(origin.x, origin.y, point1.x, point1.y, angle);\r\n\t\t\t\t\tpoint = PathParser.#rotate(origin.x, origin.y, point.x, point.y, angle);\r\n\t\t\t\t}\r\n\t\t\t\tif(top[3].fixed)\r\n\t\t\t\t\tpoint.x = relative ? top[3].value.subtract(result.x) : top[3].value;\r\n\t\t\t\tif(top[4].fixed)\r\n\t\t\t\t\tpoint.y = relative ? top[4].value.subtract(result.y) : top[4].value;\r\n\t\t\t\ttop =\r\n\t\t\t\t[\r\n\t\t\t\t\ttop[0],\r\n\t\t\t\t\tpoint1.x,\r\n\t\t\t\t\tpoint1.y,\r\n\t\t\t\t\tpoint.x,\r\n\t\t\t\t\tpoint.y\r\n\t\t\t\t];\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"l\":\r\n\t\t\tcase \"h\":\r\n\t\t\tcase \"v\":\r\n\t\t\t\tpoint =\r\n\t\t\t\t{\r\n\t\t\t\t\tx: command === \"v\" ? new BigDecimal(origin.x) : top[1].value,\r\n\t\t\t\t\ty: command === \"h\" ? new BigDecimal(origin.y) : (command === \"v\" ? top[1].value : top[2].value)\r\n\t\t\t\t};\r\n\t\t\t\tif(angle)\r\n\t\t\t\t\tpoint = PathParser.#rotate(origin.x, origin.y, point.x, point.y, angle);\r\n\t\t\t\tlastAngle = Math.atan2(point.y.subtract(origin.y).toNumber(), point.x.subtract(origin.x).toNumber()) * 180 / Math.PI;\r\n\t\t\t\tif(top[1].fixed)\r\n\t\t\t\t\tif(command === \"v\")\r\n\t\t\t\t\t\tpoint.y = relative ? top[1].value.subtract(result.y) : top[1].value;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tpoint.x = relative ? top[1].value.subtract(result.x) : top[1].value;\r\n\t\t\t\tif(command === \"l\" && top[2].fixed)\r\n\t\t\t\t\tpoint.y = relative ? top[2].value.subtract(result.y) : top[2].value;\r\n\t\t\t\ttop = point.x.equals(origin.x)\r\n\t\t\t\t\t?\r\n\t\t\t\t\t(\r\n\t\t\t\t\t\tpoint.y.equals(origin.y)\r\n\t\t\t\t\t\t?\r\n\t\t\t\t\t\t\tnull\r\n\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t[\"v\", point.y]\r\n\t\t\t\t\t)\r\n\t\t\t\t\t:\r\n\t\t\t\t\t(\r\n\t\t\t\t\t\tpoint.y.equals(origin.y)\r\n\t\t\t\t\t\t?\r\n\t\t\t\t\t\t\t[\"h\", point.x]\r\n\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t[\"l\", point.x, point.y]\r\n\t\t\t\t\t);\r\n\t\t\t\tif(top)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(context.optimisation.path.combineCommands && result.sequence.length > 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlast = result.sequence[result.sequence.length - 1];\r\n\t\t\t\t\t\tif(last[0].toLowerCase() === top[0].toLowerCase() && lastAngle === result.lastAngle)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(relative)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(last.length > 2)\r\n\t\t\t\t\t\t\t\t\tlast[2] = last[2].add(top[2]);\r\n\t\t\t\t\t\t\t\tlast[1] = last[1].add(top[1]);\r\n\t\t\t\t\t\t\t\ttop = null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tresult.sequnce.pop();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tresult.lastAngle = lastAngle;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"m\":\r\n\t\t\tcase \"t\":\r\n\t\t\t\tpoint =\r\n\t\t\t\t{\r\n\t\t\t\t\tx: top[1].value,\r\n\t\t\t\t\ty: top[2].value\r\n\t\t\t\t}\r\n\t\t\t\tif(angle)\r\n\t\t\t\t\tpoint = PathParser.#rotate(origin.x, origin.y, point.x, point.y, angle);\r\n\t\t\t\tif(top[1].fixed)\r\n\t\t\t\t\tpoint.x = relative ? top[1].value.subtract(result.x) : top[1].value;\r\n\t\t\t\tif(top[2].fixed)\r\n\t\t\t\t\tpoint.y = relative ? top[2].value.subtract(result.y) : top[2].value;\r\n\t\t\t\ttop = [top[0], point.x, point.y];\r\n\t\t\t\tif(context.optimisation.path.combineCommands && command === \"m\" && result.sequence.length > 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tlast = result.sequence[result.sequence.length - 1];\r\n\t\t\t\t\tif(last[0].toLowerCase() === \"m\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(relative)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlast[1] = last[1].add(top[1]);\r\n\t\t\t\t\t\t\tlast[2] = last[2].add(top[2]);\r\n\t\t\t\t\t\t\ttop = null;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tresult.sequnce.pop();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"z\":\r\n\t\t\t\ttop = [\"z\"];\r\n\t\t\t\tresult.x = new BigDecimal(result.originX);\r\n\t\t\t\tresult.y = new BigDecimal(result.originY);\r\n\t\t\t\tresult.lastAngle = null;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tif(command !== \"z\")\r\n\t\t{\r\n\t\t\tresult.x = relative ? result.x.add(point.x) : point.x;\r\n\t\t\tresult.y = relative ? result.y.add(point.y) : point.y;\r\n\t\t}\r\n\t\tif(command === \"m\")\r\n\t\t{\r\n\t\t\tresult.originX = new BigDecimal(result.x);\r\n\t\t\tresult.originY = new BigDecimal(result.y);\r\n\t\t}\r\n\t\tif(top)\r\n\t\t{\r\n\t\t\tif(!relative)\r\n\t\t\t\ttop[0] = top[0].toUpperCase();\r\n\t\t\t/* TODO: Primitive optimiser someday? */\r\n\t\t\tresult.sequence.push(top);\r\n\t\t}\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\tparseList(context, result = Value.getEmptyResult(), limit)\r\n\t{\r\n\t\tlet state;\r\n\t\tlet top;\r\n\t\tlet invoked;\r\n\t\tlet next;\r\n\r\n\t\tstate =\r\n\t\t{\r\n\t\t\tcurrent: this.stream.getCurrent(),\r\n\t\t\treading: true,\r\n\t\t\tindex: 0\r\n\t\t};\r\n\t\ttop = [];\r\n\r\n\t\twhile(state.reading && state.current && state.index < limit)\r\n\t\t{\r\n\t\t\tswitch(state.current.type)\r\n\t\t\t{\r\n\t\t\t\tcase Token.TYPE_WHITESPACE:\r\n\t\t\t\tcase Token.TYPE_DELIMITER:\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase Token.TYPE_END:\r\n\t\t\t\t\tstate.reading = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tlet expResult = new ExpressionParser(this.stream).parse(context, 0, [], false, {x: result.x, y: result.y}, Value.TYPE_UNIT);\r\n\t\t\t\t\tresult.sequence.push([expResult.accumulator]);\r\n\t\t\t\t\tresult.index++;\r\n\t\t\t\t\tstate.current = this.stream.getCurrent();\r\n\t\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tstate.current = this.stream.getNext();\r\n\t\t}\r\n\r\n\t\treturn(result);\r\n\t}\r\n\r\n\tparse(context, result = Value.getEmptyResult(), rotate = new BigDecimal(0), index = 1, argumentList)\r\n\t{\r\n\t\tlet state;\r\n\t\tlet top;\r\n\t\tlet invoked;\r\n\t\tlet next;\r\n\r\n\t\tstate =\r\n\t\t{\r\n\t\t\tcurrent: this.stream.getCurrent(),\r\n\t\t\treading: true\r\n\t\t};\r\n\r\n\t\twhile(state.reading && state.current)\r\n\t\t{\r\n\t\t\tswitch(state.current.type)\r\n\t\t\t{\r\n\t\t\t\tcase Token.TYPE_COMMAND:\r\n\t\t\t\t\tif(result.arity === null && state.current.name.toLowerCase() !== \"m\")\r\n\t\t\t\t\t\tthrow(new SyntaxError(\"Paths must begin with a Move To command\"));\r\n\t\t\t\t\tif(top)\r\n\t\t\t\t\t\tPathParser.#applyRotation(context, top, result, rotate);\r\n\t\t\t\t\tresult.arity = state.current.value;\r\n\t\t\t\t\tresult.pending = result.arity.length;\r\n\t\t\t\t\ttop = [state.current.name];\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase Token.TYPE_OPERATOR_FIX:\r\n\t\t\t\t\tresult.fixNext = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase Token.TYPE_WHITESPACE:\r\n\t\t\t\tcase Token.TYPE_DELIMITER:\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase Token.TYPE_END:\r\n\t\t\t\t\tif(top)\r\n\t\t\t\t\t\tPathParser.#applyRotation(context, top, result, rotate);\r\n\t\t\t\t\tstate.reading = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase Token.TYPE_IDENTIFIER:\r\n\t\t\t\tcase Token.TYPE_NUMBER:\r\n\t\t\t\t\tif(state.current.type === Token.TYPE_NUMBER)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tnext = this.stream.peekNext();\r\n\t\t\t\t\t\tinvoked = next.type === Token.TYPE_IDENTIFIER && context.segment[next.name];\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tinvoked = context.segment[state.current.name];\r\n\t\t\t\t\tif(invoked)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(top)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tPathParser.#applyRotation(context, top, result, rotate);\r\n\t\t\t\t\t\t\ttop = null;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tnew ExpressionParser(this.stream).parseInvocation(context, result, argumentList);\r\n\t\t\t\t\t\tstate.current = this.stream.getCurrent();\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tif(!top)\r\n\t\t\t\t\t\tthrow(new Error(`Expected command, but found \"${state.current.name}\"`));\r\n\t\t\t\t\tif(!result.pending)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tPathParser.#applyRotation(context, top, result, rotate);\r\n\t\t\t\t\t\tresult.pending = result.arity.length;\r\n\t\t\t\t\t\ttop = [top[0]];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!result.pending)\r\n\t\t\t\t\t\tthrow(new SyntaxError(`Too many parameters supplied to command \"${top[0]}\"`));;\r\n\t\t\t\t\tif(top[0].toLowerCase() === \"a\" && (result.pending === 4 || result.pending === 3) && state.current.type === Token.TYPE_NUMBER && state.current.name.length > 1 && [\"0\", \"1\"].indexOf(state.current.name.substr(0, 1)) !== -1)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttop.push({fixed: result.fixNext, value: new BigDecimal(state.current.name.substr(0, 1))});\r\n\t\t\t\t\t\tstate.current.name = state.current.name.substr(1);\r\n\t\t\t\t\t\tstate.current.value = new BigDecimal(state.current.name);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet expResult = new ExpressionParser(this.stream).parse(context, 0, argumentList, false, {x: result.x, y: result.y}, result.arity[result.arity.length - result.pending]);\r\n\t\t\t\t\t\ttop.push({fixed: result.fixNext, value: expResult.accumulator});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tresult.fixNext = false;\r\n\t\t\t\t\tresult.pending--;\r\n\t\t\t\t\tstate.current = this.stream.getCurrent();\r\n\t\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tstate.current = this.stream.getNext();\r\n\t\t}\r\n\r\n\t\treturn(result);\r\n\t}\r\n}\r\n","import ExpressionParser from \"./ExpressionParser\";\r\nimport TokenStream from \"./TokenStream\";\r\nimport PathParser from \"./PathParser\";\r\nimport BigDecimal from \"./BigDecimal\";\r\nimport Value from \"./Value\";\r\n\r\nexport default class Transformer\r\n{\r\n\tconstructor(text)\r\n\t{\r\n\t\tthis.document = Transformer.#parseXML(text);\r\n\t}\r\n\r\n\tstatic #parseXML(text)\r\n\t{\r\n\t\treturn((new (typeof(DOMParser) === \"undefined\" ? require('xmldom').DOMParser : DOMParser)()).parseFromString(text, \"text/xml\"));\r\n\t}\r\n\r\n\t#parseUnitList(context, list)\r\n\t{\r\n\t\tlet stack = [];\r\n\t\tlet item;\r\n\r\n\t\twhile(stack.length || list.length)\r\n\t\t{\r\n\t\t\tif(stack.length)\r\n\t\t\t\titem = stack.pop();\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\titem = list.shift();\r\n\t\t\t\titem.parentNode.removeChild(item);\r\n\t\t\t}\r\n\t\t\tlet parser = new ExpressionParser(new TokenStream(item.getAttribute(\"value\")));\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tlet result = parser.parse(context, 1, {}, false, null, Value.TYPE_UNIT);\r\n\t\t\t\tlet id = item.getAttribute(\"id\");\r\n\t\t\t\tif(id in context.unit)\r\n\t\t\t\t\tthrow(new Error(`Duplicate unit ID: \"${id}\"`));\r\n\t\t\t\tcontext.unit[id] = result.accumulator;\r\n\t\t\t}\r\n\t\t\tcatch(except)\r\n\t\t\t{\r\n\t\t\t\tif(except instanceof ReferenceError)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(stack.filter(i => i.getAttribute(\"id\") === parser.stream.getCurrent().name).length === 1)\r\n\t\t\t\t\t\tthrow(new ReferenceError(`Circular reference to \"${parser.stream.getCurrent().name}\"`));\r\n\t\t\t\t\tstack.push(item);\r\n\t\t\t\t\tlet next = list.filter(i => i.getAttribute(\"id\") === parser.stream.getCurrent().name);\r\n\t\t\t\t\tif(next.length > 1)\r\n\t\t\t\t\t\tthrow(new ReferenceError(`Unable to resolve expression \"${item.getAttribute(\"value\")}\". Duplicate ID \"${parser.stream.getCurrent().name}\".`));\r\n\t\t\t\t\tif(next.length === 0)\r\n\t\t\t\t\t\tthrow(new ReferenceError(`Unable to resolve expression \"${item.getAttribute(\"value\")}\". \"${parser.stream.getCurrent().name}\" is undefined.`));\r\n\t\t\t\t\tstack.push(next[0]);\r\n\t\t\t\t\tnext[0].parentNode.removeChild(next[0]);\r\n\t\t\t\t\tlist = list.slice(0, list.indexOf(next[0])).concat(list.slice(list.indexOf(next[0]) + 1));\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\tthrow(new Error(\"Couldn't parse item, \" + except.message, {cause: except}));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t#parseSegmentList(context, list)\r\n\t{\r\n\t\tlist.forEach(i => i.parentNode.removeChild(i));\r\n\t\tcontext.segment = list.reduce((previous, current) =>\r\n\t\t{\r\n\t\t\tlet id = current.getAttribute(\"id\");\r\n\t\t\tif(id in previous)\r\n\t\t\t\tthrow(new Error(`Duplicate segment ID: \"${id}\"`));\r\n\t\t\tif(id in context.unit)\r\n\t\t\t\tthrow(new Error(`Segment ID: \"${id}\" already defined as a unit`));\r\n\t\t\tprevious[current.getAttribute(\"id\")] = current.getAttribute(\"d\");\r\n\r\n\t\t\treturn(previous);\r\n\t\t}, {});\r\n\t}\r\n\r\n\t#parseIncludeList(configuration)\r\n\t{\r\n\t\tlet list;\r\n\t\tlet seen = [];\r\n\r\n\t\tdo\r\n\t\t{\r\n\t\t\tlist = Array.from(this.document.getElementsByTagName(\"include\"));\r\n\t\t\tlist.forEach(item =>\r\n\t\t\t{\r\n\t\t\t\tlet href = item.getAttribute(\"href\");\r\n\t\t\t\tif(seen.indexOf(href) !== -1)\r\n\t\t\t\t\tthrow(new Error(`Circular include reference: ${href}`));\r\n\t\t\t\tseen.push(href);\r\n\t\t\t\thref = href.split(\"#\");\r\n\t\t\t\tlet filename = href[0];\r\n\t\t\t\tlet id = href.length > 1 ? href.slice(1).join(\"#\") : null;\r\n\t\t\t\tconst fs = require('fs');\r\n\t\t\t\tconst data = fs.readFileSync(configuration.base + filename, {encoding: \"utf-8\", flag: \"r\"});\r\n\t\t\t\tlet inner = Transformer.#parseXML(data);\r\n\t\t\t\tlet target;\r\n\t\t\t\tif(id !== null)\r\n\t\t\t\t{\r\n\t\t\t\t\ttarget = inner.getElementById(id);\r\n\t\t\t\t\tif(!target)\r\n\t\t\t\t\t\tthrow(new Error(`Failed to include file: ${filename}, ID: ${id}`));\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\ttarget = inner.documentElement;\r\n\t\t\t\t\tif(!target)\r\n\t\t\t\t\t\tthrow(new Error(`Failed to include file: ${filename}`));\r\n\t\t\t\t}\r\n\t\t\t\tif(target.nodeName.toLowerCase() === \"svg\")\r\n\t\t\t\t{\r\n\t\t\t\t\tlet child = target.firstChild;\r\n\t\t\t\t\twhile(child)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet add = child;\r\n\t\t\t\t\t\tchild = child.nextSibling;\r\n\t\t\t\t\t\titem.parentNode.insertBefore(add, item);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\titem.parentNode.insertBefore(target, item);\r\n\t\t\t\titem.parentNode.removeChild(item);\r\n\t\t\t});\r\n\t\t} while(list.length);\r\n\t}\r\n\r\n\ttransform(configuration)\r\n\t{\r\n\t\tlet context =\r\n\t\t{\r\n\t\t\tunit: {},\r\n\t\t\tdepth: 1,\r\n\t\t\toptimisation:\r\n\t\t\t{\r\n\t\t\t\tpath:\r\n\t\t\t\t{\r\n\t\t\t\t\tprecision: configuration.precision,\r\n\t\t\t\t\tcombineCommands: configuration.combinePathCommands /* Don't output h 20 h 20 */\r\n\t\t\t\t},\r\n\t\t\t\txml:\r\n\t\t\t\t{\r\n\t\t\t\t\tstripWhitespace: configuration.stripWhitespace === \"xml\" || configuration.stripWhitespace === \"all\",\r\n\t\t\t\t\tstripComments: configuration.stripComments\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\tthis.#parseIncludeList(configuration);\r\n\t\tthis.#parseUnitList(context, Array.from(this.document.getElementsByTagName(\"unit\")));\r\n\t\tfor(let item in configuration.unit)\r\n\t\t\tcontext.unit[item] = configuration.unit[item];\r\n\t\tthis.#parseSegmentList(context, Array.from(this.document.getElementsByTagName(\"segment\")));\r\n\t\tlet list = Array.from(this.document.getElementsByTagName(\"path\"));\r\n\t\tcontext.depth = 0;\r\n\t\twhile(list.length)\r\n\t\t{\r\n\t\t\tlet item = list.shift();\r\n\t\t\tlet parser = new PathParser(new TokenStream(item.getAttribute(\"d\")));\r\n\t\t\tlet pathResult = parser.parse(context);\r\n\t\t\titem.setAttribute(\"d\", PathParser.resultToString(pathResult, context.optimisation.path.precision))\r\n\t\t}\r\n\t\tlist = Array.from(this.document.getElementsByTagName(\"svg\"));\r\n\t\tcontext.depth = 0;\r\n\t\twhile(list.length)\r\n\t\t{\r\n\t\t\tlet item = list.shift();\r\n\t\t\tif(item.hasAttribute(\"viewBox\"))\r\n\t\t\t{\r\n\t\t\t\tlet parser = new PathParser(new TokenStream(item.getAttribute(\"viewBox\")));\r\n\t\t\t\tlet viewBoxResult = parser.parseList(context, Value.getEmptyResult(), 4);\r\n\t\t\t\titem.setAttribute(\"viewBox\", PathParser.resultToString(viewBoxResult, context.optimisation.path.precision));\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet stack = [];\r\n\t\tlet cursor = this.document.documentElement.firstChild;\r\n\t\tlet Node = {COMMENT_NODE: 8, TEXT_NODE: 3};\r\n\t\twhile(stack.length || cursor)\r\n\t\t{\r\n\t\t\tif(cursor.firstChild)\r\n\t\t\t\tstack.push(cursor.firstChild);\r\n\t\t\tlet target = cursor;\r\n\t\t\tif(cursor.nextSibling)\r\n\t\t\t\tcursor = cursor.nextSibling;\r\n\t\t\telse\r\n\t\t\t\tcursor = stack.pop();\r\n\t\t\tif(context.optimisation.xml.stripWhitespace && target.nodeType === Node.TEXT_NODE && target.nodeValue.replace(new RegExp(\"\\\\s+\", \"g\"), \"\").length === 0)\r\n\t\t\t\ttarget.parentNode.removeChild(target);\r\n\t\t\tif(context.optimisation.xml.stripComments && target.nodeType === Node.COMMENT_NODE)\r\n\t\t\t\ttarget.parentNode.removeChild(target);\r\n\t\t}\r\n\r\n\t\treturn((new (typeof(XMLSerializer) === \"undefined\" ? require(\"xmldom\").XMLSerializer : XMLSerializer)()).serializeToString(this.document.documentElement));\r\n\t}\r\n};\r\n","import Transformer from \"./class/Transformer\";\r\nimport PathParser from \"./class/PathParser\";\r\nimport BigDecimal from \"./class/BigDecimal\";\r\nimport * as fs from 'fs';\r\n\r\n/*\r\nexport function transform(text, configuration, require)\r\n{\r\n\tconsole.log(\"Transforming\"); \r\n\twindow.PathParser = PathParser;\r\n\twindow.BigDecimal = BigDecimal;\r\n\tvar tt = `\r\n\t<svg>\r\n\t\t<unit id=\"pp\" value=\"3n\" />\r\n\t\t<unit id=\"n\" value=\"2\" />\r\n\t\t<unit id=\"q\" value=\"3n + 4pp((3))\" />\r\n\t\t<segment id=\"kSegment\" d=\"l 20 0 \" />\r\n\t\t<segment id=\"kSegment2\" d=\"L 200,100\" />\r\n\t\t<segment id=\"kSegment3\" d=\"c 20,50 80,-50 100,0\" />\r\n\t\t<segment id=\"kSegment4\" d=\"a 50,60 30 1 0 100,0\" />\r\n\t\t<segment id=\"kSegment5\" d=\"l 100,20 l 100,-20 l @400,@400\" />\r\n\t\t<segment id=\"purple\" d=\"h 5j v 5j h 3n\" />\r\n\t\t<apath d=\"m 50,50n kSegment kSegment % 90 l -3.2.5 l-20-20 40 40 l 50 0 l 50 50\" />\r\n\t\t<apath d=\"M 100,100 kSegment2 L 100,100 kSegment2%45 L 300,100\" />\r\n\t\t<apath d=\"M 100,100 kSegment2%90 M 200,200 kSegment2%90\" />\r\n\t\t<apath d=\"M 100,100 kSegment3\" />\r\n\t\t<apath d=\"M 100,300 kSegment3%90\" />\r\n\t\t<apath d=\"M 100,100 kSegment4\" />\r\n\t\t<apath d=\"M 100,300 kSegment4%90\" />\r\n\t\t<apath d=\"M 100,100 kSegment5\" />\r\n\t\t<apath d=\"M 100,100 kSegment5%30\" />\r\n\t\t<apath d=\"M 100,100 m 30,30 3kSegment2()%45 3kSegment z\" />\r\n\t\t<apath d=\"M 100,100 purple(j=5 n=5 #=2)m(49) 50\" />\r\n\t\t<segment id=\"green\" d=\"h 50 v 50\" />\r\n\t\t<apath d=\"M 100,100 green%|green|\" />\r\n\t\t<path d=\"m 50,50 h 30 h 30 h 30\" />\r\n\t\t<include href=\"somefile.svg#element\" />\r\n\t</svg>`;\r\n\ttt = `<svg viewBox=\"0 0 300 300\">\r\n\t\t<path d=\"m 50,50 Q 50,100 100,100 Q 150,100 150,50 Q 150,0 100,0\" stroke=\"red\" strokewidth=\"3\" />\r\n\t\t<path d=\"m 50,75 Q 50,125 100,125 T 150,75 T 100,25\" fill=\"transparent\" stroke=\"red\" strokewidth=\"3\" />\r\n\t</svg>`;\r\n\treturn((new Transformer(tt)).transform());\r\n};\r\n*/\r\n\r\n(function() {\r\n\tlet parameter = process.argv.slice(2);\r\n\tlet valid = true;\r\n\tlet reading = true;\r\n\tlet whitespaceTypeList = [\"path\", \"xml\", \"all\"];\r\n\tlet configuration =\r\n\t{\r\n\t\tstripWhitespace: null,\r\n\t\tstripComments: false,\r\n\t\tcombinePathCommands: false,\r\n\t\tprecision: 3\r\n\t};\r\n\r\n\twhile(reading && valid && parameter[0].startsWith(\"--\"))\r\n\t\tswitch(parameter[0])\r\n\t\t{\r\n\t\t\tcase \"--precision\":\r\n\t\t\t\tconfiguration.precision = parseInt(parameter[1]);\r\n\t\t\t\tif(configuration.precision.toString() !== parameter[1] || isNaN(configuration.precision))\r\n\t\t\t\t{\r\n\t\t\t\t\tconsole.log(\"Invalid syntax for --precision switch\");\r\n\t\t\t\t\tvalid = false;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\tparameter = parameter.slice(2);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"--stripWhitespace\":\r\n\t\t\t\tconfiguration.stripWhitespace = parameter[1];\r\n\t\t\t\tif(whitespaceTypeList.indexOf(configuration.stripWhitespace) === -1)\r\n\t\t\t\t{\r\n\t\t\t\t\tconsole.log(\"Invalid syntax for --stripWhitespace switch\");\r\n\t\t\t\t\tvalid = false;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\tparameter = parameter.slice(2);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"--stripComments\":\r\n\t\t\t\tconfiguration.stripComments = true;\r\n\t\t\t\tparameter.shift();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"--combinePathCommands\":\r\n\t\t\t\tconfiguration.combinePathCommands = true;\r\n\t\t\t\tparameter.shift();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"--\":\r\n\t\t\t\tparameter.shift();\r\n\t\t\tdefault:\r\n\t\t\t\treading = false;\r\n\t\t\tbreak;\r\n\t\t}\r\n\tif(!valid || parameter.length < 2)\r\n\t{\r\n\t\tconsole.log(\r\n`\r\nUsage: npm start -- [options] transform <source> <destination> [units...]\r\n\r\nsource       An unprocessed SVG file containing Pather commands\r\ndestination  Desired filename of the processed output\r\noptions      One or more of the following switches:\r\n  --precision <n>                   Write numbers to the output with N decimal places. Default is 3\r\n  --stripWhitespace <path|xml|all>  Strip whitespace from within path data, between XML tags or both (all)\r\n  --stripComments                   Strip XML comments from the output document\r\n  --combinePathCommands             Combine repeated commands in path data, e.g. h 30 h 30 becomes h 60\r\nunits        Variable values to be passed to the Pather environment\r\n             Name/value pairs separated by \"=\", e.g. myUnit=3 myOtherUnit=4.2\r\n`\r\n\t\t\t);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tlet source = parameter.shift();\r\n\t\tlet destination = parameter.shift();\r\n\t\tconfiguration.unit = {};\r\n\t\treading = true;\r\n\t\twhile(reading && parameter.length) {\r\n\t\t\tlet unit = parameter.shift().split(\"=\");\r\n\t\t\tlet reason;\r\n\t\t\tswitch(true)\r\n\t\t\t{\r\n\t\t\t\tcase unit.length !== 2:\r\n\t\t\t\t\treason = `Invalid unit format \"${unit.join(\"=\")}\".`;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase new RegExp(\"^[bdefgijknopruwxy]|[a-z_$][a-z0-9_$]+$\", \"i\").exec(unit[0]) === null:\r\n\t\t\t\t\treason = `Invalid unit name \"${unit[0]}\".`;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase parseFloat(unit[1]).toString() !== unit[1].substr(0, parseFloat(unit[1]).toString().length) || isNaN(parseFloat(unit[1])) || parseFloat(unit[1]) === Infinity || parseFloat(unit[1]) === -Infinity:\r\n\t\t\t\t\treason = `Invalid unit value \"${unit[1]}\".`;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif(reason)\r\n\t\t\t{\r\n\t\t\t\tconsole.log(`${reason} Expected valid identifier followed by a number, e.g. myUnit=3`); \r\n\t\t\t\treading = false;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tconfiguration.unit[unit[0]] = parseFloat(unit[1]);\r\n\t\t}\r\n\t\tif(reading)\r\n\t\t{\r\n\t\t\t// console.log(configuration);\r\n\t\t\tconst fs = require('fs');\r\n\t\t\tconst path = require('path');\r\n\t\t\tconfiguration.base = path.dirname(source) + path.sep;\r\n\t\t\tconst data = fs.readFileSync(source, {encoding: \"utf-8\", flag: \"r\"});\r\n\t\t\tlet t = new Transformer(data);\r\n\t\t\tfs.writeFileSync(destination, t.transform(configuration), {encoding: \"utf-8\"});\r\n\t\t}\r\n\t}\r\n\r\n\treturn;\r\n})();\r\n"],"names":["Token","static","constructor","type","name","value","position","this","BigDecimal","BigInt","repeat","LIMIT_PRECISION","RegExp","source","integerPart","decimalPart","VALUE_SHIFT","split","substr","padEnd","charCodeAt","fromBigInt","result","fromBigIntDivision","dividend","divisor","add","other","subtract","multiplyBy","divideBy","equals","valueOf","toNumber","toString","precision","text","Math","max","padStart","length","replace","PATTERN_TRAILING_ZERO","Value","stack","sequence","arity","pending","x","y","fixNext","lastAngle","originX","originY","TokenStream","TYPE_NUMBER","expression","handler","TYPE_COMMAND","a","TYPE_X","TYPE_Y","TYPE_THETA","TYPE_FLAG","c","h","l","m","q","s","t","v","z","toLowerCase","TYPE_DELIMITER","TYPE_WHITESPACE","TYPE_IDENTIFIER","TYPE_BRACKET","TYPE_OPERATOR_ADD","TYPE_OPERATOR_MULTIPLY","TYPE_OPERATOR_SUBTRACT","TYPE_OPERATOR_DIVIDE","TYPE_OPERATOR_ROTATE","TYPE_OPERATOR_FIX","TYPE_OPERATOR_MEASURE","TYPE_OPERATOR_ASSIGN","TYPE_OPERATOR_REPEAT","data","cursor","chainIndex","streamIndex","match","item","PRIORITY","exec","push","SyntaxError","TYPE_END","getCurrent","getNext","peekNext","reset","ExpressionParser","stream","debug","operation","limit","start","index","leftValue","OPERATION_EVALUATE","accumulator","console","log","slice","map","i","j","formatOperation","join","OPERATION_MULTIPLY","OPERATION_DIVIDE","OPERATION_ADD","OPERATION_SUBTRACT","parse","context","depth","argumentList","insideArgumentList","state","base","counter","current","reading","unwind","TYPE_UNIT","expResult","getEmptyResult","parseInvocation","atan2","PI","pop","unit","ReferenceError","segment","inner","hasRotate","hasCount","hasArgumentList","rotate","count","delimited","indexOf","Error","parseInt","PathParser","x0","y0","x1","y1","angle","cosine","sine","cos","sin","abs","Number","EPSILON","top","origin","point","command","relative","point1","point2","last","fixed","optimisation","path","combineCommands","sequnce","toUpperCase","parseList","invoked","next","applyRotation","Transformer","document","parseXML","require","DOMParser","parseFromString","parseUnitList","list","shift","parentNode","removeChild","parser","getAttribute","id","except","message","cause","filter","concat","parseSegmentList","forEach","reduce","previous","parseIncludeList","configuration","seen","Array","from","getElementsByTagName","href","filename","readFileSync","encoding","flag","target","getElementById","documentElement","nodeName","child","firstChild","nextSibling","insertBefore","transform","combinePathCommands","xml","stripWhitespace","stripComments","pathResult","setAttribute","resultToString","hasAttribute","viewBoxResult","Node","nodeType","nodeValue","XMLSerializer","serializeToString","parameter","process","argv","valid","whitespaceTypeList","startsWith","isNaN","destination","reason","parseFloat","Infinity","fs","dirname","sep","writeFileSync"],"mappings":"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"}