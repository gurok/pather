{"version":3,"file":"pather.min.js","sources":["../source/class/Token.js","../source/class/BigDecimal.js","../source/class/Value.js","../source/class/TokenStream.js","../source/class/Distortion.js","../source/class/PathParser.js","../source/class/ExpressionParser.js","../source/class/Transformer.js","../source/main.js"],"sourcesContent":["export default class Token\n{\n    static TYPE_NUMBER                    = 1;\n    static TYPE_COMMAND                   = 2;\n    static TYPE_DELIMITER                 = 3;\n    static TYPE_WHITESPACE                = 4;\n    static TYPE_IDENTIFIER                = 5;\n    static TYPE_BRACKET                   = 6;\n    static TYPE_END                       = 7;\n    static TYPE_OPERATOR_ADD              = 8;\n    static TYPE_OPERATOR_SUBTRACT         = 9;\n    static TYPE_OPERATOR_MULTIPLY         = 10;\n    static TYPE_OPERATOR_DIVIDE           = 11;\n    static TYPE_OPERATOR_ROTATE           = 12;\n    static TYPE_OPERATOR_SKEW_HORIZONTAL  = 13;\n    static TYPE_OPERATOR_SKEW_VERTICAL    = 14;\n    static TYPE_OPERATOR_FIX              = 15;\n    static TYPE_OPERATOR_MEASURE          = 16;\n    static TYPE_OPERATOR_ASSIGN           = 17;\n    static TYPE_OPERATOR_REPEAT           = 18;\n\n    constructor(type, name, value, position)\n    {\n        this.type = type;\n        this.name = name;\n        this.value = value;\n        this.position = position;\n    }\n};\n","export default class BigDecimal\n{\n    static LIMIT_PRECISION         = 18;\n    static PI                      = new BigDecimal(\"3.141592653589793238\");\n    static #VALUE_SHIFT            = BigInt(\"1\" + \"0\".repeat(BigDecimal.LIMIT_PRECISION));\n    static #PATTERN_TRAILING_ZERO  = new RegExp(\"\\\\.?0+$\");\n\n    #value;\n\n    constructor(source = 0)\n\t{\n\t\tlet integerPart;\n\t\tlet decimalPart;\n\n\t\tif(source instanceof BigDecimal)\n            this.#value = source.#value;\n\t\telse\n            if(source instanceof BigInt)\n                this.#value = value * BigDecimal.VALUE_SHIFT;\n            else\n            {\n                [integerPart, decimalPart] = (source + \".\").split(\".\");\n                this.#value = BigInt(integerPart + decimalPart.substr(0, BigDecimal.LIMIT_PRECISION).padEnd(BigDecimal.LIMIT_PRECISION, \"0\"));\n                if(decimalPart.charCodeAt(BigDecimal.LIMIT_PRECISION) > 52)\n                    this.#value++;\n            }\n\n\t\treturn;\n    }\n\n    #fromBigInt(source)\n    {\n        let result;\n\n        result = new BigDecimal(this);\n        result.#value = source;\n\n        return(result);\n    }\n\n    #fromBigIntDivision(dividend, divisor)\n    {\n        return(this.#fromBigInt(dividend / divisor + dividend * 2n / divisor % 2n));\n    }\n\n    add(other)\n    {\n        return(this.#fromBigInt(this.#value + new BigDecimal(other).#value));\n    }\n\n    subtract(other)\n    {\n        return(this.#fromBigInt(this.#value - new BigDecimal(other).#value));\n    }\n\n    multiplyBy(other)\n    {\n        return(this.#fromBigIntDivision(this.#value * new BigDecimal(other).#value, BigDecimal.#VALUE_SHIFT));\n    }\n\n    divideBy(other)\n    {\n        return(this.#fromBigIntDivision(this.#value * BigDecimal.#VALUE_SHIFT, new BigDecimal(other).#value));\n    }\n\n    equals(other)\n    {\n        return(this.valueOf() == other);\n    }\n\n    valueOf()\n    {\n        return(this.#value);\n    }\n\n    toNumber()\n    {\n        return(+this.toString());\n    }\n\n    toString(precision = BigDecimal.LIMIT_PRECISION)\n    {\n        let text;\n\n        text = this.#fromBigIntDivision(this.#value, BigInt(\"1\" + \"0\".repeat(precision > -1 ? Math.max(BigDecimal.LIMIT_PRECISION - precision, 0) : BigDecimal.LIMIT_PRECISION))).#value.toString().padStart(precision + 1, \"0\");\n\n        return(text.substr(0, text.length - precision) + (\".\" + text.substr(-precision)).replace(BigDecimal.#PATTERN_TRAILING_ZERO, \"\"));\n    }\n}\n","import BigDecimal from \"./BigDecimal\";\n\nexport default class Value\n{\n\tstatic TYPE_X        = 1;\n\tstatic TYPE_Y        = 2;\n\tstatic TYPE_THETA    = 3;\n\tstatic TYPE_FLAG     = 4;\n\tstatic TYPE_UNIT     = 5;\n\n\tstatic getEmptyResult()\n\t{\n\t\treturn(\n\t\t{\n\t\t\tstack: [],\n\t\t\tsequence: [],\n\t\t\tarity: null,\n\t\t\tpending: 0,\n\t\t\tx: new BigDecimal(0),\n\t\t\ty: new BigDecimal(0),\n\t\t\tfixNext: false,\n\t\t\tlastAngle: null,\n\t\t\toriginX: new BigDecimal(0),\n\t\t\toriginY: new BigDecimal(0) \n\t\t});\n\t}\n};\n","import Token from \"./Token\";\nimport BigDecimal from \"./BigDecimal\";\nimport Value from \"./Value\";\n\nexport default class TokenStream\n{\n    static #PRIORITY =\n    [\n        {\n            type: Token.TYPE_NUMBER,\n            expression: new RegExp(\"^[0-9]*\\\\.?[0-9]+\", \"\"),\n            handler: value => new BigDecimal(value)\n        },\n        {\n            type: Token.TYPE_COMMAND,\n            expression: new RegExp(\"^[achlmqstvz](?![a-z_$])\", \"i\"),\n            handler: value => (\n            {\n                \"a\":\n                [\n                    Value.TYPE_X,\n                    Value.TYPE_Y,\n                    Value.TYPE_THETA,\n                    Value.TYPE_FLAG,\n                    Value.TYPE_FLAG,\n                    Value.TYPE_X,\n                    Value.TYPE_Y\n                ],\n                \"c\":\n                [\n                    Value.TYPE_X,\n                    Value.TYPE_Y,\n                    Value.TYPE_X,\n                    Value.TYPE_Y,\n                    Value.TYPE_X,\n                    Value.TYPE_Y\n                ],\n                \"h\":\n                [\n                    Value.TYPE_X\n                ],\n                \"l\":\n                [\n                    Value.TYPE_X,\n                    Value.TYPE_Y\n                ],\n                \"m\":\n                [\n                    Value.TYPE_X,\n                    Value.TYPE_Y\n                ],\n                \"q\":\n                [\n                    Value.TYPE_X,\n                    Value.TYPE_Y,\n                    Value.TYPE_X,\n                    Value.TYPE_Y\n                ],\n                \"s\":\n                [\n                    Value.TYPE_X,\n                    Value.TYPE_Y,\n                    Value.TYPE_X,\n                    Value.TYPE_Y\n                ],\n                \"t\":\n                [\n                    Value.TYPE_X,\n                    Value.TYPE_Y\n                ],\n                \"v\":\n                [\n                    Value.TYPE_Y\n                ],\n                \"z\":\n                [\n                ]\n            }[value.toLowerCase()])\n        },\n        {\n            type: Token.TYPE_DELIMITER,\n            expression: new RegExp(\"^,+\", \"\"),\n            handler: () => null\n        },\n        {\n            type: Token.TYPE_WHITESPACE,\n            expression: new RegExp(\"^\\\\s+\", \"\"),\n            handler: () => null\n        },\n        {\n            type: Token.TYPE_IDENTIFIER,\n            expression: new RegExp(\"^[a-z_$][a-z0-9_$]*\", \"i\"),\n            handler: value => value\n        },\n        {\n            type: Token.TYPE_BRACKET,\n            expression: new RegExp(\"^[()]\", \"\"),\n            handler: value => value === \"(\"\n        },\n        {\n            type: Token.TYPE_OPERATOR_ADD,\n            expression: new RegExp(\"^\\\\+\", \"\"),\n            handler: value => value\n        },\n        {\n            type: Token.TYPE_OPERATOR_MULTIPLY,\n            expression: new RegExp(\"^\\\\*\", \"\"),\n            handler: value => value\n        },\n        {\n            type: Token.TYPE_OPERATOR_SUBTRACT,\n            expression: new RegExp(\"^-\", \"\"),\n            handler: value => value\n        },\n        {\n            type: Token.TYPE_OPERATOR_DIVIDE,\n            expression: new RegExp(\"^/\", \"\"),\n            handler: value => value\n        },\n        {\n            type: Token.TYPE_OPERATOR_ROTATE,\n            expression: new RegExp(\"^%r\", \"\"),\n            handler: value => value\n        },\n        {\n            type: Token.TYPE_OPERATOR_SKEW_HORIZONTAL,\n            expression: new RegExp(\"^%h\", \"\"),\n            handler: value => value\n        },\n        {\n            type: Token.TYPE_OPERATOR_SKEW_VERTICAL,\n            expression: new RegExp(\"^%v\", \"\"),\n            handler: value => value\n        },\n        {\n            type: Token.TYPE_OPERATOR_FIX,\n            expression: new RegExp(\"^@\", \"\"),\n            handler: value => value\n        },\n        {\n            type: Token.TYPE_OPERATOR_MEASURE,\n            expression: new RegExp(\"^\\\\|\", \"\"),\n            handler: value => value\n        },\n        {\n            type: Token.TYPE_OPERATOR_ASSIGN,\n            expression: new RegExp(\"^=\", \"\"),\n            handler: value => value\n        },\n        {\n            type: Token.TYPE_OPERATOR_REPEAT,\n            expression: new RegExp(\"^#\", \"\"),\n            handler: value => value\n        }\n    ];\n\n    #data = null;\n    #cursor = 0;\n\n    constructor(text)\n    {\n        var chainIndex;\n        var streamIndex;\n        var match;\n        var item;\n\n        this.#data = [];\n        streamIndex = 0;\n        while(text.length)\n        {\n            for(chainIndex = 0; chainIndex < TokenStream.#PRIORITY.length; chainIndex++)\n            {\n                item = TokenStream.#PRIORITY[chainIndex];\n                match = item.expression.exec(text);\n                if(match)\n                {\n                    this.#data.push(new Token(item.type, match[0], item.handler(match[0]), streamIndex));\n                    streamIndex += match[0].length;\n                    text = text.substr(match[0].length);\n                    break;\n                }\n            }\n            if(chainIndex === TokenStream.#PRIORITY.length)\n\t\t\t\tthrow(new SyntaxError(`Unexpected symbol \"${text.substr(0, 1)}\" at column ${streamIndex}`));\n        }\n        this.#data.push(new Token(Token.TYPE_END, null, null, streamIndex));\n    }\n\n    getCurrent()\n    {\n        return(this.#data[this.#cursor] ?? null);\n    }\n\n    getNext()\n    {\n        this.#cursor++;\n\n        return(this.getCurrent());\n    }\n\n    peekNext()\n    {\n        return(this.#data[this.#cursor + 1] ?? null);\n    }\n\n    reset()\n    {\n        this.#cursor = 0;\n\n        return(this.getCurrent());\n    }\n};\n","import BigDecimal from \"./BigDecimal\";\r\n\r\nexport default class Distortion\r\n{\r\n\tstatic OPERATION_NONE = 0;\r\n\tstatic OPERATION_ROTATE = 1;\r\n\tstatic OPERATION_SKEW_HORIZONTAL = 2;\r\n\tstatic OPERATION_SKEW_VERTICAL = 3;\r\n\r\n\tstatic #rotate(x0, y0, x1, y1, distortionValue)\r\n\t{\r\n\t\tvar cosine;\r\n\t\tvar sine;\r\n\r\n\t\tx1 = x1.subtract(x0);\r\n\t\ty1 = y1.subtract(y0);\r\n\t\tdistortionValue = (distortionValue.toNumber() % 360) * Math.PI / 180;\r\n\t\tcosine = Math.cos(distortionValue);\r\n\t\tsine = Math.sin(distortionValue);\r\n\t\tif(Math.abs(cosine - sine) < Number.EPSILON * 2)\r\n\t\t\tsine = cosine;\r\n\t\telse\r\n\t\t\tif(Math.abs(cosine + sine) < Number.EPSILON * 2)\r\n\t\t\t\tcosine = sine;\r\n\t\tif(Math.abs(cosine) < Number.EPSILON)\r\n\t\t\tcosine = 0;\r\n\t\tif(Math.abs(sine) < Number.EPSILON)\r\n\t\t\tsine = 0;\r\n\t\r\n\t\treturn(\r\n\t\t{\r\n\t\t\tx: x0.add(x1.multiplyBy(cosine)).subtract(y1.multiplyBy(sine)),\r\n\t\t\ty: y0.add(y1.multiplyBy(cosine)).add(x1.multiplyBy(sine))\r\n\t\t});\r\n\t};\r\n\r\n\tstatic #fixPoint(point, relative, topX, topY, distortionType, result)\r\n\t{\r\n\t\tif(distortionType === Distortion.OPERATION_SKEW_VERTICAL)\r\n\t\t\tpoint.x = topX.value;\r\n\t\telse\r\n\t\t\tif(topX.fixed)\r\n\t\t\t\tpoint.x = relative ? topX.value.subtract(result.x) : topX.value;\r\n\t\tif(distortionType === Distortion.OPERATION_SKEW_HORIZONTAL)\r\n\t\t\tpoint.y = topY.value;\r\n\t\telse\r\n\t\t\tif(topY.fixed)\r\n\t\t\t\tpoint.y = relative ? topY.value.subtract(result.y) : topY.value;\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\tstatic applyDistortion(context, top, result, distortionType, distortionValue)\r\n\t{\r\n\t\tlet origin;\r\n\t\tlet point;\r\n\t\tlet command;\r\n\t\tlet relative;\r\n\t\tlet point1;\r\n\t\tlet point2;\r\n\t\tlet last;\r\n\t\tlet lastAngle;\r\n\r\n\t\tcommand = top[0].toLowerCase();\r\n\t\trelative = top[0].toLowerCase() === top[0];\r\n\t\torigin =\r\n\t\t{\r\n\t\t\tx: relative ? new BigDecimal(0) : result.x,\r\n\t\t\ty: relative ? new BigDecimal(0) : result.y\r\n\t\t}\r\n\t\tif(result.pending)\r\n\t\t\tthrow(new SyntaxError(`Too few arguments for command ${top[0]}`));\r\n\t\tif(result.fixNext)\r\n\t\t\tthrow(new SyntaxError(`Dangling fix operator after command ${top[0]}`));\r\n\t\t// TODO: Eventually, all values will need to be rounded just beyond this point\r\n\t\tswitch(command)\r\n\t\t{\r\n\t\t\tcase \"a\":\r\n\t\t\t\tpoint =\r\n\t\t\t\t{\r\n\t\t\t\t\tx: top[6].value,\r\n\t\t\t\t\ty: top[7].value\r\n\t\t\t\t};\r\n\t\t\t\tif(distortionType !== Distortion.OPERATION_NONE)\r\n\t\t\t\t\tpoint = Distortion.#rotate(origin.x, origin.y, point.x, point.y, distortionValue);\r\n\t\t\t\tDistortion.#fixPoint(point, relative, top[6], top[7], distortionType, result);\r\n\t\t\t\ttop =\r\n\t\t\t\t[\r\n\t\t\t\t\ttop[0],\r\n\t\t\t\t\ttop[1].value,\r\n\t\t\t\t\ttop[2].value,\r\n\t\t\t\t\ttop[3].fixed ? top[3].value : top[3].value.add(distortionValue),\r\n\t\t\t\t\ttop[4].value,\r\n\t\t\t\t\ttop[5].value,\r\n\t\t\t\t\tpoint.x,\r\n\t\t\t\t\tpoint.y\r\n\t\t\t\t];\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"c\":\r\n\t\t\t\tpoint1 =\r\n\t\t\t\t{\r\n\t\t\t\t\tx: top[1].value,\r\n\t\t\t\t\ty: top[2].value\r\n\t\t\t\t};\r\n\t\t\t\tpoint2 =\r\n\t\t\t\t{\r\n\t\t\t\t\tx: top[3].value,\r\n\t\t\t\t\ty: top[4].value\r\n\t\t\t\t};\r\n\t\t\t\tpoint =\r\n\t\t\t\t{\r\n\t\t\t\t\tx: top[5].value,\r\n\t\t\t\t\ty: top[6].value\r\n\t\t\t\t};\r\n\t\t\t\tif(distortionType !== Distortion.OPERATION_NONE)\r\n\t\t\t\t{\r\n\t\t\t\t\tpoint1 = Distortion.#rotate(origin.x, origin.y, point1.x, point1.y, distortionValue);\r\n\t\t\t\t\tpoint2 = Distortion.#rotate(origin.x, origin.y, point2.x, point2.y, distortionValue);\r\n\t\t\t\t\tpoint = Distortion.#rotate(origin.x, origin.y, point.x, point.y, distortionValue);\r\n\t\t\t\t}\r\n\t\t\t\tDistortion.#fixPoint(point, relative, top[5], top[6], distortionType, result);\r\n\t\t\t\ttop =\r\n\t\t\t\t[\r\n\t\t\t\t\ttop[0],\r\n\t\t\t\t\ttop[1].fixed ? (relative ? top[1].value.subtract(result.x) : top[1].value) : point1.x,\r\n\t\t\t\t\ttop[2].fixed ? (relative ? top[2].value.subtract(result.y) : top[2].value) : point1.y,\r\n\t\t\t\t\ttop[3].fixed ? (relative ? top[3].value.subtract(result.x) : top[3].value) : point2.x,\r\n\t\t\t\t\ttop[4].fixed ? (relative ? top[4].value.subtract(result.y) : top[4].value) : point2.y,\r\n\t\t\t\t\tpoint.x,\r\n\t\t\t\t\tpoint.y\r\n\t\t\t\t];\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"s\":\r\n\t\t\tcase \"q\":\r\n\t\t\t\tpoint1 =\r\n\t\t\t\t{\r\n\t\t\t\t\tx: top[1].value,\r\n\t\t\t\t\ty: top[2].value\r\n\t\t\t\t};\r\n\t\t\t\tpoint =\r\n\t\t\t\t{\r\n\t\t\t\t\tx: top[3].value,\r\n\t\t\t\t\ty: top[4].value\r\n\t\t\t\t};\r\n\t\t\t\tif(distortionType !== Distortion.OPERATION_NONE)\r\n\t\t\t\t{\r\n\t\t\t\t\tpoint1 = Distortion.#rotate(origin.x, origin.y, point1.x, point1.y, distortionValue);\r\n\t\t\t\t\tpoint = Distortion.#rotate(origin.x, origin.y, point.x, point.y, distortionValue);\r\n\t\t\t\t}\r\n\t\t\t\tDistortion.#fixPoint(point, relative, top[3], top[4], distortionType, result);\r\n\t\t\t\ttop =\r\n\t\t\t\t[\r\n\t\t\t\t\ttop[0],\r\n\t\t\t\t\tpoint1.x,\r\n\t\t\t\t\tpoint1.y,\r\n\t\t\t\t\tpoint.x,\r\n\t\t\t\t\tpoint.y\r\n\t\t\t\t];\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"l\":\r\n\t\t\tcase \"h\":\r\n\t\t\tcase \"v\":\r\n\t\t\t\tlet topX = command === \"v\" ? {value: new BigDecimal(origin.x), fixed: true} : top[1];\r\n\t\t\t\tlet topY = command === \"h\" ? {value: new BigDecimal(origin.y), fixed: true} : (command === \"v\" ? top[1] : top[2]);\r\n\t\t\t\tpoint =\r\n\t\t\t\t{\r\n\t\t\t\t\tx: topX.value,\r\n\t\t\t\t\ty: topY.value\r\n\t\t\t\t};\r\n\t\t\t\tif(distortionType !== Distortion.OPERATION_NONE)\r\n\t\t\t\t\tpoint = Distortion.#rotate(origin.x, origin.y, point.x, point.y, distortionValue);\r\n\t\t\t\tlastAngle = Math.atan2(point.y.subtract(origin.y).toNumber(), point.x.subtract(origin.x).toNumber()) * 180 / Math.PI;\r\n\t\t\t\tconsole.log(\"Before\", point.x.toString(), point.y.toString(), distortionType);\r\n\t\t\t\tDistortion.#fixPoint(point, relative, topX, topY, distortionType, result);\r\n\t\t\t\tconsole.log(\"After\", point.x.toString(), point.y.toString(), distortionType);\r\n\t\t\t\ttop = point.x.equals(origin.x)\r\n\t\t\t\t\t?\r\n\t\t\t\t\t(\r\n\t\t\t\t\t\tpoint.y.equals(origin.y)\r\n\t\t\t\t\t\t?\r\n\t\t\t\t\t\t\tnull\r\n\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t[\"v\", point.y]\r\n\t\t\t\t\t)\r\n\t\t\t\t\t:\r\n\t\t\t\t\t(\r\n\t\t\t\t\t\tpoint.y.equals(origin.y)\r\n\t\t\t\t\t\t?\r\n\t\t\t\t\t\t\t[\"h\", point.x]\r\n\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t[\"l\", point.x, point.y]\r\n\t\t\t\t\t);\r\n\t\t\t\tif(top)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(context.optimisation.path.combineCommands && result.sequence.length > 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlast = result.sequence[result.sequence.length - 1];\r\n\t\t\t\t\t\tif(last[0].toLowerCase() === top[0].toLowerCase() && lastAngle === result.lastAngle)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(relative)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(last.length > 2)\r\n\t\t\t\t\t\t\t\t\tlast[2] = last[2].add(top[2]);\r\n\t\t\t\t\t\t\t\tlast[1] = last[1].add(top[1]);\r\n\t\t\t\t\t\t\t\ttop = null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tresult.sequnce.pop();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tresult.lastAngle = lastAngle;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"m\":\r\n\t\t\tcase \"t\":\r\n\t\t\t\tpoint =\r\n\t\t\t\t{\r\n\t\t\t\t\tx: top[1].value,\r\n\t\t\t\t\ty: top[2].value\r\n\t\t\t\t}\r\n\t\t\t\tif(distortionType !== Distortion.OPERATION_NONE)\r\n\t\t\t\t\tpoint = Distortion.#rotate(origin.x, origin.y, point.x, point.y, distortionValue);\r\n\t\t\t\tDistortion.#fixPoint(point, relative, top[1], top[2], distortionType, result);\r\n\t\t\t\ttop = [top[0], point.x, point.y];\r\n\t\t\t\tif(context.optimisation.path.combineCommands && command === \"m\" && result.sequence.length > 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tlast = result.sequence[result.sequence.length - 1];\r\n\t\t\t\t\tif(last[0].toLowerCase() === \"m\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(relative)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlast[1] = last[1].add(top[1]);\r\n\t\t\t\t\t\t\tlast[2] = last[2].add(top[2]);\r\n\t\t\t\t\t\t\ttop = null;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tresult.sequnce.pop();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"z\":\r\n\t\t\t\ttop = [\"z\"];\r\n\t\t\t\tresult.x = new BigDecimal(result.originX);\r\n\t\t\t\tresult.y = new BigDecimal(result.originY);\r\n\t\t\t\tresult.lastAngle = null;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tif(command !== \"z\")\r\n\t\t{\r\n\t\t\tresult.x = relative ? result.x.add(point.x) : point.x;\r\n\t\t\tresult.y = relative ? result.y.add(point.y) : point.y;\r\n\t\t}\r\n\t\tif(command === \"m\")\r\n\t\t{\r\n\t\t\tresult.originX = new BigDecimal(result.x);\r\n\t\t\tresult.originY = new BigDecimal(result.y);\r\n\t\t}\r\n\t\tif(top)\r\n\t\t{\r\n\t\t\tif(!relative)\r\n\t\t\t\ttop[0] = top[0].toUpperCase();\r\n\t\t\t/* TODO: Primitive optimiser someday? */\r\n\t\t\tresult.sequence.push(top);\r\n\t\t}\r\n\r\n\t\treturn;\r\n\t}\r\n}\r\n","import ExpressionParser from \"./ExpressionParser\";\nimport Token from \"./Token\";\nimport TokenStream from \"./TokenStream\";\nimport BigDecimal from \"./BigDecimal\";\nimport Value from \"./Value\";\nimport Distortion from \"./Distortion\";\n\nexport default class PathParser\n{\n\tconstructor(stream)\n\t{\n\t\tthis.stream = stream;\n\n\t\treturn;\n\t}\n\n\tstatic resultToString(result, precision = BigDecimal.LIMIT_PRECISION)\n\t{\n\t\treturn(result.sequence.map(i => \"\" + i[0].toString() + (i.length > 1 ? \" \" + i.slice(1).join(\",\") : \"\")).join(\" \"));\n\t}\n\n\tparseList(context, result = Value.getEmptyResult(), limit)\n\t{\n\t\tlet state;\n\t\tlet top;\n\n\t\tstate =\n\t\t{\n\t\t\tcurrent: this.stream.getCurrent(),\n\t\t\treading: true,\n\t\t\tindex: 0\n\t\t};\n\t\ttop = [];\n\n\t\twhile(state.reading && state.current && state.index < limit)\n\t\t{\n\t\t\tswitch(state.current.type)\n\t\t\t{\n\t\t\t\tcase Token.TYPE_WHITESPACE:\n\t\t\t\tcase Token.TYPE_DELIMITER:\n\t\t\t\t\tbreak;\n\t\t\t\tcase Token.TYPE_END:\n\t\t\t\t\tstate.reading = false;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet expResult = new ExpressionParser(this.stream).parse(context, 0, [], false, {x: result.x, y: result.y}, Value.TYPE_UNIT);\n\t\t\t\t\tresult.sequence.push([expResult.accumulator]);\n\t\t\t\t\tresult.index++;\n\t\t\t\t\tstate.current = this.stream.getCurrent();\n\t\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tstate.current = this.stream.getNext();\n\t\t}\n\n\t\treturn(result);\n\t}\n\n\tparse(context, result = Value.getEmptyResult(), distortionType = Distortion.OPERATION_NONE, distortionValue = new BigDecimal(0), index = 1, argumentList)\n\t{\n\t\tlet state;\n\t\tlet top;\n\t\tlet invoked;\n\t\tlet next;\n\n\t\tstate =\n\t\t{\n\t\t\tcurrent: this.stream.getCurrent(),\n\t\t\treading: true\n\t\t};\n\n\t\twhile(state.reading && state.current)\n\t\t{\n\t\t\tswitch(state.current.type)\n\t\t\t{\n\t\t\t\tcase Token.TYPE_COMMAND:\n\t\t\t\t\tif(result.arity === null && state.current.name.toLowerCase() !== \"m\")\n\t\t\t\t\t\tthrow(new SyntaxError(\"Paths must begin with a Move To command\"));\n\t\t\t\t\tif(top)\n\t\t\t\t\t\tDistortion.applyDistortion(context, top, result, distortionType, distortionValue);\n\t\t\t\t\tresult.arity = state.current.value;\n\t\t\t\t\tresult.pending = result.arity.length;\n\t\t\t\t\ttop = [state.current.name];\n\t\t\t\t\tbreak;\n\t\t\t\tcase Token.TYPE_OPERATOR_FIX:\n\t\t\t\t\tresult.fixNext = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase Token.TYPE_WHITESPACE:\n\t\t\t\tcase Token.TYPE_DELIMITER:\n\t\t\t\t\tbreak;\n\t\t\t\tcase Token.TYPE_END:\n\t\t\t\t\tif(top)\n\t\t\t\t\t\tDistortion.applyDistortion(context, top, result, distortionType, distortionValue);\n\t\t\t\t\tstate.reading = false;\n\t\t\t\t\tbreak;\n\t\t\t\tcase Token.TYPE_IDENTIFIER:\n\t\t\t\tcase Token.TYPE_NUMBER:\n\t\t\t\t\tif(state.current.type === Token.TYPE_NUMBER)\n\t\t\t\t\t{\n\t\t\t\t\t\tnext = this.stream.peekNext();\n\t\t\t\t\t\tinvoked = next.type === Token.TYPE_IDENTIFIER && context.segment[next.name];\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tinvoked = context.segment[state.current.name];\n\t\t\t\t\tif(invoked)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(top)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tDistortion.applyDistortion(context, top, result, distortionType, distortionValue);\n\t\t\t\t\t\t\ttop = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnew ExpressionParser(this.stream).parseInvocation(context, result, argumentList);\n\t\t\t\t\t\tstate.current = this.stream.getCurrent();\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tif(!top)\n\t\t\t\t\t\tthrow(new Error(`Expected command, but found \"${state.current.name}\"`));\n\t\t\t\t\tif(!result.pending)\n\t\t\t\t\t{\n\t\t\t\t\t\tDistortion.applyDistortion(context, top, result, distortionType, distortionValue);\n\t\t\t\t\t\tresult.pending = result.arity.length;\n\t\t\t\t\t\ttop = [top[0]];\n\t\t\t\t\t}\n\t\t\t\t\tif(!result.pending)\n\t\t\t\t\t\tthrow(new SyntaxError(`Too many parameters supplied to command \"${top[0]}\"`));;\n\t\t\t\t\tif(top[0].toLowerCase() === \"a\" && (result.pending === 4 || result.pending === 3) && state.current.type === Token.TYPE_NUMBER && state.current.name.length > 1 && [\"0\", \"1\"].indexOf(state.current.name.substr(0, 1)) !== -1)\n\t\t\t\t\t{\n\t\t\t\t\t\ttop.push({fixed: result.fixNext, value: new BigDecimal(state.current.name.substr(0, 1))});\n\t\t\t\t\t\tstate.current.name = state.current.name.substr(1);\n\t\t\t\t\t\tstate.current.value = new BigDecimal(state.current.name);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tlet expResult = new ExpressionParser(this.stream).parse(context, 0, argumentList, false, {x: result.x, y: result.y}, result.arity[result.arity.length - result.pending]);\n\t\t\t\t\t\ttop.push({fixed: result.fixNext, value: expResult.accumulator});\n\t\t\t\t\t}\n\t\t\t\t\tresult.fixNext = false;\n\t\t\t\t\tresult.pending--;\n\t\t\t\t\tstate.current = this.stream.getCurrent();\n\t\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tstate.current = this.stream.getNext();\n\t\t}\n\n\t\treturn(result);\n\t}\n}\n","import TokenStream from \"./TokenStream\";\nimport Token from \"./Token\";\nimport BigDecimal from \"./BigDecimal\";\nimport Value from \"./Value\";\nimport PathParser from \"./PathParser\";\nimport Distortion from \"./Distortion\";\n\nexport default class ExpressionParser\n{\n    static #OPERATION_EVALUATE  = 1;\n    static #OPERATION_ADD       = 2;\n    static #OPERATION_SUBTRACT  = 3;\n    static #OPERATION_MULTIPLY  = 4;\n    static #OPERATION_DIVIDE    = 5;\n\n    constructor(stream)\n    {\n        this.stream = stream;\n\t\tthis.debug = false;\n    }\n\n    static #formatOperation(operation)\n    {\n\t\treturn(operation.value + \" \" + [\"\", \"=\", \"+\", \"-\", \"*\", \"/\"][operation.operation]);\n\t}\n\n    static #unwind(result, limit)\n    {\n\t\tvar start;\n\t\tvar index;\n\t\tvar leftValue;\n\t\tvar leftOperation;\n\n\t\tstart = result.stack.length - 1;\n\t\twhile(start > -1 && result.stack[start].operation > limit)\n\t\t\tstart--;\n\t\tindex = start + 1;\n\t\tif(index < result.stack.length)\n\t\t{\n\t\t\tresult.stack.push({operation: ExpressionParser.#OPERATION_EVALUATE, value: result.accumulator});\n\t\t\tif(this.debug)\n\t\t\t\tconsole.log(\"<<\\n\" + result.stack.slice(index).map((i, j) => j + \": \" + ExpressionParser.#formatOperation(i)).join(\"\\n\"));\n\t\t\tleftValue = result.stack[index].value;\n\t\t\tfor(; index < result.stack.length - 1; index++)\n\t\t\t{\n\t\t\t\tleftOperation = result.stack[index].operation;\n\t\t\t\tswitch(leftOperation)\n\t\t\t\t{\n\t\t\t\t\tcase ExpressionParser.#OPERATION_MULTIPLY:\n\t\t\t\t\t\tleftValue = leftValue.multiplyBy(result.stack[index + 1].value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ExpressionParser.#OPERATION_DIVIDE:\n\t\t\t\t\t\tleftValue = leftValue.divideBy(result.stack[index + 1].value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ExpressionParser.#OPERATION_ADD:\n\t\t\t\t\t\tleftValue = leftValue.add(result.stack[index + 1].value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ExpressionParser.#OPERATION_SUBTRACT:\n\t\t\t\t\t\tleftValue = leftValue.subtract(result.stack[index + 1].value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult.accumulator = leftValue;\n\t\t\tresult.stack = result.stack.slice(0, start + 1);\n\t\t}\n\n\t\treturn;\n\t}\n\n    parse(context, depth = 0, argumentList = {}, insideArgumentList = false, position, type, additionalTerminatorList = [])\n    {\n\t\tvar result;\n\t\tvar state;\n\n\t\tresult =\n\t\t{\n\t\t\taccumulator: new BigDecimal(0),\n\t\t\tbase: 0,\n\t\t\tcounter: depth,\n\t\t\tdata: 0,\n\t\t\tstack: []\n\t\t};\n\t\tstate =\n\t\t{\n\t\t\tcurrent: this.stream.getCurrent(),\n\t\t\treading: true\n\t\t};\n\n\t\twhile(state.reading && state.current)\n\t\t{\n\t\t\tswitch(state.current.type)\n\t\t\t{\n\t\t\t\tcase Token.TYPE_NUMBER:\n\t\t\t\t\tif(result.data === Token.TYPE_WHITESPACE)\n\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected space-delimited value \"${state.current.name}\" at column ${state.current.position}`));\n\t\t\t\t\tif(result.data === Token.TYPE_NUMBER)\n\t\t\t\t\t\tif(result.counter)\n\t\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected token \"${state.current.name}\" at column ${state.current.position}`));\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstate.reading = false;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\tif(this.debug)\n\t\t\t\t\t\tconsole.log(\"Number\", state.current);\n\t\t\t\t\tresult.accumulator = state.current.value;\n\t\t\t\t\tresult.data = Token.TYPE_NUMBER;\n\t\t\t\t\tbreak;\n\t\t\t\tcase Token.TYPE_OPERATOR_DIVIDE:\n\t\t\t\t\tif(result.data !== Token.TYPE_NUMBER && result.data !== Token.TYPE_WHITESPACE)\n\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected token \"${state.current.name}\" at column ${state.current.position}`));\n\t\t\t\t\tif(this.debug)\n\t\t\t\t\t\tconsole.log(\"/\", state.current);\n\t\t\t\t\tresult.stack.push({operation: ExpressionParser.#OPERATION_DIVIDE, value: result.accumulator});\n\t\t\t\t\tresult.data = Token.TYPE_OPERATOR_DIVIDE;\n\t\t\t\t\tbreak;\n\t\t\t\tcase Token.TYPE_OPERATOR_MULTIPLY:\n\t\t\t\t\tif(result.data !== Token.TYPE_NUMBER && result.data !== Token.TYPE_WHITESPACE)\n\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected token \"${state.current.name}\" at column ${state.current.position}`));\n\t\t\t\t\tif(this.debug)\n\t\t\t\t\t\tconsole.log(\"*\", state.current);\n\t\t\t\t\tresult.stack.push({operation: ExpressionParser.#OPERATION_MULTIPLY, value: result.accumulator});\n\t\t\t\t\tresult.data = Token.TYPE_OPERATOR_MULTIPLY;\n\t\t\t\t\tbreak;\n\t\t\t\tcase Token.TYPE_OPERATOR_SUBTRACT:\n\t\t\t\t\tif(result.data === Token.TYPE_NUMBER && result.counter === 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tstate.reading = false;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif(result.data !== Token.TYPE_NUMBER && result.data !== 0 && result.data !== Token.TYPE_BRACKET && result.data !== Token.TYPE_WHITESPACE)\n\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected token \"${state.current.name}\" at column ${state.current.position}`));\n\t\t\t\t\tif(this.debug)\n\t\t\t\t\t\tconsole.log(\"-\", state.current);\n\t\t\t\t\tExpressionParser.#unwind(result, ExpressionParser.#OPERATION_SUBTRACT);\n\t\t\t\t\tresult.stack.push({operation: ExpressionParser.#OPERATION_SUBTRACT, value: result.accumulator});\n\t\t\t\t\tresult.data = Token.TYPE_OPERATOR_SUBTRACT;\n\t\t\t\t\tbreak;\n\t\t\t\tcase Token.TYPE_OPERATOR_ADD:\n\t\t\t\t\tif(result.data !== Token.TYPE_NUMBER && result.data !== Token.TYPE_WHITESPACE)\n\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected token \"${state.current.name}\" at column ${state.current.position}`));\n\t\t\t\t\tif(this.debug)\n\t\t\t\t\t\tconsole.log(\"+\", state.current);\n\t\t\t\t\tExpressionParser.#unwind(result, ExpressionParser.#OPERATION_SUBTRACT);\n\t\t\t\t\tresult.stack.push({operation: ExpressionParser.#OPERATION_ADD, value: result.accumulator});\n\t\t\t\t\tresult.data = Token.TYPE_OPERATOR_ADD;\n\t\t\t\t\tbreak;\n\t\t\t\tcase Token.TYPE_OPERATOR_MEASURE:\n\t\t\t\t\tif(result.data === Token.TYPE_WHITESPACE)\n\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected space before measure operator (\"${state.current.name}\") at column ${state.current.position}`));\n\t\t\t\t\tif(result.data === Token.TYPE_NUMBER)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(this.debug)\n\t\t\t\t\t\t\tconsole.log(\"*\", state.current);\n\t\t\t\t\t\tresult.stack.push({operation: ExpressionParser.#OPERATION_MULTIPLY, value: result.accumulator});\n\t\t\t\t\t}\n\t\t\t\t\tif(type === Value.TYPE_UNIT)\n\t\t\t\t\t\tthrow(new SyntaxError(`The unit type is incompatible with the return value of a segment measurement`));\n\t\t\t\t\tif(type === Value.TYPE_FLAG)\n\t\t\t\t\t\tthrow(new SyntaxError(`The flag type is incompatible with the return value of a segment measurement`));\n\t\t\t\t\tthis.stream.getNext();\n\t\t\t\t\tif(this.stream.getCurrent().type === Token.TYPE_WHITESPACE)\n\t\t\t\t\t\tthis.stream.getNext();\n\t\t\t\t\tif(this.stream.getCurrent().type !== Token.TYPE_IDENTIFIER)\n\t\t\t\t\t\tthrow(new SyntaxError(`Expected identifier at ${this.stream.getCurrent().position}, found \"${this.stream.getCurrent().name}\"`))\n\t\t\t\t\tlet expResult = Value.getEmptyResult();\n\t\t\t\t\texpResult.x = position.x;\n\t\t\t\t\texpResult.y = position.y;\n\t\t\t\t\texpResult.arity = [];\n\t\t\t\t\tnew ExpressionParser(this.stream).parseInvocation(context, expResult, argumentList);\n\t\t\t\t\tresult.data = Token.TYPE_NUMBER;\n\t\t\t\t\tswitch(type)\n\t\t\t\t\t{\n\t\t\t\t\t\tcase Value.TYPE_X:\n\t\t\t\t\t\t\tresult.accumulator = expResult.x.subtract(position.x);\n\t\t\t\t\t\t\tconsole.log(\"RETURNING X\", result.accumulator.toString());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase Value.TYPE_Y:\n\t\t\t\t\t\t\tresult.accumulator = expResult.y.subtract(position.y);\n\t\t\t\t\t\t\tconsole.log(\"RETURNING Y\", result.accumulator.toString());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase Value.TYPE_THETA:\n\t\t\t\t\t\t\tresult.accumulator = (new BigDecimal(Math.atan2(expResult.x.subtract(position.x).toNumber(), expResult.y.subtract(position.y).toNumber()))).multiplyBy(180).divideBy(BigDecimal.PI);\n\t\t\t\t\t\t\tconsole.log(\"RETURNING THETA\", result.accumulator.toString());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif(this.stream.getCurrent().type === Token.TYPE_WHITESPACE)\n\t\t\t\t\t\tthis.stream.getNext();\n\t\t\t\t\tstate.current = this.stream.getCurrent();\n\t\t\t\t\tif(state.current.type !== Token.TYPE_OPERATOR_MEASURE)\n\t\t\t\t\t\tthrow(new SyntaxError(`Expected measurement operator, found \"${state.current.name}`));\n\t\t\t\t\tbreak;\n\t\t\t\tcase Token.TYPE_BRACKET:\n\t\t\t\t\tif(this.debug)\n\t\t\t\t\t\tconsole.log(state.current.value ? \"(\" : \")\", state.current, result.counter, context.depth);\n\t\t\t\t\tif(state.current.value)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(result.data === Token.TYPE_WHITESPACE)\n\t\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected token \"${state.current.name}\" at column ${state.current.position}`));\n\t\t\t\t\t\tresult.counter++;\n\t\t\t\t\t\tif(result.data === Token.TYPE_NUMBER)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(this.debug)\n\t\t\t\t\t\t\t\tconsole.log(\"*\", state.current);\n\t\t\t\t\t\t\tresult.stack.push({operation: ExpressionParser.#OPERATION_MULTIPLY, value: result.accumulator});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresult.accumulator = new BigDecimal(0);\n\t\t\t\t\t\tresult.stack.push({operation: ExpressionParser.#OPERATION_EVALUATE});\n\t\t\t\t\t\tresult.data = Token.TYPE_BRACKET;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif(!insideArgumentList && result.counter === context.depth)\n\t\t\t\t\t\t\tthrow(new SyntaxError(`Mismatched bracket at column ${state.current.position}`));\n\t\t\t\t\t\tif(result.data !== Token.TYPE_NUMBER)\n\t\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected bracket at column ${state.current.position}`));\n\t\t\t\t\t\tExpressionParser.#unwind(result, ExpressionParser.#OPERATION_EVALUATE);\n\t\t\t\t\t\tresult.stack.pop();\n\t\t\t\t\t\tresult.data = Token.TYPE_NUMBER;\n\t\t\t\t\t\tif(insideArgumentList)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstate.reading = false;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tresult.counter--;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase Token.TYPE_IDENTIFIER:\n\t\t\t\t\tif(result.data === Token.TYPE_WHITESPACE)\n\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected space-delimited value \"${state.current.name}\" at column ${state.current.position}`));\n\t\t\t\t\tif(state.current.name in argumentList || state.current.name in context.unit)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(result.data === Token.TYPE_NUMBER)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(this.debug)\n\t\t\t\t\t\t\t\tconsole.log(\"*\", state.current);\n\t\t\t\t\t\t\tresult.stack.push({operation: ExpressionParser.#OPERATION_MULTIPLY, value: result.accumulator});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(this.debug)\n\t\t\t\t\t\t\tconsole.log(\"Unit\", state.current);\n\t\t\t\t\t\tresult.accumulator = argumentList[state.current.name] ?? context.unit[state.current.name];\n\t\t\t\t\t\tresult.data = Token.TYPE_NUMBER;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tthrow(new ReferenceError(`Reference to undefined unit \"${state.current.name}\" at column ${state.current.position}.`));\n\t\t\t\t\tbreak;\n\t\t\t\tcase Token.TYPE_DELIMITER:\n\t\t\t\t\tif(result.counter)\n\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected delimiter \"${state.current.name}\" in expression at column ${state.current.position}.`));\n\t\t\t\tcase Token.TYPE_WHITESPACE:\n\t\t\t\t\tif(result.counter || result.data === 0) // TODO\n\t\t\t\t\t{\n\t\t\t\t\t\tif(result.data === Token.TYPE_NUMBER)\n\t\t\t\t\t\t\tresult.data = Token.TYPE_WHITESPACE;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase Token.TYPE_END:\n\t\t\t\t\tif(result.counter > context.depth)\n\t\t\t\t\t\tthrow(new SyntaxError(`Missing closing bracket(s) at end of segment (nesting depth = ${result.counter - context.depth})`));\n\t\t\t\t\tstate.reading = false;\n\t\t\t\t\tcontinue;\n\t\t\t\tdefault:\n\t\t\t\t\tif(additionalTerminatorList.includes(state.current.type))\n\t\t\t\t\t{\n\t\t\t\t\t\tstate.reading = false;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tthrow(new SyntaxError(`Unexpected token \"${state.current.name}\" at column ${state.current.position}`));\n\t\t\t}\n\t\t\tstate.current = this.stream.getNext();\n\t\t}\n\t\tExpressionParser.#unwind(result, ExpressionParser.#OPERATION_SUBTRACT);\n\t\tExpressionParser.#unwind(result, 0);\n\n\t\treturn(result);\n\t}\n\n\tparseInvocation(context, result, argumentList)\n\t{\n\t\tlet state;\n\t\tlet segment;\n\t\tlet inner;\n\t\tlet name;\n\t\tlet index;\n\t\tlet expResult;\n\t\tlet type;\n\t\n\t\tstate =\n\t\t{\n\t\t\tcurrent: this.stream.getCurrent(),\n\t\t\treading: true,\n\t\t\thasCount: false,\n\t\t\thasArgumentList: false,\n\t\t\tdistortionValue: new BigDecimal(0),\n\t\t\tdistorationType: Distortion.OPERATION_NONE,\n\t\t\tcount: false,\n\t\t\targumentList: {},\n\t\t\tdelimited: false\n\t\t};\n\t\n\t\tif(state.current.type === Token.TYPE_NUMBER)\n\t\t{\n\t\t\tstate.count = state.current.value.toNumber();\n\t\t\tstate.hasCount = true;\n\t\t\tstate.current = this.stream.getNext();\n\t\t}\n\t\telse\n\t\t\tstate.count = 1;\n\t\tname = state.current.name;\n\t\tif(result.stack.indexOf(name) === -1)\n\t\t{\n\t\t\tif(!(name in context.segment))\n\t\t\t\tthrow(new ReferenceError(`Reference to undefined section \"${name}\" at ${state.current.position}`));\n\t\t\tsegment = context.segment[name];\n\t\t\tconst segmentName = name;\n\t\t\tstate.current = this.stream.getNext();\n\t\t\twhile(state.reading === true && state.current)\n\t\t\t{\n\t\t\t\tswitch(state.current.type)\n\t\t\t\t{\n\t\t\t\t\tcase Token.TYPE_OPERATOR_ROTATE:\n\t\t\t\t\tcase Token.TYPE_OPERATOR_SKEW_HORIZONTAL:\n\t\t\t\t\tcase Token.TYPE_OPERATOR_SKEW_VERTICAL:\n\t\t\t\t\t\tif(state.distorationType !== Distortion.OPERATION_NONE)\n\t\t\t\t\t\t\tthrow(new Error(`Encountered distortion operator, but distortion for segment \"${name}\" is already specified (parameter value: ${state.distortionValue})`));\n\t\t\t\t\t\tthis.stream.getNext();\n\t\t\t\t\t\texpResult = new ExpressionParser(this.stream).parse(context, 0, argumentList, false, {x: result.x, y: result.y}, Value.TYPE_THETA, [Token.TYPE_OPERATOR_ROTATE, Token.TYPE_OPERATOR_SKEW_HORIZONTAL, Token.TYPE_OPERATOR_SKEW_VERTICAL]);\n\t\t\t\t\t\tstate.distortionValue = expResult.accumulator;\n\t\t\t\t\t\tstate.distorationType =\n\t\t\t\t\t\t({\n\t\t\t\t\t\t\t[Token.TYPE_OPERATOR_ROTATE]: Distortion.OPERATION_ROTATE,\n\t\t\t\t\t\t\t[Token.TYPE_OPERATOR_SKEW_HORIZONTAL]: Distortion.OPERATION_SKEW_HORIZONTAL,\n\t\t\t\t\t\t\t[Token.TYPE_OPERATOR_SKEW_VERTICAL]: Distortion.OPERATION_SKEW_VERTICAL\n\t\t\t\t\t\t})[state.current.type];\n\t\t\t\t\t\tstate.current = this.stream.getCurrent();\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tcase Token.TYPE_BRACKET:\n\t\t\t\t\t\tif(!state.hasArgumentList)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(state.current.value)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.current = this.stream.getNext();\n\t\t\t\t\t\t\t\twhile(!state.hasArgumentList)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tswitch(state.current.type)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_BRACKET:\n\t\t\t\t\t\t\t\t\t\t\tif(state.current.value)\n\t\t\t\t\t\t\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected token \"${state.current.name}\" at column ${state.current.position}`));\n\t\t\t\t\t\t\t\t\t\t\tstate.hasArgumentList = true;\n\t\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_IDENTIFIER:\n\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_OPERATOR_ROTATE:\n\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_OPERATOR_REPEAT:\n\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_OPERATOR_SKEW_HORIZONTAL:\n\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_OPERATOR_SKEW_VERTICAL:\n\t\t\t\t\t\t\t\t\t\t\tstate.delimited = false;\n\t\t\t\t\t\t\t\t\t\t\tname = state.current.name;\n\t\t\t\t\t\t\t\t\t\t\ttype = state.current.type;\n\t\t\t\t\t\t\t\t\t\t\tswitch(type)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_IDENTIFIER:\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(context.segment[name])\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthrow(new ReferenceError(`Argument \"${name}\" is already defined as a segment`));\n\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_OPERATOR_ROTATE:\n\t\t\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_OPERATOR_SKEW_HORIZONTAL:\n\t\t\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_OPERATOR_SKEW_VERTICAL:\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(state.distorationType !== Distortion.OPERATION_NONE)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthrow(new Error(`Encountered distortion operator, but distortion for segment \"${segmentName}\" is already specified (parameter value: ${state.distortionValue})`));\n\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_OPERATOR_REPEAT:\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(state.hasCount)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthrow(new ReferenceError(`Execution count is already defined for this invocation`));\n\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tif(this.stream.peekNext().type === Token.TYPE_WHITESPACE)\n\t\t\t\t\t\t\t\t\t\t\t\tstate.current = this.stream.getNext();\n\t\t\t\t\t\t\t\t\t\t\tstate.current = this.stream.getNext();\n\t\t\t\t\t\t\t\t\t\t\tif(state.current.type === Token.TYPE_END)\n\t\t\t\t\t\t\t\t\t\t\t\tthrow(new Error(`Unexpected end of segment at ${state.current.position}`));\n\t\t\t\t\t\t\t\t\t\t\tif(state.current.type !== Token.TYPE_OPERATOR_ASSIGN)\n\t\t\t\t\t\t\t\t\t\t\t\tthrow(new SyntaxError(`Expected assignment operator after argument name, but found \"${state.current.name}\"`));\n\t\t\t\t\t\t\t\t\t\t\tstate.current = this.stream.getNext();\n\t\t\t\t\t\t\t\t\t\t\texpResult = new ExpressionParser(this.stream).parse(context, 0, argumentList, true, {x: result.x, y: result.y},\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t[Token.TYPE_IDENTIFIER]: Value.TYPE_UNIT,\n\t\t\t\t\t\t\t\t\t\t\t\t[Token.TYPE_OPERATOR_ROTATE]: Value.TYPE_THETA,\n\t\t\t\t\t\t\t\t\t\t\t\t[Token.TYPE_OPERATOR_SKEW_HORIZONTAL]: Value.TYPE_THETA,\n\t\t\t\t\t\t\t\t\t\t\t\t[Token.TYPE_OPERATOR_SKEW_VERTICAL]: Value.TYPE_THETA,\n\t\t\t\t\t\t\t\t\t\t\t\t[Token.TYPE_OPERATOR_REPEAT]: Value.TYPE_UNIT,\n\t\t\t\t\t\t\t\t\t\t\t}[type]);\n\t\t\t\t\t\t\t\t\t\t\tswitch(type)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_IDENTIFIER:\n\t\t\t\t\t\t\t\t\t\t\t\t\tstate.argumentList[name] = expResult.accumulator;\n\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_OPERATOR_ROTATE:\n\t\t\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_OPERATOR_SKEW_HORIZONTAL:\n\t\t\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_OPERATOR_SKEW_VERTICAL:\n\t\t\t\t\t\t\t\t\t\t\t\t\tstate.distortionValue = expResult.accumulator;\n\t\t\t\t\t\t\t\t\t\t\t\t\tstate.distorationType = ({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[Token.TYPE_OPERATOR_ROTATE]: Distortion.OPERATION_ROTATE,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[Token.TYPE_OPERATOR_SKEW_HORIZONTAL]: Distortion.OPERATION_SKEW_HORIZONTAL,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[Token.TYPE_OPERATOR_SKEW_VERTICAL]: Distortion.OPERATION_SKEW_VERTICAL\n\t\t\t\t\t\t\t\t\t\t\t\t\t})[type];\n\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_OPERATOR_REPEAT:\n\t\t\t\t\t\t\t\t\t\t\t\t\tstate.count = expResult.accumulator.toNumber();\n\t\t\t\t\t\t\t\t\t\t\t\t\tstate.hasCount = true;\n\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tstate.current = this.stream.getCurrent();\n\t\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_DELIMITER:\n\t\t\t\t\t\t\t\t\t\t\tif(state.delimited)\n\t\t\t\t\t\t\t\t\t\t\t\tthrow(new Error(`Unexpected delimiter at column ${state.current.position}`));\n\t\t\t\t\t\t\t\t\t\t\tstate.delimited = true;\n\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_WHITESPACE:\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tcase Token.TYPE_END:\n\t\t\t\t\t\t\t\t\t\t\tthrow(new Error(`Unexpected end of segment at ${state.current.position}`));\n\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected token \"${state.current.name}\" at column ${state.current.position}`));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tstate.current = this.stream.getNext();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tthrow(new SyntaxError(`Unexpected token \"${state.current.name}\" at column ${state.current.position}`));\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstate.reading = false;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase Token.TYPE_WHITESPACE:\n\t\t\t\t\t\tif(this.stream.peekNext().type === Token.TYPE_OPERATOR_ROTATE)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tstate.reading = false;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tstate.current = this.stream.getNext();\n\t\t\t}\n\t\t\tif(state.count !== parseInt(state.count))\n\t\t\t\tthrow(new Error(`The execution count (${state.count}) for segment \"${name}\" must be an integer.`));\n\t\t\tif(state.count < 1)\n\t\t\t\tthrow(new Error(`The execution count (${state.count}) for segment \"${name}\" can't be less than 1.`));\n\t\t\tfor(index = 1; index <= state.count; index++)\n\t\t\t{\n\t\t\t\tinner = new PathParser(new TokenStream(segment));\n\t\t\t\tinner.parse(context, result, state.distorationType, state.distortionValue, index, state.argumentList);\n\t\t\t\tresult.stack.pop();\n\t\t\t}\n\t\t\tstate.reading = false;\n\t\t}\n\t\telse\n\t\t\tthrow(new ReferenceError(`Segment ${state.current.name} cannot call itself`));\n\t\n\t\treturn;\n\t}\n}\n","import ExpressionParser from \"./ExpressionParser\";\nimport TokenStream from \"./TokenStream\";\nimport PathParser from \"./PathParser\";\nimport BigDecimal from \"./BigDecimal\";\nimport Value from \"./Value\";\n\nexport default class Transformer\n{\n\tconstructor(text)\n\t{\n\t\tthis.document = Transformer.#parseXML(text);\n\t}\n\n\tstatic #parseXML(text)\n\t{\n\t\treturn((new (typeof(DOMParser) === \"undefined\" ? require('xmldom').DOMParser : DOMParser)()).parseFromString(text, \"text/xml\"));\n\t}\n\n\t#parseUnitList(context, list)\n\t{\n\t\tlet stack = [];\n\t\tlet item;\n\n\t\twhile(stack.length || list.length)\n\t\t{\n\t\t\tif(stack.length)\n\t\t\t\titem = stack.pop();\n\t\t\telse\n\t\t\t{\n\t\t\t\titem = list.shift();\n\t\t\t\titem.parentNode.removeChild(item);\n\t\t\t}\n\t\t\tlet parser = new ExpressionParser(new TokenStream(item.getAttribute(\"value\")));\n\t\t\ttry\n\t\t\t{\n\t\t\t\tlet result = parser.parse(context, 1, {}, false, null, Value.TYPE_UNIT);\n\t\t\t\tlet id = item.getAttribute(\"id\");\n\t\t\t\tif(id in context.unit)\n\t\t\t\t\tthrow(new Error(`Duplicate unit ID: \"${id}\"`));\n\t\t\t\tcontext.unit[id] = result.accumulator;\n\t\t\t}\n\t\t\tcatch(except)\n\t\t\t{\n\t\t\t\tif(except instanceof ReferenceError)\n\t\t\t\t{\n\t\t\t\t\tif(stack.filter(i => i.getAttribute(\"id\") === parser.stream.getCurrent().name).length === 1)\n\t\t\t\t\t\tthrow(new ReferenceError(`Circular reference to \"${parser.stream.getCurrent().name}\"`));\n\t\t\t\t\tstack.push(item);\n\t\t\t\t\tlet next = list.filter(i => i.getAttribute(\"id\") === parser.stream.getCurrent().name);\n\t\t\t\t\tif(next.length > 1)\n\t\t\t\t\t\tthrow(new ReferenceError(`Unable to resolve expression \"${item.getAttribute(\"value\")}\". Duplicate ID \"${parser.stream.getCurrent().name}\".`));\n\t\t\t\t\tif(next.length === 0)\n\t\t\t\t\t\tthrow(new ReferenceError(`Unable to resolve expression \"${item.getAttribute(\"value\")}\". \"${parser.stream.getCurrent().name}\" is undefined.`));\n\t\t\t\t\tstack.push(next[0]);\n\t\t\t\t\tnext[0].parentNode.removeChild(next[0]);\n\t\t\t\t\tlist = list.slice(0, list.indexOf(next[0])).concat(list.slice(list.indexOf(next[0]) + 1));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tthrow(new Error(\"Couldn't parse item, \" + except.message, {cause: except}));\n\t\t\t}\n\t\t}\n\t}\n\n\t#parseSegmentList(context, list)\n\t{\n\t\tlist.forEach(i => i.parentNode.removeChild(i));\n\t\tcontext.segment = list.reduce((previous, current) =>\n\t\t{\n\t\t\tlet id = current.getAttribute(\"id\");\n\t\t\tif(id in previous)\n\t\t\t\tthrow(new Error(`Duplicate segment ID: \"${id}\"`));\n\t\t\tif(id in context.unit)\n\t\t\t\tthrow(new Error(`Segment ID: \"${id}\" already defined as a unit`));\n\t\t\tprevious[current.getAttribute(\"id\")] = current.getAttribute(\"d\");\n\n\t\t\treturn(previous);\n\t\t}, {});\n\t}\n\n\t#parseIncludeList(configuration)\n\t{\n\t\tlet list;\n\t\tlet seen = [];\n\n\t\tdo\n\t\t{\n\t\t\tlist = Array.from(this.document.getElementsByTagName(\"include\"));\n\t\t\tlist.forEach(item =>\n\t\t\t{\n\t\t\t\tlet href = item.getAttribute(\"href\");\n\t\t\t\tif(seen.indexOf(href) !== -1)\n\t\t\t\t\tthrow(new Error(`Circular include reference: ${href}`));\n\t\t\t\tseen.push(href);\n\t\t\t\thref = href.split(\"#\");\n\t\t\t\tlet filename = href[0];\n\t\t\t\tlet id = href.length > 1 ? href.slice(1).join(\"#\") : null;\n\t\t\t\tconst fs = require('fs');\n\t\t\t\tconst data = fs.readFileSync(configuration.base + filename, {encoding: \"utf-8\", flag: \"r\"});\n\t\t\t\tlet inner = Transformer.#parseXML(data);\n\t\t\t\tlet target;\n\t\t\t\tif(id !== null)\n\t\t\t\t{\n\t\t\t\t\ttarget = inner.getElementById(id);\n\t\t\t\t\tif(!target)\n\t\t\t\t\t\tthrow(new Error(`Failed to include file: ${filename}, ID: ${id}`));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttarget = inner.documentElement;\n\t\t\t\t\tif(!target)\n\t\t\t\t\t\tthrow(new Error(`Failed to include file: ${filename}`));\n\t\t\t\t}\n\t\t\t\tif(target.nodeName.toLowerCase() === \"svg\")\n\t\t\t\t{\n\t\t\t\t\tlet child = target.firstChild;\n\t\t\t\t\twhile(child)\n\t\t\t\t\t{\n\t\t\t\t\t\tlet add = child;\n\t\t\t\t\t\tchild = child.nextSibling;\n\t\t\t\t\t\titem.parentNode.insertBefore(add, item);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\titem.parentNode.insertBefore(target, item);\n\t\t\t\titem.parentNode.removeChild(item);\n\t\t\t});\n\t\t} while(list.length);\n\t}\n\n\t#extractIsolated(documentElement, base, list)\n\t{\n\t\tconst path = require('path');\n\n\t\treturn(list.filter(i => i.hasAttribute(\"id\")).map(i =>\n\t\t{\n\t\t\tlet container = documentElement.cloneNode(true);\n\t\t\tlet cursor = container.firstChild;\n\t\t\tlet target = null;\n\t\t\tlet visited = [];\n\t\t\twhile(cursor)\n\t\t\t{\n\t\t\t\tif(cursor.firstChild && !visited.includes(cursor.firstChild))\n\t\t\t\t{\n\t\t\t\t\tcursor = cursor.firstChild;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlet nextNode = cursor.nextSibling ?? cursor.parentNode;\n\t\t\t\t\tif(cursor.tagName && cursor.hasAttribute(\"id\"))\n\t\t\t\t\t{\n\t\t\t\t\t\tif(cursor.getAttribute(\"id\") !== i.getAttribute(\"id\") || target !== null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlet parent = cursor.parentNode;\n\t\t\t\t\t\t\tif(cursor.previousSibling && !cursor.previousSibling.tagName)\n\t\t\t\t\t\t\t\tparent.removeChild(cursor.previousSibling);\n\t\t\t\t\t\t\tparent.removeChild(cursor);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(target === null)\n\t\t\t\t\t\t\t\ttarget = cursor;\n\t\t\t\t\t\t\tvisited.push(cursor);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tvisited.push(cursor);\n\t\t\t\t\tcursor = nextNode;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst chain = [];\n\t\t\twhile(target && !target.hasAttribute(\"dir\"))\n\t\t\t{\n\t\t\t\tchain.push(target);\n\t\t\t\ttarget = target.parentNode;\n\t\t\t}\n\t\t\tif(target.attributes.length === 1 && target.parentNode)\n\t\t\t{\n\t\t\t\tconst parent = target.parentNode;\n\t\t\t\tparent.insertBefore(chain[chain.length - 1], target);\n\t\t\t\tparent.removeChild(target);\n\t\t\t}\n\t\t\telse\n\t\t\t\ttarget.removeAttribute(\"dir\");\n\n\t\t\treturn([base + (target ? target.getAttribute(\"dir\") + path.sep : \"\") + i.getAttribute(\"id\") + \".svg\", container]);\n\t\t}));\n\t}\n\n\ttransform(configuration)\n\t{\n\t\tlet context =\n\t\t{\n\t\t\tunit: {},\n\t\t\tdepth: 1,\n\t\t\toptimisation:\n\t\t\t{\n\t\t\t\tpath:\n\t\t\t\t{\n\t\t\t\t\tprecision: configuration.precision,\n\t\t\t\t\tcombineCommands: configuration.combinePathCommands /* Don't output h 20 h 20 */\n\t\t\t\t},\n\t\t\t\txml:\n\t\t\t\t{\n\t\t\t\t\tstripWhitespace: configuration.stripWhitespace === \"xml\" || configuration.stripWhitespace === \"all\",\n\t\t\t\t\tstripComments: configuration.stripComments\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tthis.#parseIncludeList(configuration);\n\t\tthis.#parseUnitList(context, Array.from(this.document.getElementsByTagName(\"unit\")));\n\t\tfor(let item in configuration.unit)\n\t\t\tcontext.unit[item] = configuration.unit[item];\n\t\tthis.#parseSegmentList(context, Array.from(this.document.getElementsByTagName(\"segment\")));\n\t\tlet list = Array.from(this.document.getElementsByTagName(\"path\"));\n\t\tcontext.depth = 0;\n\t\twhile(list.length)\n\t\t{\n\t\t\tlet item = list.shift();\n\t\t\tlet parser = new PathParser(new TokenStream(item.getAttribute(\"d\")));\n\t\t\tlet pathResult = parser.parse(context);\n\t\t\titem.setAttribute(\"d\", PathParser.resultToString(pathResult, context.optimisation.path.precision))\n\t\t}\n\t\tlist = Array.from(this.document.getElementsByTagName(\"svg\"));\n\t\tcontext.depth = 0;\n\t\twhile(list.length)\n\t\t{\n\t\t\tlet item = list.shift();\n\t\t\tif(item.hasAttribute(\"viewBox\"))\n\t\t\t{\n\t\t\t\tlet parser = new PathParser(new TokenStream(item.getAttribute(\"viewBox\")));\n\t\t\t\tlet viewBoxResult = parser.parseList(context, Value.getEmptyResult(), 4);\n\t\t\t\titem.setAttribute(\"viewBox\", PathParser.resultToString(viewBoxResult, context.optimisation.path.precision));\n\t\t\t}\n\t\t}\n\t\tlet stack = [];\n\t\tlet cursor = this.document.documentElement.firstChild;\n\t\tlet Node = {COMMENT_NODE: 8, TEXT_NODE: 3};\n\t\twhile(stack.length || cursor)\n\t\t{\n\t\t\tif(cursor.firstChild)\n\t\t\t\tstack.push(cursor.firstChild);\n\t\t\tlet target = cursor;\n\t\t\tif(cursor.nextSibling)\n\t\t\t\tcursor = cursor.nextSibling;\n\t\t\telse\n\t\t\t\tcursor = stack.pop();\n\t\t\tif(context.optimisation.xml.stripWhitespace && target.nodeType === Node.TEXT_NODE && target.nodeValue.replace(new RegExp(\"\\\\s+\", \"g\"), \"\").length === 0)\n\t\t\t\ttarget.parentNode.removeChild(target);\n\t\t\tif(context.optimisation.xml.stripComments && target.nodeType === Node.COMMENT_NODE)\n\t\t\t\ttarget.parentNode.removeChild(target);\n\t\t}\n\t\tif(configuration.extract)\n\t\t{\n\t\t\tconst path = require('path');\n\t\t\tlet base = configuration.destination + path.sep;\n\t\t\tlist = this.#extractIsolated(this.document.documentElement, base, Array.from(this.document.getElementsByTagName(\"*\")));\n\t\t}\n\t\telse\n\t\t\tlist = [[configuration.destination, this.document.documentElement]];\n\n\t\treturn(list.map(([i, j]) => [i, (new (typeof(XMLSerializer) === \"undefined\" ? require(\"xmldom\").XMLSerializer : XMLSerializer)()).serializeToString(j)]));\n\t}\n};\n","import Transformer from \"./class/Transformer\";\nimport PathParser from \"./class/PathParser\";\nimport BigDecimal from \"./class/BigDecimal\";\nimport * as fs from 'fs';\n\n/*\nexport function transform(text, configuration, require)\n{\n\tconsole.log(\"Transforming\"); \n\twindow.PathParser = PathParser;\n\twindow.BigDecimal = BigDecimal;\n\tvar tt = `\n\t<svg>\n\t\t<unit id=\"pp\" value=\"3n\" />\n\t\t<unit id=\"n\" value=\"2\" />\n\t\t<unit id=\"q\" value=\"3n + 4pp((3))\" />\n\t\t<segment id=\"kSegment\" d=\"l 20 0 \" />\n\t\t<segment id=\"kSegment2\" d=\"L 200,100\" />\n\t\t<segment id=\"kSegment3\" d=\"c 20,50 80,-50 100,0\" />\n\t\t<segment id=\"kSegment4\" d=\"a 50,60 30 1 0 100,0\" />\n\t\t<segment id=\"kSegment5\" d=\"l 100,20 l 100,-20 l @400,@400\" />\n\t\t<segment id=\"purple\" d=\"h 5j v 5j h 3n\" />\n\t\t<apath d=\"m 50,50n kSegment kSegment % 90 l -3.2.5 l-20-20 40 40 l 50 0 l 50 50\" />\n\t\t<apath d=\"M 100,100 kSegment2 L 100,100 kSegment2%45 L 300,100\" />\n\t\t<apath d=\"M 100,100 kSegment2%90 M 200,200 kSegment2%90\" />\n\t\t<apath d=\"M 100,100 kSegment3\" />\n\t\t<apath d=\"M 100,300 kSegment3%90\" />\n\t\t<apath d=\"M 100,100 kSegment4\" />\n\t\t<apath d=\"M 100,300 kSegment4%90\" />\n\t\t<apath d=\"M 100,100 kSegment5\" />\n\t\t<apath d=\"M 100,100 kSegment5%30\" />\n\t\t<apath d=\"M 100,100 m 30,30 3kSegment2()%45 3kSegment z\" />\n\t\t<apath d=\"M 100,100 purple(j=5 n=5 #=2)m(49) 50\" />\n\t\t<segment id=\"green\" d=\"h 50 v 50\" />\n\t\t<apath d=\"M 100,100 green%|green|\" />\n\t\t<path d=\"m 50,50 h 30 h 30 h 30\" />\n\t\t<include href=\"somefile.svg#element\" />\n\t</svg>`;\n\ttt = `<svg viewBox=\"0 0 300 300\">\n\t\t<path d=\"m 50,50 Q 50,100 100,100 Q 150,100 150,50 Q 150,0 100,0\" stroke=\"red\" strokewidth=\"3\" />\n\t\t<path d=\"m 50,75 Q 50,125 100,125 T 150,75 T 100,25\" fill=\"transparent\" stroke=\"red\" strokewidth=\"3\" />\n\t</svg>`;\n\treturn((new Transformer(tt)).transform());\n};\n*/\n\n(function() {\n\tlet parameter = process.argv.slice(2);\n\tlet valid = true;\n\tlet reading = true;\n\tlet whitespaceTypeList = [\"path\", \"xml\", \"all\"];\n\tlet configuration =\n\t{\n\t\tstripWhitespace: null,\n\t\tstripComments: false,\n\t\tcombinePathCommands: false,\n\t\tprecision: 3\n\t};\n\n\twhile(reading && valid && parameter[0] && parameter[0].startsWith(\"--\"))\n\t\tswitch(parameter[0])\n\t\t{\n\t\t\tcase \"--precision\":\n\t\t\t\tconfiguration.precision = parseInt(parameter[1]);\n\t\t\t\tif(configuration.precision.toString() !== parameter[1] || isNaN(configuration.precision))\n\t\t\t\t{\n\t\t\t\t\tconsole.log(\"Invalid syntax for --precision switch\");\n\t\t\t\t\tvalid = false;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tparameter = parameter.slice(2);\n\t\t\t\tbreak;\n\t\t\tcase \"--stripWhitespace\":\n\t\t\t\tconfiguration.stripWhitespace = parameter[1];\n\t\t\t\tif(whitespaceTypeList.indexOf(configuration.stripWhitespace) === -1)\n\t\t\t\t{\n\t\t\t\t\tconsole.log(\"Invalid syntax for --stripWhitespace switch\");\n\t\t\t\t\tvalid = false;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tparameter = parameter.slice(2);\n\t\t\t\tbreak;\n\t\t\tcase \"--stripComments\":\n\t\t\t\tconfiguration.stripComments = true;\n\t\t\t\tparameter.shift();\n\t\t\t\tbreak;\n\t\t\tcase \"--combinePathCommands\":\n\t\t\t\tconfiguration.combinePathCommands = true;\n\t\t\t\tparameter.shift();\n\t\t\t\tbreak;\n\t\t\tcase \"--extract\":\n\t\t\t\tconfiguration.extract = true;\n\t\t\t\tparameter.shift();\n\t\t\t\tbreak;\n\t\t\tcase \"--\":\n\t\t\t\tparameter.shift();\n\t\t\tdefault:\n\t\t\t\treading = false;\n\t\t\tbreak;\n\t\t}\n\tif(!valid || parameter.length < 2)\n\t{\n\t\tconsole.log(\n`\nUsage: npm start -- [options] <source> <destination> [units...]\n\nsource       An unprocessed SVG file containing Pather commands\ndestination  Desired filename of the processed output\noptions      One or more of the following switches:\n  --precision <n>                   Write numbers to the output with N decimal places. Default is 3\n  --stripWhitespace <path|xml|all>  Strip whitespace from within path data, between XML tags or both (all)\n  --stripComments                   Strip XML comments from the output document\n  --combinePathCommands             Combine repeated commands in path data, e.g. h 30 h 30 becomes h 60\n  --extract                         Extract all elements with an ID to individual files (destination is a directory)\nunits        Variable values to be passed to the Pather environment\n             Name/value pairs separated by \"=\", e.g. myUnit=3 myOtherUnit=4.2\n`\n\t\t\t);\n\t}\n\telse\n\t{\n\t\tlet source = parameter.shift();\n\t\tconfiguration.destination = parameter.shift();\n\t\tconfiguration.unit = {};\n\t\treading = true;\n\t\twhile(reading && parameter.length) {\n\t\t\tlet unit = parameter.shift().split(\"=\");\n\t\t\tlet reason;\n\t\t\tswitch(true)\n\t\t\t{\n\t\t\t\tcase unit.length !== 2:\n\t\t\t\t\treason = `Invalid unit format \"${unit.join(\"=\")}\".`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase new RegExp(\"^[bdefgijknopruwxy]|[a-z_$][a-z0-9_$]+$\", \"i\").exec(unit[0]) === null:\n\t\t\t\t\treason = `Invalid unit name \"${unit[0]}\".`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase parseFloat(unit[1]).toString() !== unit[1].substr(0, parseFloat(unit[1]).toString().length) || isNaN(parseFloat(unit[1])) || parseFloat(unit[1]) === Infinity || parseFloat(unit[1]) === -Infinity:\n\t\t\t\t\treason = `Invalid unit value \"${unit[1]}\".`;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(reason)\n\t\t\t{\n\t\t\t\tconsole.log(`${reason} Expected valid identifier followed by a number, e.g. myUnit=3`); \n\t\t\t\treading = false;\n\t\t\t}\n\t\t\telse\n\t\t\t\tconfiguration.unit[unit[0]] = parseFloat(unit[1]);\n\t\t}\n\t\tif(reading)\n\t\t{\n\t\t\t// console.log(configuration);\n\t\t\tconst fs = require('fs');\n\t\t\tconst path = require('path');\n\t\t\tconfiguration.base = path.dirname(source) + path.sep;\n\t\t\tconst data = fs.readFileSync(source, {encoding: \"utf-8\", flag: \"r\"});\n\t\t\tlet t = new Transformer(data);\n\t\t\tlet output = t.transform(configuration);\n\t\t\toutput.forEach(([i, j]) =>\n\t\t\t{\n\t\t\t\tif(!fs.existsSync(path.dirname(i)))\n\t\t\t\t\tfs.mkdirSync(path.dirname(i));\n\t\t\t\tfs.writeFileSync(i, j, {encoding: \"utf-8\"})\n\n\t\t\t\treturn;\n\t\t\t});\n\t\t}\n\t}\n\n\treturn;\n})();\n"],"names":["Token","static","constructor","type","name","value","position","this","BigDecimal","BigInt","repeat","LIMIT_PRECISION","RegExp","source","integerPart","decimalPart","VALUE_SHIFT","split","substr","padEnd","charCodeAt","fromBigInt","result","fromBigIntDivision","dividend","divisor","add","other","subtract","multiplyBy","divideBy","equals","valueOf","toNumber","toString","precision","text","Math","max","padStart","length","replace","PATTERN_TRAILING_ZERO","Value","getEmptyResult","stack","sequence","arity","pending","x","y","fixNext","lastAngle","originX","originY","TokenStream","TYPE_NUMBER","expression","handler","TYPE_COMMAND","a","TYPE_X","TYPE_Y","TYPE_THETA","TYPE_FLAG","c","h","l","m","q","s","t","v","z","toLowerCase","TYPE_DELIMITER","TYPE_WHITESPACE","TYPE_IDENTIFIER","TYPE_BRACKET","TYPE_OPERATOR_ADD","TYPE_OPERATOR_MULTIPLY","TYPE_OPERATOR_SUBTRACT","TYPE_OPERATOR_DIVIDE","TYPE_OPERATOR_ROTATE","TYPE_OPERATOR_SKEW_HORIZONTAL","TYPE_OPERATOR_SKEW_VERTICAL","TYPE_OPERATOR_FIX","TYPE_OPERATOR_MEASURE","TYPE_OPERATOR_ASSIGN","TYPE_OPERATOR_REPEAT","data","cursor","chainIndex","streamIndex","match","item","PRIORITY","exec","push","SyntaxError","TYPE_END","getCurrent","getNext","peekNext","reset","Distortion","rotate","x0","y0","x1","y1","distortionValue","cosine","sine","PI","cos","sin","abs","Number","EPSILON","fixPoint","point","relative","topX","topY","distortionType","OPERATION_SKEW_VERTICAL","fixed","OPERATION_SKEW_HORIZONTAL","applyDistortion","context","top","origin","command","point1","point2","last","OPERATION_NONE","atan2","console","log","optimisation","path","combineCommands","sequnce","pop","toUpperCase","PathParser","stream","resultToString","map","i","slice","join","parseList","limit","state","current","reading","index","expResult","ExpressionParser","parse","TYPE_UNIT","accumulator","argumentList","invoked","next","segment","parseInvocation","Error","indexOf","debug","formatOperation","operation","unwind","start","leftValue","OPERATION_EVALUATE","j","OPERATION_MULTIPLY","OPERATION_DIVIDE","OPERATION_ADD","OPERATION_SUBTRACT","depth","insideArgumentList","additionalTerminatorList","base","counter","unit","ReferenceError","includes","inner","hasCount","hasArgumentList","distorationType","count","delimited","segmentName","OPERATION_ROTATE","parseInt","Transformer","document","parseXML","require","DOMParser","parseFromString","parseUnitList","list","shift","parentNode","removeChild","parser","getAttribute","id","except","message","cause","filter","concat","parseSegmentList","forEach","reduce","previous","parseIncludeList","configuration","seen","Array","from","getElementsByTagName","href","filename","readFileSync","encoding","flag","target","getElementById","documentElement","nodeName","child","firstChild","nextSibling","insertBefore","extractIsolated","hasAttribute","container","cloneNode","visited","nextNode","tagName","parent","previousSibling","chain","attributes","removeAttribute","sep","transform","combinePathCommands","xml","stripWhitespace","stripComments","pathResult","setAttribute","viewBoxResult","Node","nodeType","nodeValue","extract","destination","XMLSerializer","serializeToString","parameter","process","argv","valid","whitespaceTypeList","startsWith","isNaN","reason","parseFloat","Infinity","fs","dirname","existsSync","mkdirSync","writeFileSync"],"mappings":"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"}